{
  "train_0": {
    "id": "0_0",
    "text": "When was the Battle of Gettysburg?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?date \nWHERE { \n       res:Battle_of_Gettysburg dbo:date ?date .\n}",
    "relations": [
      "dbo:date"
    ],
    "resources": [
      "http://dbpedia.org/resource/Battle_of_Gettysburg"
    ],
    "classes": [],
    "extended_amr": "(b/be-temporally-at-91\n\t\t:ARG1 (w/ war\n\t\t\t\t:name (n/name\n\t\t\t\t\t:op1 \"Gettysburg\"))\n\t\t:time (a/amr-unknown)\n\t\t:entities ( el / entity_list\n\t\t\t:entity (a0/ linked_entity\n\t\t\t\t\t:surface_form \"gettysburg\"\n\t\t\t\t\t:uri \"http://dbpedia.org/resource/Battle_of_Gettysburg\")))\n\n"
  },
  "train_1": {
    "id": "1_1",
    "text": "List all the musicals with music by Elton John.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        ?uri rdf:type dbo:Musical .\n        ?uri dbo:musicBy res:Elton_John .\n}",
    "relations": [
      "dbo:musicBy"
    ],
    "resources": [
      "http://dbpedia.org/resource/Elton_John"
    ],
    "classes": [
      "dbo:Musical"
    ],
    "extended_amr": "(l / list-01\n\t:ARG1 (m / musical\n\t\t:mod (a / all)\n\t\t:ARG1-of (m2 / music-01\n\t\t\t:ARG0 (p / person\n\t\t\t\t:name (n / name\n\t\t\t\t\t:op1 \"Elton\"\n\t\t\t\t\t:op2 \"John\" ) ) ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Elton John\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Elton_John\")\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Musical theatre\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Musical_theatre\")))\n"
  },
  "train_2": {
    "id": "2_2",
    "text": "How high is the lighthouse in Colombo?",
    "sparql": "SELECT DISTINCT ?num WHERE {  <http://dbpedia.org/resource/Colombo_Lighthouse> <http://dbpedia.org/ontology/height> ?num . } ",
    "relations": [
      "dbo:height"
    ],
    "resources": [
      "http://dbpedia.org/resource/Colombo_Lighthouse"
    ],
    "classes": [],
    "extended_amr": "(h / have-quant-91\n      :ARG1 (l / lighthouse\n            :location (c / city :name (n / name :op1 \"Colombo\")))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"lighthouse\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Colombo_Lighthouse\")))\n\n"
  },
  "train_3": {
    "id": "3_3",
    "text": "Who was the wife of U.S. president Lincoln?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:Abraham_Lincoln dbo:spouse ?uri.\n}",
    "relations": [
      "dbo:spouse"
    ],
    "resources": [
      "http://dbpedia.org/resource/Abraham_Lincoln"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (h / have-rel-role-91\n            :ARG1 (p2 / person :name (n / name :op1 \"Lincoln\")\n                  :ARG0-of (h2 / have-org-role-91\n                        :ARG1 (c / country :name (n2 / name :op1 \"U.S.\"))\n                        :ARG2 (p3 / president)))\n            :ARG2 (w / wife))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Lincoln\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Abraham_Lincoln\")))\n\n"
  },
  "train_4": {
    "id": "4_4",
    "text": "Who is the host of the BBC Wildlife Specials?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/BBC_Wildlife_Specials> <http://dbpedia.org/ontology/presenter> ?uri . }",
    "relations": [
      "dbo:presenter"
    ],
    "resources": [
      "http://dbpedia.org/resource/BBC_Wildlife_Specials"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (h / host-01\n            :ARG1 (s / show :name (n / name :op1 \"Wildlife\" :op2 \"Specials\")\n                  :mod (c / company :name (n2 / name :op1 \"British\" :op2 \"Broadcasting\" :op3 \"Corporation\"))))\n      :domain (a / amr-unknown)\n      :entities ( el / entity_list\n            :entity (e0/ linked_entity\n                        :surface_form \"Wildlife Specials\"\n                        :uri \"http://dbpedia.org/resource/BBC_Wildlife_Specials\")))"
  },
  "train_5": {
    "id": "5_5",
    "text": "How much did Pulp Fiction cost?",
    "sparql": "SELECT DISTINCT ?n WHERE {  <http://dbpedia.org/resource/Pulp_Fiction> <http://dbpedia.org/ontology/budget> ?n . } ",
    "relations": [
      "dbo:budget"
    ],
    "resources": [
      "http://dbpedia.org/resource/Pulp_Fiction"
    ],
    "classes": [],
    "extended_amr": "(c / cost-01\n      :ARG1 (w / work-of-art :name (n / name :op1 \"Pulp\" :op2 \"Fiction\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Pulp Fiction\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Pulp_Fiction\")))\n\n"
  },
  "train_6": {
    "id": "6_6",
    "text": "In what city is the Heineken brewery?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heineken> <http://dbpedia.org/ontology/manufacturer> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri . }",
    "relations": [
      "dbo:manufacturer",
      "dbo:locationCity"
    ],
    "resources": [
      "http://dbpedia.org/resource/Heineken"
    ],
    "classes": [],
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (b2 / brewery\n            :mod (c / company :name (n / name :op1 \"Heineken\")))\n      :ARG2 (c2 / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Heineken\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Heineken\")))\n\n"
  },
  "train_7": {
    "id": "7_7",
    "text": "When did Operation Overlord commence?",
    "sparql": "SELECT DISTINCT ?d WHERE { <http://dbpedia.org/resource/Operation_Overlord> <http://dbpedia.org/ontology/date> ?d . } ",
    "relations": [
      "dbo:date"
    ],
    "resources": [
      "http://dbpedia.org/resource/Operation_Overlord"
    ],
    "classes": [],
    "extended_amr": "(c / commence-01\n      :ARG1 (w / war :name (n / name :op1 \"Operation\" :op2 \"Overlord\"))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"operation overlord\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Operation_Overlord\")))\n\n"
  },
  "train_8": {
    "id": "8_8",
    "text": "In which city does the Chile Route 68 end?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Chile_Route_68> <http://dbpedia.org/ontology/routeEnd> ?uri . } ",
    "relations": [
      "dbo:routeEnd"
    ],
    "resources": [
      "http://dbpedia.org/resource/Chile_Route_68"
    ],
    "classes": [],
    "extended_amr": "(e / end-01\n      :ARG1 (r / road :name (n / name :op1 \"Route\" :op2 \"68\")\n            :mod (c / country :name (n2 / name :op1 \"Chile\")))\n      :location (c2 / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"route 68\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Alabama_State_Route_68\")\n\t\t:entity (a1/ linked_entity\n\t\t\t\t:surface_form \"chile\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Chile\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"city\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/City\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"68 end\")))\n\n"
  },
  "train_9": {
    "id": "9_9",
    "text": "Who developed Slack?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Slack_(software)> . }",
    "relations": [
      "dbo:product"
    ],
    "resources": [
      "http://dbpedia.org/resource/Slack_(software)"
    ],
    "classes": [],
    "extended_amr": "(d / develop-02\n\t:ARG1 (p / publication\n\t\t:name (n / name\n\t\t\t:op1 \"Slack\" ) )\n\t:ARG0 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"Slack\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Slack_(software)\")))\n"
  },
  "train_10": {
    "id": "10_10",
    "text": "Who was married to president Chirac?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri\nWHERE { \n         res:Jacques_Chirac dbo:spouse ?uri .\n}",
    "relations": [
      "dbo:spouse"
    ],
    "resources": [
      "http://dbpedia.org/resource/Jacques_Chirac"
    ],
    "classes": [],
    "extended_amr": "(m / marry-01\n      :ARG1 (a / amr-unknown)\n      :ARG2 (p / person :name (n / name :op1 \"Chirac\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (p2 / president)))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Chirac\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Jacques_Chirac\")))\n\n"
  },
  "train_11": {
    "id": "11_11",
    "text": "What did Bruce Carver die from?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Bruce_Carver dbo:deathCause ?uri .     \n}",
    "relations": [
      "dbo:deathCause"
    ],
    "resources": [
      "http://dbpedia.org/resource/Bruce_Carver"
    ],
    "classes": [],
    "extended_amr": "(d / die-01\n      :ARG1 (p / person :name (n / name :op1 \"Bruce\" :op2 \"Carver\"))\n      :ARG1-of (c / cause-01\n            :ARG0 (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"bruce carver\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Bruce_Carver\")))\n\n"
  },
  "train_12": {
    "id": "12_12",
    "text": "Who painted The Storm on the Sea of Galilee?",
    "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:The_Storm_on_the_Sea_of_Galilee dbp:artist ?uri .\n}",
    "relations": [
      "dbp:artist"
    ],
    "resources": [
      "http://dbpedia.org/resource/The_Storm_on_the_Sea_of_Galilee"
    ],
    "classes": [],
    "extended_amr": "(p/paint-02\n\t:ARG0 (a/amr-unknown)\n\t:ARG1 (b/book\n\t\t:name (n/name\n\t\t\t:op1 \"The\"\n\t\t\t:op2 \"Storm\"\n\t\t\t:op3 \"On\"\n\t\t\t:op4 \"The\"\n\t\t\t:op5 \"Sea\"\n\t\t\t:op6 \"Of\"\n\t\t\t:op7 \"Galilee\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"The Storm On The Sea Of Galilee\"\n\t\t:uri \"http://dbpedia.org/resource/The_Storm_on_the_Sea_of_Galilee\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"sea\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Sea\")))\n\n"
  },
  "train_13": {
    "id": "13_13",
    "text": "Which cities does the Weser flow through?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Weser> <http://dbpedia.org/ontology/city> ?uri . } ",
    "relations": [
      "dbo:city"
    ],
    "resources": [
      "http://dbpedia.org/resource/Weser"
    ],
    "classes": [],
    "extended_amr": "(f / flow-01\n\t:ARG1 (u / university\n\t\t:name (n / name\n\t\t\t:op1 \"Weser\" ) )\n\t:ARG2 (c / city)\n\t:entities ( el / entity_list\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"cities\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/City\")\n\t\t:entity (d1/ linked_entity\n\t\t\t\t:surface_form \"Weser\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Weser\")))\n"
  },
  "train_14": {
    "id": "14_14",
    "text": "How many seats does the home stadium of FC Porto have?",
    "sparql": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/FC_Porto> <http://dbpedia.org/ontology/ground> ?x . ?x <http://dbpedia.org/ontology/seatingCapacity> ?n . } ",
    "relations": [
      "dbo:ground",
      "dbo:seatingCapacity"
    ],
    "resources": [
      "http://dbpedia.org/resource/FC_Porto"
    ],
    "classes": [],
    "extended_amr": "(s/seat\n\t:location (s2/stadium\n\t\t:mod (h/home)\n\t\t:poss (c/company\n\t\t\t:name (n/name\n\t\t\t\t:op1 \"FC\"\n\t\t\t\t:op2 \"Porto\")))\n\t:quant (a/amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"fc porto\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/FC_Porto_Real\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"seat\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/County_seat\")))\n\n"
  },
  "train_15": {
    "id": "15_15",
    "text": "Who is the daughter of Robert Kennedy married to?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Robert_F._Kennedy> <http://dbpedia.org/ontology/child> ?child .  ?child <http://dbpedia.org/ontology/spouse> ?uri . } ",
    "relations": [
      "dbo:child",
      "dbo:spouse"
    ],
    "resources": [
      "http://dbpedia.org/resource/Robert_F._Kennedy"
    ],
    "classes": [],
    "extended_amr": "(m/marry-01\n\t:ARG1 (h/have-rel-role-91\n\t\t:ARG0 (p/person\n\t\t\t\t:name (n/name\n\t\t\t\t\t:op1 \"Robert\"\n\t\t\t\t\t:op2 \"Kennedy\"))\n\t\t:ARG2 (d/daughter))\n\t:ARG0 (a/amr-unknown)\n\t:mode expressive\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"robert kennedy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Robert_F._Kennedy\")))\n\n"
  },
  "train_16": {
    "id": "16_16",
    "text": "Which books by Kerouac were published by Viking Press?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> .  ?uri <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Viking_Press> .  ?uri <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Jack_Kerouac> . } ",
    "relations": [
      "dbo:publisher",
      "dbo:author"
    ],
    "resources": [
      "http://dbpedia.org/resource/Viking_Press",
      "http://dbpedia.org/resource/Jack_Kerouac"
    ],
    "classes": [
      "dbo:Book"
    ],
    "extended_amr": "(p / publish-01\n      :ARG0 (p2 / puplication :name (n / name :op1 \"Viking\" :op2 \"Press\"))\n      :ARG1 (b / book\n            :mod (a / amr-unknown)\n            :prep-by (p3 / person :name (n2 / name :op1 \"Kerouac\")))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"viking press\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Viking_Press\")\n\t\t:entity (a1/ linked_entity\n\t\t\t\t:surface_form \"kerouac\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Jack_Kerouac\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"book\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Book\")))\n\n"
  },
  "train_17": {
    "id": "17_17",
    "text": "How tall is Amazon Eve?",
    "sparql": "SELECT DISTINCT ?height WHERE {  <http://dbpedia.org/resource/Amazon_Eve> <http://dbpedia.org/ontology/height> ?height . } ",
    "relations": [
      "dbo:height"
    ],
    "resources": [
      "http://dbpedia.org/resource/Amazon_Eve"
    ],
    "classes": [],
    "extended_amr": "(h / have-quant-91\n      :ARG1 (p / person :name (n / name :op1 \"Amazon\" :op2 \"Eve\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"amazon eve\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Amazon_Eve\")))\n\n"
  },
  "train_18": {
    "id": "18_18",
    "text": "Which museum exhibits The Scream by Munch?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n       res:The_Scream dbo:museum ?uri .\n}",
    "relations": [
      "dbo:museum"
    ],
    "resources": [
      "http://dbpedia.org/resource/The_Scream"
    ],
    "classes": [],
    "extended_amr": "(e/exhibit-01\n\t:ARG0 (m/museum\n\t\t:mod (a/amr-unknown))\n\t:ARG1 (x0/Scream\n\t\t:ARG0 (p/person\n\t\t\t:name (n/name\n\t\t\t\t:op1 \"Munch\")))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"munch\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Munch\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"museum exhibit\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Museum_ship\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"scream\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Scream\")))\n\n"
  },
  "train_19": {
    "id": "19_19",
    "text": "Who wrote the book Les Piliers de la terre?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:The_Pillars_of_the_Earth dbo:author ?uri .\n}",
    "relations": [
      "dbo:author"
    ],
    "resources": [
      "http://dbpedia.org/resource/The_Pillars_of_the_Earth"
    ],
    "classes": [],
    "extended_amr": "(w / write-01\n\t:mode interrogative\n\t:ARG1 (c / company\n\t\t:name (n / name\n\t\t\t:op1 \"Les\"\n\t\t\t:op2 \"Piliers\" )\n\t\t:mod (e / establish\n\t\t\t:mod (e2 / expressive) ) )\n\t:ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"Les Piliers\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Pillars_of_the_Earth\")))\n"
  },
  "train_20": {
    "id": "20_20",
    "text": "Is James Bond married?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n        res:James_Bond dbo:spouse ?uri . \n}",
    "relations": [
      "dbo:spouse"
    ],
    "resources": [
      "http://dbpedia.org/resource/James_Bond"
    ],
    "classes": [],
    "extended_amr": "(m / marry-01 :mode interrogative\n      :ARG1 (p / person :name (n / name :op1 \"James\" :op2 \"Bond\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"James Bond\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/James_Bond\")))\n\n"
  },
  "train_21": {
    "id": "21_21",
    "text": "Who discovered Ceres?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> <http://dbpedia.org/ontology/discoverer> ?uri . }",
    "relations": [
      "dbo:discoverer"
    ],
    "resources": [
      "http://dbpedia.org/resource/Ceres_(dwarf_planet)"
    ],
    "classes": [],
    "extended_amr": "(d / discover-01\n\t:ARG1 (p / person\n\t\t:name (n / name\n\t\t\t:op1 \"Ceres\" ) )\n\t:ARG0 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"Ceres\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ceres_(dwarf_planet)\")))\n"
  },
  "train_22": {
    "id": "22_22",
    "text": "Which river does the Brooklyn Bridge cross?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {       \n        res:Brooklyn_Bridge dbo:crosses ?uri . \n}",
    "relations": [
      "dbo:crosses"
    ],
    "resources": [
      "http://dbpedia.org/resource/Brooklyn_Bridge"
    ],
    "classes": [],
    "extended_amr": "(c / cross-02\n\t:ARG0 (f / facility\n\t\t:name (n / name\n\t\t\t:op1 \"Brooklyn\"\n\t\t\t:op2 \"Bridge\" ) )\n\t:ARG1 (r / river\n\t\t:mod (a / amr-unknown) )\n\t:entities ( el / entity_list\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Brooklyn\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Brooklyn\")\n\t\t:entity (c1/ linked_entity\n\t\t\t\t:surface_form \"East River\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/East_River\")))\n"
  },
  "train_23": {
    "id": "23_23",
    "text": "Who was called Frank The Tank?",
    "sparql": "PREFIX dbp: <http://dbpedia.org/property/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbp:nickname 'Frank The Tank'@en . \n}",
    "relations": [
      "dbp:nickname"
    ],
    "resources": [],
    "classes": [],
    "extended_amr": "(c/call-01\n\t:ARG1 (a/amr-unknown)\n\t:ARG2 (p/person\n\t\t:name (n/name\n\t\t\t:op1 \"Frank\"\n\t\t\t:op2 \"The\"\n\t\t\t:op3 \"Tank\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"frank the tank\"\n\t\t\t\t:uri \"http://dbpedia.org/page/Frank_The_Tank\")))\n\n"
  },
  "train_24": {
    "id": "24_24",
    "text": "What is the largest country in the world?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/ontology/areaTotal> ?n . } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
    "relations": [
      "dbo:areaTotal"
    ],
    "resources": [],
    "classes": [
      "dbo:Country"
    ],
    "extended_amr": "(c / country\n\t:mod (l / large\n\t\t:op1 \"largest\"\n\t\t:compared-to (w / world) )\n\t:domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"World\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/World\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Country_music\")))\n"
  },
  "train_25": {
    "id": "25_25",
    "text": "Who is the mayor of Paris?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paris> <http://dbpedia.org/ontology/mayor> ?uri . }",
    "relations": [
      "dbo:mayor"
    ],
    "resources": [
      "http://dbpedia.org/resource/Paris"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c / city :name (n / name :op1 \"Paris\"))\n            :ARG2 (m / mayor))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Paris\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Paris\")))\n\n"
  },
  "train_26": {
    "id": "26_26",
    "text": "Who is the coach of Ankara's ice hockey team?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Ankara> . ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Turkish_Ice_Hockey_First_League> . ?x <http://dbpedia.org/ontology/coach> ?uri . }",
    "relations": [
      "dbo:city",
      "dbo:league",
      "dbo:coach"
    ],
    "resources": [
      "http://dbpedia.org/resource/Ankara",
      "http://dbpedia.org/resource/Turkish_Ice_Hockey_First_League"
    ],
    "classes": [],
    "extended_amr": "(p / person\n\t:ARG0-of (c / coach)\n\t:ARG1 (t / team\n\t\t:mod (h / hockey\n\t\t\t:mod (i / ice) )\n\t\t:poss (c2 / city\n\t\t\t:name (n / name\n\t\t\t\t:op1 \"Ankara\" ) ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Ankara\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ankara\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"ice hockey\"\n\t\t\t\t:type Sport\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ice_hockey\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"coach\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Coach_(sport)\")))\n"
  },
  "train_27": {
    "id": "27_27",
    "text": "Who is the mayor of the capital of French Polynesia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE { \n        res:French_Polynesia dbo:capital ?x .\n        ?x dbo:mayor ?uri .\n}",
    "relations": [
      "dbo:capital",
      "dbo:mayor"
    ],
    "resources": [
      "http://dbpedia.org/resource/French_Polynesia"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c / city\n                  :ARG0-of (h2 / have-org-role-91\n                        :ARG1 (c2 / country :name (n / name :op1 \"French\" :op2 \"Polynesia\"))\n                        :ARG2 (c3 / capital)))\n            :ARG2 (m / mayor))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"French Polynesia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/French_Polynesia\")))\n\n"
  },
  "train_28": {
    "id": "28_28",
    "text": "Which awards did Douglas Hofstadter win?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Douglas_Hofstadter dbo:award ?uri .\n}",
    "relations": [
      "dbo:award"
    ],
    "resources": [
      "http://dbpedia.org/resource/Douglas_Hofstadter"
    ],
    "classes": [],
    "extended_amr": "(w / win-01\n\t:ARG1 (a / award-01\n\t\t:ARG1 (p / person\n\t\t\t:name (n / name\n\t\t\t\t:op1 \"Douglas\"\n\t\t\t\t:op2 \"Hofstadter\" ) ) )\n\t:manner (a2 / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Douglas Hofstadter\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Douglas_Hofstadter\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"awards\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Academy_Award\")))\n"
  },
  "train_29": {
    "id": "29_29",
    "text": "How much did the Lego Movie cost?",
    "sparql": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/The_Lego_Movie> <http://dbpedia.org/ontology/budget> ?n . } ",
    "relations": [
      "dbo:budget"
    ],
    "resources": [
      "http://dbpedia.org/resource/The_Lego_Movie"
    ],
    "classes": [],
    "extended_amr": "(c / cost-01\n      :ARG1 (w / work-of-art :name (n / name :op1 \"Lego\" :op2 \"Movie\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"the Lego Movie\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Lego_Movie\")))\n\n"
  },
  "train_30": {
    "id": "30_30",
    "text": "Where does Piccadilly start?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/routeStart> <http://dbpedia.org/resource/Piccadilly>. } ",
    "relations": [
      "dbo:routeStart"
    ],
    "resources": [
      "http://dbpedia.org/resource/Piccadilly"
    ],
    "classes": [],
    "extended_amr": "(b/be-located-at-91\n\t:ARG1 (s/start-01\n\t\t:ARG1 (p/product\n\t\t\t:name (n/name\n\t\t\t\t:op1 \"Piccadilly\")))\n\t:ARG2 (a/amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"piccadilly\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Piccadilly\")))\n\n"
  },
  "train_31": {
    "id": "31_31",
    "text": "Do Prince Harry and Prince William have the same parents?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nASK\nWHERE { \n        <http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge> dbo:parent ?x . \n        <http://dbpedia.org/resource/Prince_Harry> dbo:parent ?x .\n}",
    "relations": [
      "dbo:parent"
    ],
    "resources": [
      "http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge",
      "http://dbpedia.org/resource/Prince_Harry"
    ],
    "classes": [],
    "extended_amr": "(h / have-03 :mode interrogative\n      :ARG0 (a / and\n            :op1 (p / person :name (n / name :op1 \"Harry\")\n                  :ARG0-of (h2 / have-org-role-91\n                        :ARG2 (p2 / prince)))\n            :op2 (p3 / person :name (n2 / name :op1 \"William\")\n                  :ARG0-of (h3 / have-org-role-91\n                        :ARG2 (p4 / prince))))\n      :ARG1 (p5 / person\n            :ARG0-of (h4 / have-rel-role-91\n                  :ARG1 a\n                  :ARG2 (p6 / parent))\n            :ARG1-of (s / same-01))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Prince Harry\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Prince_Harry\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Prince William\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge\")))\n\n"
  },
  "train_32": {
    "id": "32_32",
    "text": "Who played Agent Smith in Matrix?",
    "sparql": "PREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE { \n        res:Agent_Smith dbp:portrayer ?uri . \n}",
    "relations": [
      "dbp:portrayer"
    ],
    "resources": [
      "http://dbpedia.org/resource/Agent_Smith"
    ],
    "classes": [],
    "extended_amr": "(p / play-01\n\t:ARG1 (p2 / person\n\t\t:name (n / name\n\t\t\t:op1 \"Agent\"\n\t\t\t:op2 \"Smith\" ) )\n\t:location (b / broadcast-program\n\t\t:name (n2 / name\n\t\t\t:op1 \"Matrix\" ) )\n\t:ARG0 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Agent Smith\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Agent_Smith\")))\n"
  },
  "train_33": {
    "id": "33_33",
    "text": "How many languages are spoken in Turkmenistan?",
    "sparql": "SELECT (COUNT(DISTINCT ?x) as ?c) WHERE {  <http://dbpedia.org/resource/Turkmenistan> <http://dbpedia.org/ontology/language> ?x . } ",
    "relations": [
      "dbo:language"
    ],
    "resources": [
      "http://dbpedia.org/resource/Turkmenistan"
    ],
    "classes": [],
    "extended_amr": "(l / language\n      :quant (a / amr-unknown)\n      :ARG3-of (s / speak-01)\n      :location (c / country :name (n / name :op1 \"Turkmenistan\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Turkmenistan\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Turkmenistan\")))\n\n"
  },
  "train_34": {
    "id": "34_34",
    "text": "In which films did Julia Roberts as well as Richard Gere play?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> .  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Gere> . } ",
    "relations": [
      "dbo:starring"
    ],
    "resources": [
      "http://dbpedia.org/resource/Julia_Roberts",
      "http://dbpedia.org/resource/Richard_Gere"
    ],
    "classes": [
      "dbo:Film"
    ],
    "extended_amr": "(p / play-02\n      :ARG0 (a / and\n            :op1 (p2 / person :name (n / name :op1 \"Julia\" :op2 \"Roberts\"))\n            :op2 (p3 / person :name (n2 / name :op1 \"Richard\" :op2 \"Gere\")))\n      :subevent-of (f / film\n            :mod (a2 / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"julia roberts\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Julia_Roberts\")\n\t\t:entity (a1/ linked_entity\n\t\t\t\t:surface_form \"richard gere\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Richard_Gere\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"film\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Film\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"as well as\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Clerkenwell\")))\n\n"
  },
  "train_35": {
    "id": "35_35",
    "text": "In which country does the Ganges start?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Ganges dbo:sourceCountry ?uri .\n}",
    "relations": [
      "dbo:sourceCountry"
    ],
    "resources": [
      "http://dbpedia.org/resource/Ganges"
    ],
    "classes": [],
    "extended_amr": "(s / start-06\n      :ARG0 (r / river :name (n / name :op1 \"Ganges\"))\n      :location (c / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"ganges\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ganges\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")))\n\n"
  },
  "train_36": {
    "id": "36_36",
    "text": "In which year was Rachel Stevens born?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Rachel_Stevens> <http://dbpedia.org/ontology/birthYear> ?uri . } ",
    "relations": [
      "dbo:birthYear"
    ],
    "resources": [
      "http://dbpedia.org/resource/Rachel_Stevens"
    ],
    "classes": [],
    "extended_amr": "(b / bear-02\n\t:ARG1 (p / person\n\t\t:name (n / name\n\t\t\t:op1 \"Rachel\"\n\t\t\t:op2 \"Stevens\" ) )\n\t:time (a/amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Rachel Stevens\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Rachel_Stevens\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"year\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Light-year\")))\n"
  },
  "train_37": {
    "id": "37_37",
    "text": "Is Barack Obama a democrat?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK\nWHERE { \n        res:Barack_Obama dbo:party <http://dbpedia.org/resource/Democratic_Party_(United_States)> . \n}",
    "relations": [
      "dbo:party"
    ],
    "resources": [
      "http://dbpedia.org/resource/Barack_Obama",
      "http://dbpedia.org/resource/Democratic_Party_(United_States)"
    ],
    "classes": [],
    "extended_amr": "(d / democrat :mode interrogative\n      :domain (p / person :name (n / name :op1 \"Barack\" :op2 \"Obama\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Barack Obama\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Barack_Obama\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"democrat\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Democratic_Party_(United_States)\")))\n\n"
  },
  "train_38": {
    "id": "38_38",
    "text": "Where was Bach born?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Johann_Sebastian_Bach dbo:birthPlace ?uri .\n}",
    "relations": [
      "dbo:birthPlace"
    ],
    "resources": [
      "http://dbpedia.org/resource/Johann_Sebastian_Bach"
    ],
    "classes": [],
    "extended_amr": "(b / bear-02\n      :ARG1 (p / person :name (n / name :op1 \"Bach\"))\n      :location (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Bach\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Johann_Sebastian_Bach\")))\n\n"
  },
  "train_39": {
    "id": "39_39",
    "text": "How often did Jane Fonda marry?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  <http://dbpedia.org/resource/Jane_Fonda> <http://dbpedia.org/ontology/spouse> ?uri . } ",
    "relations": [
      "dbo:spouse"
    ],
    "resources": [
      "http://dbpedia.org/resource/Jane_Fonda"
    ],
    "classes": [],
    "extended_amr": "(m / marry-01\n\t:ARG1 (p / person\n\t\t:name (n / name\n\t\t\t:op1 \"Jane\"\n\t\t\t:op2 \"Fonda\" ) )\n\t:frequency (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Jane Fonda\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Jane_Fonda\")))\n"
  },
  "train_40": {
    "id": "40_40",
    "text": "Who was the first to climb Mount Everest?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n          res:Mount_Everest dbo:firstAscentPerson ?uri . \n}",
    "relations": [
      "dbo:firstAscentPerson"
    ],
    "resources": [
      "http://dbpedia.org/resource/Mount_Everest"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (c / climb-01\n            :ARG1 (m2 / mountain :name (n / name :op1 \"Mount\" :op2 \"Everest\")))\n      :ord (o / ordinal-entity :value 1)\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"mount everest\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mount_Everest\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"first\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/First_French_Empire\")))\n\n"
  },
  "train_41": {
    "id": "41_41",
    "text": "How many people live in Poland?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Poland> <http://dbpedia.org/ontology/populationTotal> ?uri . }  ",
    "relations": [
      "dbo:populationTotal"
    ],
    "resources": [
      "http://dbpedia.org/resource/Poland"
    ],
    "classes": [],
    "extended_amr": "(l / live-01\n\t:ARG0 (p / person\n\t\t:quant (a / amr-unknown) )\n\t:location (c / country\n\t\t:name (n / name\n\t\t\t:op1 \"Poland\" ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Poland\"\n\t\t\t\t:type Location\n\t\t\t\t:uri \"http://dbpedia.org/resource/Poland\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"people\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/English_people\")))\n"
  },
  "train_42": {
    "id": "42_42",
    "text": "What is the location of the Houses of Parliament?",
    "sparql": "SELECT ?uri WHERE {  <http://dbpedia.org/resource/Palace_of_Westminster> <http://dbpedia.org/ontology/location> ?uri . } ",
    "relations": [
      "dbo:location"
    ],
    "resources": [
      "http://dbpedia.org/resource/Palace_of_Westminster"
    ],
    "classes": [],
    "extended_amr": "(b / be-located-at-91\n\t:domain (a / amr-unknown)\n\t:ARG1 (g / government-organization\n\t\t:name (n / name\n\t\t\t:op1 \"Houses\"\n\t\t\t:op2 \"Of\"\n\t\t\t:op3 \"Parliament\" ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Parliament\"\n\t\t\t\t:type Organization\n\t\t\t\t:uri \"http://dbpedia.org/resource/Parliament_of_the_United_Kingdom\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"location\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Navigation\")))\n"
  },
  "train_43": {
    "id": "43_43",
    "text": "Is Christian Bale starring in Batman Begins?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n\tres:Batman_Begins dbo:starring res:Christian_Bale .\n}",
    "relations": [
      "dbo:starring"
    ],
    "resources": [
      "http://dbpedia.org/resource/Batman_Begins",
      "http://dbpedia.org/resource/Christian_Bale"
    ],
    "classes": [],
    "extended_amr": "(s / star\n\t:mode interrogative\n\t:ARG1 (p / person\n\t\t:name (n / name\n\t\t\t:op1 \"Christian\"\n\t\t\t:op2 \"Bale\" ) )\n\t:location (f / facility\n\t\t:name (n2 / name\n\t\t\t:op1 \"Batman\"\n\t\t\t:op2 \"Begins\" ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Christian Bale\"\n\t\t\t\t:type Movie\n\t\t\t\t:uri \"http://dbpedia.org/resource/Batman_Begins\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Batman Begins\"\n\t\t\t\t:type Movie\n\t\t\t\t:uri \"http://dbpedia.org/resource/Batman_Begins\")))\n"
  },
  "train_44": {
    "id": "44_44",
    "text": "In which country is the Limerick Lake?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE { \n\tres:Limerick_Lake dbo:country ?uri .\n}",
    "relations": [
      "dbo:country"
    ],
    "resources": [
      "http://dbpedia.org/resource/Limerick_Lake"
    ],
    "classes": [],
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (l / lake :name (n / name :op1 \"Limerick\" :op2 \"Lake\"))\n      :ARG2 (c / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Limerick Lake\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Limerick_Lake\")))\n\n"
  },
  "train_45": {
    "id": "45_45",
    "text": "What was the last movie with Alec Guinness?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Alec_Guinness> .  ?uri <http://dbpedia.org/ontology/releaseDate> ?date . } ORDER BY DESC(?date) LIMIT 1 ",
    "relations": [
      "dbo:starring",
      "dbo:releaseDate"
    ],
    "resources": [
      "http://dbpedia.org/resource/Alec_Guinness"
    ],
    "classes": [
      "dbo:Film"
    ],
    "extended_amr": "(m / movie\n      :mod (l / last)\n      :ARG0-of (h / have-03\n            :ARG1 (p / person :name (n / name :op1 \"Alec\" :op2 \"Guinness\")))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"alec guinness\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Alec_Guinness\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"movie\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Movie\")))\n\n"
  },
  "train_46": {
    "id": "46_46",
    "text": "What is the highest mountain in Australia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n\t?uri rdf:type dbo:Mountain .\n        ?uri dbo:locatedInArea res:Australia .\n        ?uri dbo:elevation ?elevation .\n} \nORDER BY DESC(?elevation) LIMIT 1",
    "relations": [
      "dbo:locatedInArea",
      "dbo:elevation"
    ],
    "resources": [
      "http://dbpedia.org/resource/Australia"
    ],
    "classes": [
      "dbo:Mountain"
    ],
    "extended_amr": "(m / mountain\n      :ARG1-of (h / have-degree-91\n            :ARG2 (h2 / high-02\n                  :ARG1 m)\n            :ARG3 (m2 / most)\n            :ARG5 (m3 / mountain\n                  :location (c / country :name (n / name :op1 \"Australia\"))))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"australia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Australia\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"mountain\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Mountain\")))\n\n"
  },
  "train_47": {
    "id": "47_47",
    "text": "Is Frank Herbert still alive?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n\tOPTIONAL { res:Frank_Herbert dbo:deathDate ?date . }\n        FILTER (!BOUND(?date))\n}",
    "relations": [
      "dbo:deathDate"
    ],
    "resources": [
      "http://dbpedia.org/resource/Frank_Herbert"
    ],
    "classes": [],
    "extended_amr": "(l / live-01\n\t:mode interrogative\n\t:mod (s / still)\n\t:ARG1 (p / person\n\t\t:name (n / name\n\t\t\t:op1 \"Frank\"\n\t\t\t:op2 \"Herbert\" ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Frank Herbert\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Frank_Herbert\")))\n"
  },
  "train_48": {
    "id": "48_48",
    "text": "Who created Family Guy?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Family_Guy> <http://dbpedia.org/ontology/creator> ?uri . }  ",
    "relations": [
      "dbo:creator"
    ],
    "resources": [
      "http://dbpedia.org/resource/Family_Guy"
    ],
    "classes": [],
    "extended_amr": "(c / create-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (s / show :name (n / name :op1 \"Family\" :op2 \"Guy\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"family guy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Family_Guy\")))\n\n"
  },
  "train_49": {
    "id": "49_49",
    "text": "What is the official language of Suriname?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE { \n        res:Suriname dbo:officialLanguage ?uri .\n}",
    "relations": [
      "dbo:officialLanguage"
    ],
    "resources": [
      "http://dbpedia.org/resource/Suriname"
    ],
    "classes": [],
    "extended_amr": "(l / language\n      :mod (o / official)\n      :mod (c / country :name (n / name :op1 \"Suriname\"))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Suriname\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Suriname\")))\n\n"
  },
  "train_50": {
    "id": "50_50",
    "text": "Who wrote the song Hotel California?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hotel_California> <http://dbpedia.org/ontology/writer> ?uri . }",
    "relations": [
      "dbo:writer"
    ],
    "resources": [
      "http://dbpedia.org/resource/Hotel_California"
    ],
    "classes": [],
    "extended_amr": "(w / write-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (s / song :name (n / name :op1 \"Hotel\" :op2 \"California\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"hotel california\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Hotel_California\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"song\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Song\")))\n\n"
  },
  "train_51": {
    "id": "51_51",
    "text": "Give me all actors starring in movies directed by William Shatner.",
    "sparql": "SELECT DISTINCT ?uri WHERE {  ?x <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/William_Shatner> .  ?x <http://dbpedia.org/ontology/starring> ?uri . } ",
    "relations": [
      "dbo:director",
      "dbo:starring"
    ],
    "resources": [
      "http://dbpedia.org/resource/William_Shatner"
    ],
    "classes": [],
    "extended_amr": "(g / give-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (p / person\n            :ARG0-of (a / act-01)\n            :ARG0-of (s / star-01\n                  :ARG2 (m / movie\n                        :ARG1-of (d / direct-01\n                              :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\")))))\n            :mod (a2 / all))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"William Shatner\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/William_Shatner\")))\n\n"
  },
  "train_52": {
    "id": "52_52",
    "text": "What is in a chocolate chip cookie?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chocolate_chip_cookie> <http://dbpedia.org/ontology/ingredient> ?uri . }",
    "relations": [
      "dbo:ingredient"
    ],
    "resources": [
      "http://dbpedia.org/resource/Chocolate_chip_cookie"
    ],
    "classes": [],
    "extended_amr": "(c / cookie\n      :mod (c2 / chip\n            :consist-of (c3 / chocolate))\n      :consist-of (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"chocolate chip cookie\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Chocolate_chip_cookie\")))\n\n"
  },
  "train_53": {
    "id": "53_53",
    "text": "Give me all professional skateboarders from Sweden.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\t?uri dbo:occupation res:Skateboarding . \n        { ?uri dbo:birthPlace res:Sweden . }\n        UNION\n        { ?uri dbo:birthPlace ?place . \n          ?place dbo:country res:Sweden . }\n}",
    "relations": [
      "dbo:occupation",
      "dbo:birthPlace",
      "dbo:country"
    ],
    "resources": [
      "http://dbpedia.org/resource/Skateboarding",
      "http://dbpedia.org/resource/Sweden"
    ],
    "classes": [],
    "extended_amr": "(g/give-01\n\t:ARG0 (y/you)\n\t:ARG1 (s/skateboarder\n\t\t:location (c/country\n\t\t\t:name (n/name\n\t\t\t\t:op1 \"Sweden\"))\n\t\t:mod (p/professional))\n\t:mode imperativ\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"sweden\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sweden\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"skateboarder\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Skateboard\")))\n\n"
  },
  "train_54": {
    "id": "54_54",
    "text": "Which ingredients do I need for carrot cake?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Carrot_cake> <http://dbpedia.org/ontology/ingredient> ?uri . } ",
    "relations": [
      "dbo:ingredient"
    ],
    "resources": [
      "http://dbpedia.org/resource/Carrot_cake"
    ],
    "classes": [],
    "extended_amr": "(n / need-01\n\t:ARG0 (i / i)\n\t:ARG1 (i2 / ingredient)\n\t:ARG2 (c / cake\n\t\t:mod (c2 / carrot) )\n\t:manner (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Carrot\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Carrot\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"ingredients\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Genetically_modified_organism\")))\n"
  },
  "train_55": {
    "id": "55_55",
    "text": "Does Neymar play for Real Madrid?",
    "sparql": "ASK WHERE { <http://dbpedia.org/resource/Neymar> <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Real_Madrid_C.F.> . }",
    "relations": [
      "dbo:team"
    ],
    "resources": [
      "http://dbpedia.org/resource/Neymar",
      "http://dbpedia.org/resource/Real_Madrid_C.F."
    ],
    "classes": [],
    "extended_amr": "(p / play-01 :mode interrogative\n      :ARG0 (p2 / person :name (n / name :op1 \"Neymar\"))\n      :beneficiary (t / team :name (n2 / name :op1 \"Real\" :op2 \"Madrid\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Neymar\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Neymar\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Real Madrid\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Real_Madrid_C.F.\")))\n\n"
  },
  "train_56": {
    "id": "56_56",
    "text": "Which computer scientist won an oscar?",
    "sparql": "SELECT DISTINCT ?uri WHERE { { ?uri <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Computer_science> . } UNION { ?uri <http://purl.org/dc/elements/1.1/description> ?s . FILTER regex(?s,'computer scientist','i') } ?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Academy_Awards> . } ",
    "relations": [
      "dbo:field",
      "dbo:award"
    ],
    "resources": [
      "http://dbpedia.org/resource/Computer_science",
      "http://dbpedia.org/resource/Academy_Awards"
    ],
    "classes": [],
    "extended_amr": "(w/win-01\n\t:ARG0 (s/scientist\n\t\t:mod (c/computer)\n\t\t:mod (a/amr-unknown))\n\t:ARG1 (g/game\n\t\t:name (n/name\n\t\t\t:op1 \"Oscar\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"oscar\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Oscar_De_La_Hoya\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"computer scientist\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Computer_scientist\")))\n\n"
  },
  "train_57": {
    "id": "57_57",
    "text": "How many companies were founded in the same year as Google?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company> .  ?uri <http://dbpedia.org/ontology/foundingYear> ?year .  <http://dbpedia.org/resource/Google> <http://dbpedia.org/ontology/foundingYear> ?year . } ",
    "relations": [
      "dbo:foundingYear"
    ],
    "resources": [
      "http://dbpedia.org/resource/Google"
    ],
    "classes": [
      "dbo:Company"
    ],
    "extended_amr": "(f/found-01\n\t:ARG1 (c/company\n\t\t:quant (a/amr-unknown))\n\t:time (y/year\n\t\t:ARG1-of (s/same-01\n\t\t\t:ARG2 (c2/company\n\t\t\t\t:name (n/name\n\t\t\t\t\t:op1 \"Google\"))))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"google\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Google\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"company\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Company\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"year\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Year\")))\n\n"
  },
  "train_58": {
    "id": "58_58",
    "text": "In which UK city are the headquarters of the MI6?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE { \n        res:Secret_Intelligence_Service dbo:headquarter ?uri . \n        ?uri dbo:country res:United_Kingdom . \n}",
    "relations": [
      "dbo:headquarter",
      "dbo:country"
    ],
    "resources": [
      "http://dbpedia.org/resource/Secret_Intelligence_Service",
      "http://dbpedia.org/resource/United_Kingdom"
    ],
    "classes": [],
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (h / headquarters-yy\n            :poss (g / government-organization :name (n / name :op1 \"Military\" :op2 \"Intelligence\" :op3 \"section\" :op4 \"6\")))\n      :ARG2 (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"military intelligence section 6\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Directorate_of_Military_Intelligence\")\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"UK\"\n\t\t\t\t:type Location\n\t\t\t\t:uri \"http://dbpedia.org/resource/Channel_5_(UK)\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"city\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/City\")\n\t\t:entity (d1/ linked_entity\n\t\t\t\t:surface_form \"MI6\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_Rennie_(MI6_officer)\")))\n\n"
  },
  "train_59": {
    "id": "59_59",
    "text": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n        res:Cuban_Missile_Crisis dbo:date ?x .\n\tres:Bay_of_Pigs_Invasion dbo:date ?y .\n\tFILTER (?x < ?y)\n}",
    "relations": [
      "dbo:date"
    ],
    "resources": [
      "http://dbpedia.org/resource/Cuban_Missile_Crisis",
      "http://dbpedia.org/resource/Bay_of_Pigs_Invasion"
    ],
    "classes": [],
    "extended_amr": "(e / early\n\t:ARG1 (e2 / event\n\t\t:name (n / name\n\t\t\t:op1 \"Cuban\"\n\t\t\t:op2 \"Missile\"\n\t\t\t:op3 \"Crisis\" ) )\n\t:compared-to (i / invade-01\n\t\t:ARG1 (f / facility\n\t\t\t:name (n2 / name\n\t\t\t\t:op1 \"Bay\"\n\t\t\t\t:op2 \"Of\"\n\t\t\t\t:op3 \"Pigs\" ) ) )\n\t:entities ( el / entity_list\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Cuban Missile Crisis\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cuban_Missile_Crisis\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"Bay of Pigs Invasion\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Bay_of_Pigs_Invasion\")))\n"
  },
  "train_60": {
    "id": "60_60",
    "text": "What does IYCM stand for?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri dbo:abbreviation 'IYCM' .\n}",
    "relations": [
      "dbo:abbreviation"
    ],
    "resources": [],
    "classes": [],
    "extended_amr": "(s / stand-08\n      :ARG0 (s2 / string-entity :value \"IYCM\")\n      :ARG1 (a / amr-unknown)\n\t:entities ( el / entity_list))\n\n"
  },
  "train_61": {
    "id": "61_61",
    "text": "When did the Ming dynasty dissolve?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?date\nWHERE {  \n        res:Ming_dynasty dbo:dissolutionDate ?date .\n}",
    "relations": [
      "dbo:dissolutionDate"
    ],
    "resources": [
      "http://dbpedia.org/resource/Ming_dynasty"
    ],
    "classes": [],
    "extended_amr": "(d / dissolve-01\n      :ARG1 (d2 / dynasty :name (n / name :op1 \"Ming\"))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"ming\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Chen_Jiongming\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"dynasty\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Dynasty\")))\n\n"
  },
  "train_62": {
    "id": "62_62",
    "text": "List all episodes of the first season of the HBO television series The Sopranos!",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\t?uri dbo:series res:The_Sopranos  .\n        ?uri dbo:seasonNumber 1 .\n}",
    "relations": [
      "dbo:series",
      "dbo:seasonNumber"
    ],
    "resources": [
      "http://dbpedia.org/resource/The_Sopranos"
    ],
    "classes": [],
    "extended_amr": "(e / episode\n\t:mod (a / all)\n\t:ARG0-of (l / list-01)\n\t:poss (s / season\n\t\t:ord (o / ordinal-entity\n\t\t\t:value (f / first) )\n\t\t:part-of (a2 / agency\n\t\t\t:name (n / name\n\t\t\t\t:op1 \"Sopranos\" )\n\t\t\t:mod (t / television)\n\t\t\t:mod (u / university\n\t\t\t\t:name (n2 / name\n\t\t\t\t\t:op1 \"HBO\" ) ) ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"HBO\"\n\t\t\t\t:type TelevisionShow\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Sopranos\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"The Sopranos\"\n\t\t\t\t:type TelevisionShow\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Sopranos\")\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Episode\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Episode\")\n\t\t:entity (c1/ linked_entity\n\t\t\t\t:surface_form \"Television\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Television\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"first season\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/2005\u201306_NBA_season\")))\n"
  },
  "train_63": {
    "id": "63_63",
    "text": "What is the total population of Melbourne, Florida?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT ?uri \nWHERE { \n        <http://dbpedia.org/resource/Melbourne,_Florida> dbo:populationTotal ?uri .\n}",
    "relations": [
      "dbo:populationTotal"
    ],
    "resources": [
      "http://dbpedia.org/resource/Melbourne,_Florida"
    ],
    "classes": [],
    "extended_amr": "(h / have-quant-91\n      :ARG1 (p / population\n            :mod (c / city :name (n / name :op1 \"Melbourne\")\n                  :location (s / state :name (n2 / name :op1 \"Florida\")))\n            :mod (t / total))\n      :ARG2 (a / amr-unknown)\n      :entities ( el / entity_list\n            :entity (e0/ linked_entity\n                        :surface_form \"Melbourne\"\n                        :uri \"http://dbpedia.org/resource/Melbourne\")))"
  },
  "train_64": {
    "id": "64_64",
    "text": "Did Arnold Schwarzenegger attend a university?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nASK\nWHERE {\n        res:Arnold_Schwarzenegger dbo:almaMater ?x .\n        ?x rdf:type dbo:University .\n}",
    "relations": [
      "dbo:almaMater"
    ],
    "resources": [
      "http://dbpedia.org/resource/Arnold_Schwarzenegger"
    ],
    "classes": [
      "dbo:University"
    ],
    "extended_amr": "(a / attend-01 :mode interrogative\n      :ARG0 (p / person :name (n / name :op1 \"Arnold\" :op2 \"Schwarzenegger\"))\n      :ARG1 (u / university)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Arnold Schwarzenegger\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Arnold_Schwarzenegger\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"university\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/University\")))\n\n"
  },
  "train_65": {
    "id": "65_65",
    "text": "What country is Mount Everest in?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        res:Mount_Everest dbo:locatedInArea ?uri . \n        ?uri rdf:type dbo:Country .\n}",
    "relations": [
      "dbo:locatedInArea"
    ],
    "resources": [
      "http://dbpedia.org/resource/Mount_Everest"
    ],
    "classes": [
      "dbo:Country"
    ],
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (m / mountain :name (n / name :op1 \"Mount\" :op2 \"Everest\"))\n      :ARG2 (c / country\n            :mod (a / amr-unknown))\n      :entities ( el / entity_list\n            :entity (e0/ linked_entity\n                        :surface_form \"Mount Everest\"\n                        :uri \"http://dbpedia.org/resource/Mount_Everest\"))\n            :entity (e1/ linked_entity\n                        :surface_form \"country\"\n                        :uri \"http://dbpedia.org/ontology/Country\")))"
  },
  "train_66": {
    "id": "66_66",
    "text": "What is the largest city in Australia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:Australia dbo:largestCity ?uri .\n}",
    "relations": [
      "dbo:largestCity"
    ],
    "resources": [
      "http://dbpedia.org/resource/Australia"
    ],
    "classes": [],
    "extended_amr": "(c / city\n      :ARG1-of (h / have-degree-91\n            :ARG2 (l / large)\n            :ARG3 (m / most)\n            :ARG5 (c2 / city\n                  :location (c3 / country :name (n / name :op1 \"Australia\"))))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Australia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Australia\")))\n\n"
  },
  "train_67": {
    "id": "67_67",
    "text": "Give me all launch pads operated by NASA.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri rdf:type dbo:LaunchPad .  \n        ?uri dbo:operator res:NASA . \n}",
    "relations": [
      "dbo:operator"
    ],
    "resources": [
      "http://dbpedia.org/resource/NASA"
    ],
    "classes": [
      "dbo:LaunchPad"
    ],
    "extended_amr": "(g / give-01\n\t:mode imperative\n\t:ARG2 (i / i)\n\t:ARG1 (p / pad\n\t\t:mod (l / launch-01)\n\t\t:mod (a / all)\n\t\t:ARG1-of (o / operate-01\n\t\t\t:ARG0 (g2 / government-organization\n\t\t\t\t:name (n / name\n\t\t\t\t\t:op1 \"NASA\" ) ) ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"NASA\"\n\t\t\t\t:type Organization\n\t\t\t\t:uri \"http://dbpedia.org/resource/NASA\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"launch pads\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Launch_pad\")))\n"
  },
  "train_68": {
    "id": "68_68",
    "text": "Who is the mayor of Tel Aviv?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE { \n        res:Tel_Aviv dbo:leaderName ?uri .\n}",
    "relations": [
      "dbo:leaderName"
    ],
    "resources": [
      "http://dbpedia.org/resource/Tel_Aviv"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c / city :name (n / name :op1 \"Tel\" :op2 \"Aviv\"))\n            :ARG2 (m / mayor))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"tel aviv\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Tel_Aviv\")))\n\n"
  },
  "train_69": {
    "id": "69_69",
    "text": "List all episodes of the first season of the HBO television series The Sopranos.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri dbo:series res:The_Sopranos  .\n        ?uri dbo:seasonNumber 1 .\n}",
    "relations": [
      "dbo:series",
      "dbo:seasonNumber"
    ],
    "resources": [
      "http://dbpedia.org/resource/The_Sopranos"
    ],
    "classes": [],
    "extended_amr": "(l / list-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (e / episode\n            :mod (a / all)\n            :part-of (s / series :name (n / name :op1 \"The\" :op2 \"Sopranos\")\n                  :medium (t / television)\n                  :mod (c / company :name (n2 / name :op1 \"Home\" :op2 \"Box\" :op3 \"Office\"))\n                  :time (s2 / season\n                        :ord (o / ordinal-entity :value 1))))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"HBO television series The Sopranos\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Sopranos\")))\n\n"
  },
  "train_70": {
    "id": "70_70",
    "text": "Who created Batman?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Batman> <http://dbpedia.org/ontology/creator> ?uri . } ",
    "relations": [
      "dbo:creator"
    ],
    "resources": [
      "http://dbpedia.org/resource/Batman"
    ],
    "classes": [],
    "extended_amr": "(c / create-01\n\t:ARG1 (c2 / company\n\t\t:name (n / name\n\t\t\t:op1 \"Batman\" ) )\n\t:ARG0 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"Batman\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Batman\")))\n"
  },
  "train_71": {
    "id": "71_71",
    "text": "Who played Gus Fring in Breaking Bad?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gus_Fring> <http://dbpedia.org/ontology/portrayer> ?uri . }",
    "relations": [
      "dbo:portrayer"
    ],
    "resources": [
      "http://dbpedia.org/resource/Gus_Fring"
    ],
    "classes": [],
    "extended_amr": "(p / play-01\n\t:ARG1 (p2 / person\n\t\t:name (n / name\n\t\t\t:op1 \"Gus\"\n\t\t\t:op2 \"Fring\" ) )\n\t:location (b / broadcast-program\n\t\t:name (n2 / name\n\t\t\t:op1 \"Breaking\"\n\t\t\t:op2 \"Bad\" ) )\n\t:ARG0 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Gus Fring\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Gus_Fring\")))\n"
  },
  "train_72": {
    "id": "72_72",
    "text": "In which programming language is GIMP written?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE { \n\tres:GIMP dbo:programmingLanguage ?uri .\n}",
    "relations": [
      "dbo:programmingLanguage"
    ],
    "resources": [
      "http://dbpedia.org/resource/GIMP"
    ],
    "classes": [],
    "extended_amr": "(w / write-01\n\t:ARG1 (s / sw-product\n\t\t:name (n / name\n\t\t\t:op1 \"GIMP\" ) )\n\t:ARG2 (l / language\n\t\t:ARG1-of (p / program-01) )\n\t:manner (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Programming language\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Programming_language\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"GIMP\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/GIMP\")))\n"
  },
  "train_73": {
    "id": "73_73",
    "text": "In which ancient empire could you pay with cocoa beans?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Cocoa_bean> . }",
    "relations": [
      "dbo:currency"
    ],
    "resources": [
      "http://dbpedia.org/resource/Cocoa_bean"
    ],
    "classes": [],
    "extended_amr": "(p2 / possible-01\n      :ARG1 (p / pay-01\n            :ARG0 (y / you)\n            :instrument (b / bean\n                  :mod (c / cocoa))\n            :location (e / empire\n                  :mod (a / amr-unknown)\n                  :mod (a2 / ancient)))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"cocoa beans\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cocoa_bean\")))\n\n"
  },
  "train_74": {
    "id": "74_74",
    "text": "Who is the editor of Forbes?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Forbes dbo:editor ?uri .\n}",
    "relations": [
      "dbo:editor"
    ],
    "resources": [
      "http://dbpedia.org/resource/Forbes"
    ],
    "classes": [],
    "extended_amr": "(h / have-org-role-91\n\t:ARG2 (e / editor)\n\t:ARG1 (b / broadcast-program\n\t\t:name (n / name\n\t\t\t:op1 \"Forbes\" ) )\n\t:domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Forbes\"\n\t\t\t\t:type PrintMedia\n\t\t\t\t:uri \"http://dbpedia.org/resource/Forbes\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"editor\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Editor-in-chief\")))\n"
  },
  "train_75": {
    "id": "75_75",
    "text": "How many people live in the capital of Australia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?num \nWHERE {\n        res:Australia dbo:capital ?x .\n        ?x dbo:populationTotal ?num .\n}",
    "relations": [
      "dbo:capital",
      "dbo:populationTotal"
    ],
    "resources": [
      "http://dbpedia.org/resource/Australia"
    ],
    "classes": [],
    "extended_amr": "(l / live-01\n      :ARG0 (p / person\n            :quant (a / amr-unknown))\n      :location (c / city\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c2 / country :name (n / name :op1 \"Australia\"))\n                  :ARG2 (c3 / capital)))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Australia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Australia\")))\n\n"
  },
  "train_76": {
    "id": "76_76",
    "text": "Which professional surfers were born in Australia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbo:occupation res:Surfing .  \n        ?uri dbo:birthPlace res:Australia . \n}",
    "relations": [
      "dbo:occupation",
      "dbo:birthPlace"
    ],
    "resources": [
      "http://dbpedia.org/resource/Surfing",
      "http://dbpedia.org/resource/Australia"
    ],
    "classes": [],
    "extended_amr": "(b/bear-02\n\t:ARG1 (s/surfer\n\t\t:mod (p/professional)\n\t\t:mod (a/amr-unknown))\n\t:location (c/country\n\t\t:name (n/name\n\t\t\t:op1 \"Australia\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"australia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Australia\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"surfer\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Surfer\")))\n\n"
  },
  "train_77": {
    "id": "77_77",
    "text": "Which electronics companies were founded in Beijing?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Electronics> . ?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Beijing> . }",
    "relations": [
      "dbo:industry",
      "dbo:foundationPlace"
    ],
    "resources": [
      "http://dbpedia.org/resource/Electronics",
      "http://dbpedia.org/resource/Beijing"
    ],
    "classes": [
      "dbo:Company"
    ],
    "extended_amr": "(f / found-01\n      :ARG1 (c / company\n            :mod (e / electronic)\n            :mod (a / amr-unknown))\n      :location (c2 / city :name (n / name :op1 \"Beijing\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"electronics\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Electronics\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Beijing\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Beijing\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"companies\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Company\")))\n\n"
  },
  "train_78": {
    "id": "78_78",
    "text": "Give me all video games published by Mean Hamster Software.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n      ?uri rdf:type dbo:VideoGame .\n      ?uri dbo:publisher res:Mean_Hamster_Software . \n}",
    "relations": [
      "dbo:publisher"
    ],
    "resources": [
      "http://dbpedia.org/resource/Mean_Hamster_Software"
    ],
    "classes": [
      "dbo:VideoGame"
    ],
    "extended_amr": "(g / give-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (g2 / game\n            :mod (v / video)\n            :ARG1-of (p / publish-01\n                  :ARG0 (c / company :name (n / name :op1 \"Mean\" :op2 \"Hamster\" :op3 \"Software\")))\n            :mod (a / all))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Mean Hamster Software\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mean_Hamster_Software\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"video games\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/VideoGame\")))\n\n"
  },
  "train_79": {
    "id": "79_79",
    "text": "How many Aldi stores are there?",
    "sparql": "SELECT DISTINCT ?number WHERE {  <http://dbpedia.org/resource/Aldi> <http://dbpedia.org/ontology/numberOfLocations> ?number . } ",
    "relations": [
      "dbo:numberOfLocations"
    ],
    "resources": [
      "http://dbpedia.org/resource/Aldi"
    ],
    "classes": [],
    "extended_amr": "(b / be-located-at-91\n\t:ARG1 (s / store\n\t\t:mod (c / company\n\t\t\t:name (n / name\n\t\t\t\t:op1 \"Aldi\" ) )\n\t\t:quant (a / amr-unknown) )\n\t:entities ( el / entity_list\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Aldi\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Aldi\")))\n"
  },
  "train_80": {
    "id": "80_80",
    "text": "What is the capital of Cameroon?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cameroon> <http://dbpedia.org/ontology/capital> ?uri. } ",
    "relations": [
      "dbo:capital"
    ],
    "resources": [
      "http://dbpedia.org/resource/Cameroon"
    ],
    "classes": [],
    "extended_amr": "(c / city\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c2 / country :name (n / name :op1 \"Cameroon\"))\n            :ARG2 (c3 / capital))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Cameroon\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cameroon\")))\n\n"
  },
  "train_81": {
    "id": "81_81",
    "text": "Is there a video game called Battle Chess?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nASK \nWHERE {\n\t?uri rdf:type dbo:VideoGame .\n        ?uri rdfs:label 'Battle Chess'@en .\n}",
    "relations": [],
    "resources": [],
    "classes": [
      "dbo:VideoGame"
    ],
    "extended_amr": "(g / game :mode interrogative\n      :mod (v / video)\n      :ARG1-of (c / call-01\n            :ARG2 (g2 / game :name (n / name :op1 \"Battle\" :op2 \"Chess\")))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"battle chess\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Battle_Chess\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"video game\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Video_game\")))\n\n"
  },
  "train_82": {
    "id": "82_82",
    "text": "Was the wife of president Lincoln called Mary?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nASK \nWHERE {\n        res:Abraham_Lincoln dbo:spouse ?spouse .\n        ?spouse rdfs:label ?name .\n        FILTER(regex(?name,'Mary')) \n}",
    "relations": [
      "dbo:spouse"
    ],
    "resources": [
      "http://dbpedia.org/resource/Abraham_Lincoln"
    ],
    "classes": [],
    "extended_amr": "(c / call-01\n\t:mode interrogative\n\t:ARG1 (h / have-rel-role-91\n\t\t:op1 \"wife\"\n\t\t:ARG1 (p / person\n\t\t\t:name (n / name\n\t\t\t\t:op1 \"Lincoln\" )\n\t\t\t:ARG0-of (h2 / have-org-role-91\n\t\t\t\t:ARG2 (p2 / president) ) ) )\n\t:ARG2 (p3 / person\n\t\t:name (n2 / name\n\t\t\t:op1 \"Mary\" ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Lincoln\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Lincoln_Near-Earth_Asteroid_Research\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Mary\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mary_(mother_of_Jesus)\")\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"President of the United States\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/President_of_the_United_States\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"wife\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Divorce\")))\n"
  },
  "train_83": {
    "id": "83_83",
    "text": "Give me all movies directed by Francis Ford Coppola.",
    "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> .  ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Francis_Ford_Coppola> . } ",
    "relations": [
      "dbo:director"
    ],
    "resources": [
      "http://dbpedia.org/resource/Francis_Ford_Coppola"
    ],
    "classes": [
      "dbo:Film"
    ],
    "extended_amr": "(g / give-01\n\t:mode imperative\n\t:ARG2 (i / i)\n\t:ARG1 (m / movie\n\t\t:mod (a / all)\n\t\t:ARG1-of (d / direct-01\n\t\t\t:ARG0 (p / person\n\t\t\t\t:name (n / name\n\t\t\t\t\t:op1 \"Francis\"\n\t\t\t\t\t:op2 \"Ford\"\n\t\t\t\t\t:op3 \"Coppola\" ) ) ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Francis Ford Coppola\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Francis_Ford_Coppola\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"movies\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Silent_film\")))\n"
  },
  "train_84": {
    "id": "84_84",
    "text": "Which of Tim Burton's films had the highest budget?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbo:director res:Tim_Burton .\n        ?uri dbo:budget ?b .\n}\nORDER BY ?b\nOFFSET 0 LIMIT 1",
    "relations": [
      "dbo:director",
      "dbo:budget"
    ],
    "resources": [
      "http://dbpedia.org/resource/Tim_Burton"
    ],
    "classes": [],
    "extended_amr": "(h / have-03\n      :ARG0 (f / film\n            :poss (p / person :name (n / name :op1 \"Tim\" :op2 \"Burton\"))\n            :mod (a / amr-unknown))\n      :ARG1 (b / budget\n            :ARG1-of (h2 / have-degree-91\n                  :ARG2 (h3 / high-02\n                        :ARG1 b)\n                  :ARG3 (m / most)\n                  :ARG5 (b2 / budget)))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"tim burton\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Tim_Burton\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"film\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Film\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"budget\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Budget\")))\n\n"
  },
  "train_85": {
    "id": "85_85",
    "text": "Does Breaking Bad have more episodes than Game of Thrones?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Breaking_Bad dbo:numberOfEpisodes ?x . \n        res:Game_of_Thrones dbo:numberOfEpisodes ?y . \n        FILTER (?y > ?x) \n}",
    "relations": [
      "dbo:numberOfEpisodes"
    ],
    "resources": [
      "http://dbpedia.org/resource/Breaking_Bad",
      "http://dbpedia.org/resource/Game_of_Thrones"
    ],
    "classes": [],
    "extended_amr": "(h / have-03 :mode interrogative\n      :ARG0 (s / show :name (n / name :op1 \"Breaking\" :op2 \"Bad\"))\n      :ARG1 (e / episode\n            :ARG1-of (h2 / have-degree-91\n                  :ARG3 (m / more)\n                  :ARG4 (e2 / episode\n                        :ARG1-of (h3 / have-03\n                              :ARG0 (s2 / show :name (n2 / name :op1 \"Game\" :op2 \"of\" :op3 \"Thrones\"))))\n                  :ARG5 (e3 / episode)))\n      :entities ( el / entity_list\n            :entity (e0/ linked_entity\n                        :surface_form \"Breaking Bad\"\n                        :uri \"http://dbpedia.org/resource/Breaking_Bad\"))\n            :entity (e0/ linked_entity\n                        :surface_form \"Game of Thrones\"\n                        :uri \"http://dbpedia.org/resource/Game_of_Thrones\")))"
  },
  "train_86": {
    "id": "86_86",
    "text": "Who was called Rodzilla?",
    "sparql": "PREFIX dbp: <http://dbpedia.org/property/> \nSELECT DISTINCT ?uri \nWHERE { \n         ?uri dbp:nickname \"Rodzilla\"@en .\n}",
    "relations": [
      "dbp:nickname"
    ],
    "resources": [],
    "classes": [],
    "extended_amr": "(c/call-01\n\t:ARG1 (a/amr-unknown)\n\t:ARG2 (p/person\n\t\t:name (n/name\n\t\t\t:op1 \"Rodzilla\")))\n\n"
  },
  "train_87": {
    "id": "87_87",
    "text": "Was Natalie Portman born in the United States?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE { \n\tres:Natalie_Portman dbo:birthPlace ?city .\n      \t?city dbo:country res:United_States .\n}",
    "relations": [
      "dbo:birthPlace",
      "dbo:country"
    ],
    "resources": [
      "http://dbpedia.org/resource/Natalie_Portman",
      "http://dbpedia.org/resource/United_States"
    ],
    "classes": [],
    "extended_amr": "(b / bear-02 :mode interrogative\n      :ARG1 (p / person :name (n / name :op1 \"Natalie\" :op2 \"Portman\"))\n      :location (c / country :name (n2 / name :op1 \"United\" :op2 \"States\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Natalie Portman\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Natalie_Portman\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"United States\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_States\")))\n\n"
  },
  "train_88": {
    "id": "88_88",
    "text": "Give me the grandchildren of Elvis Presley.",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elvis_Presley> <http://dbpedia.org/ontology/child> ?child . ?child <http://dbpedia.org/ontology/child> ?uri . }",
    "relations": [
      "dbo:child"
    ],
    "resources": [
      "http://dbpedia.org/resource/Elvis_Presley"
    ],
    "classes": [],
    "extended_amr": "(g / give-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person :name (n / name :op1 \"Elvis\" :op2 \"Presley\"))\n                  :ARG2 (g2 / grandchild)))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"elvis presley\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Elvis_Presley\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"grandchild\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Snake_King's_Grandchild\")))\n\n"
  },
  "train_89": {
    "id": "89_89",
    "text": "Which movies starring Mickey Rourke were directed by Guy Ritchie?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Mickey_Rourke> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Guy_Ritchie> . } ",
    "relations": [
      "dbo:starring",
      "dbo:director"
    ],
    "resources": [
      "http://dbpedia.org/resource/Mickey_Rourke",
      "http://dbpedia.org/resource/Guy_Ritchie"
    ],
    "classes": [
      "dbo:Film"
    ],
    "extended_amr": "(d / direct-01\n      :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\"))\n      :ARG1 (m / movie\n            :mod (a / amr-unknown)\n            :ARG2-of (s / star-01\n                  :ARG1 (p2 / person :name (n2 / name :op1 \"Mickey\" :op2 \"Rourke\"))))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"guy ritchie\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Guy_Ritchie\")\n\t\t:entity (a1/ linked_entity\n\t\t\t\t:surface_form \"mickey rourke\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mickey_Rourke\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"movie\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Movie\")))\n\n"
  },
  "train_90": {
    "id": "90_90",
    "text": "When did Dracula's creator die?",
    "sparql": "SELECT DISTINCT ?date WHERE {  <http://dbpedia.org/resource/Count_Dracula> <http://dbpedia.org/ontology/creator> ?x .  ?x <http://dbpedia.org/ontology/deathDate> ?date . } ",
    "relations": [
      "dbo:creator",
      "dbo:deathDate"
    ],
    "resources": [
      "http://dbpedia.org/resource/Count_Dracula"
    ],
    "classes": [],
    "extended_amr": "(p/person\n\t:name (n/name\n\t\t:op1 \"Dracula\")\n\t:rel (d/die-01\n\t\t:ARG1 (p2/person\n\t\t\t:ARG0-of (c/creator))\n\t\t:time (a/amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"dracula\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Dracula\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"creator\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Comic_book_creator\")))\n\n"
  },
  "train_91": {
    "id": "91_91",
    "text": "Which country does the creator of Miffy come from?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:Miffy dbo:creator ?x .\n\t?x dbo:nationality ?uri .\n}",
    "relations": [
      "dbo:creator",
      "dbo:nationality"
    ],
    "resources": [
      "http://dbpedia.org/resource/Miffy"
    ],
    "classes": [],
    "extended_amr": "(c / come-01\n      :ARG1 (p / person\n            :ARG0-of (c2 / create-01\n                  :ARG1 (a / animal :name (n / name :op1 \"Miffy\"))))\n      :ARG3 (c3 / country\n            :mod (a2 / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Miffy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Miffy\")))\n\n"
  },
  "train_92": {
    "id": "92_92",
    "text": "What is Batman's real name?",
    "sparql": "SELECT DISTINCT ?s WHERE { <http://dbpedia.org/resource/Batman> <http://dbpedia.org/property/alterEgo> ?s . }",
    "relations": [
      "dbp:alterEgo"
    ],
    "resources": [
      "http://dbpedia.org/resource/Batman"
    ],
    "classes": [],
    "extended_amr": "(n/name-01\n\t:ARG1 (p/person\n\t\t:name (n2/name\n\t\t\t:op1 \"Batman\"))\n\t:ARG1-of (r/real-04)\n\t:ARG2 (a/amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"batman\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Batman\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"name\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Name\")))\n\n"
  },
  "train_93": {
    "id": "93_93",
    "text": "What form of government does Russia have?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russia> <http://dbpedia.org/ontology/governmentType> ?uri . } ",
    "relations": [
      "dbo:governmentType"
    ],
    "resources": [
      "http://dbpedia.org/resource/Russia"
    ],
    "classes": [],
    "extended_amr": "(h / have-03\n      :ARG0 (c / country :name (n / name :op1 \"Russia\"))\n      :ARG1 (g / government-organization\n            :ARG0-of (g2 / govern-01)\n            :mod (f / form\n                  :mod (a / amr-unknown)))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"russia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Russia\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"government\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Government\")))\n\n"
  },
  "train_94": {
    "id": "94_94",
    "text": "How many companies were founded by the founder of Facebook?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/ontology/foundedBy> ?uri .  ?uri <http://dbpedia.org/ontology/foundedBy> ?uri . } ",
    "relations": [
      "dbo:foundedBy"
    ],
    "resources": [
      "http://dbpedia.org/resource/Facebook"
    ],
    "classes": [],
    "extended_amr": "(f/found-01\n\t:ARG0 (p/person\n\t\t:ARG0-of (f2/founder))\n\t:ARG1 (c/company\n\t\t:quant (a/amr-unknown))\n\t:beneficiary (c2/company\n\t\t:name (n/name\n\t\t\t:op1 \"Facebook\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"facebook\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/FaceBook\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"company\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Company\")))\n\n"
  },
  "train_95": {
    "id": "95_95",
    "text": "Give me all Canadian Grunge record labels.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n\t?uri rdf:type dbo:RecordLabel .\n        ?uri dbo:genre res:Grunge .\n        ?uri dbo:country res:Canada .\n}",
    "relations": [
      "dbo:genre",
      "dbo:country"
    ],
    "resources": [
      "http://dbpedia.org/resource/Grunge",
      "http://dbpedia.org/resource/Canada"
    ],
    "classes": [
      "dbo:RecordLabel"
    ],
    "extended_amr": "(g / give-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (l / label\n            :mod (r / record)\n            :mod (m / music :name (n / name :op1 \"Grunge\")\n                  :mod (c / country :name (n2 / name :op1 \"Canada\")))\n            :mod (a / all))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"grunge\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Grunge\")\n\t\t:entity (a1/ linked_entity\n\t\t\t\t:surface_form \"canada\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Canada\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"record\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Australian_Recording_Industry_Association\")))\n\n"
  },
  "train_96": {
    "id": "96_96",
    "text": "How many children did Benjamin Franklin have?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  <http://dbpedia.org/resource/Benjamin_Franklin> <http://dbpedia.org/ontology/child> ?uri . } ",
    "relations": [
      "dbo:child"
    ],
    "resources": [
      "http://dbpedia.org/resource/Benjamin_Franklin"
    ],
    "classes": [],
    "extended_amr": "(h / have-03\n      :ARG0 (p / person :name (n / name :op1 \"Benjamin\" :op2 \"Franklin\"))\n      :ARG1 (p2 / person\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (c / child))\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"benjamin franklin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Benjamin_Franklin\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"child\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Child\")))\n\n"
  },
  "train_97": {
    "id": "97_97",
    "text": "List the children of Margaret Thatcher.",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:Margaret_Thatcher dbo:child ?uri .\n}",
    "relations": [
      "dbo:child"
    ],
    "resources": [
      "http://dbpedia.org/resource/Margaret_Thatcher"
    ],
    "classes": [],
    "extended_amr": "(l / list-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person :name (n / name :op1 \"Margaret\" :op2 \"Thatcher\"))\n                  :ARG2 (c / child)))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Margaret Thatcher\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Margaret_Thatcher\")))\n\n"
  },
  "train_98": {
    "id": "98_98",
    "text": "From which region is the Melon de Bourgogne?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri\nWHERE {\n        res:Melon_de_Bourgogne dbo:wineRegion ?uri .\n}",
    "relations": [
      "dbo:wineRegion"
    ],
    "resources": [
      "http://dbpedia.org/resource/Melon_de_Bourgogne"
    ],
    "classes": [],
    "extended_amr": "(b / be-from-91\n      :ARG1 (m / Melon :name (n / name :op1 \"de\" :op2 \"Bourgogne\"))\n      :ARG2 (r / region\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Melon de Bourgogne\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Melon_de_Bourgogne\")))\n\n"
  },
  "train_99": {
    "id": "99_99",
    "text": "Who is the oldest child of Meryl Streep?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE { \n        res:Meryl_Streep dbo:child ?uri . \n        ?uri dbo:birthDate ?d .\n}\nORDER BY ASC(?d)\nOFFSET 0 LIMIT 1",
    "relations": [
      "dbo:child",
      "dbo:birthDate"
    ],
    "resources": [
      "http://dbpedia.org/resource/Meryl_Streep"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (h / have-rel-role-91\n            :ARG1 (p2 / person :name (n / name :op1 \"Meryl\" :op2 \"Streep\"))\n            :ARG2 (c / child\n                  :ARG1-of (h2 / have-degree-91\n                        :ARG2 (o / old)\n                        :ARG3 (m / most))))\n      :domain (a / amr-unknown)\n      :entities ( el / entity_list\n            :entity (e0/ linked_entity\n                        :surface_form \"Meryl Streep\"\n                        :uri \"http://dbpedia.org/resource/Meryl_Streep\")))"
  },
  "train_100": {
    "id": "100_100",
    "text": "Are tree frogs a type of amphibian?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Hylidae dbo:class res:Amphibian . \n}",
    "relations": [
      "dbo:class"
    ],
    "resources": [
      "http://dbpedia.org/resource/Hylidae",
      "http://dbpedia.org/resource/Amphibian"
    ],
    "classes": [],
    "extended_amr": "(t / type\n\t:mode interrogative\n\t:domain (e / establish\n\t\t:mod (t2 / tree) )\n\t:mod (a / amphibian)\n\t:entities ( el / entity_list\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Frog\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Frog\")\n\t\t:entity (c1/ linked_entity\n\t\t\t\t:surface_form \"Amphibian\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Amphibian\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"tree\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Tree\")\n\t\t:entity (d1/ linked_entity\n\t\t\t\t:surface_form \"type\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Type_species\")))\n"
  },
  "train_101": {
    "id": "101_101",
    "text": "Is Christian Bale starring in Velvet Goldmine?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK\nWHERE {\n        res:Velvet_Goldmine dbo:starring res:Christian_Bale .\n}",
    "relations": [
      "dbo:starring"
    ],
    "resources": [
      "http://dbpedia.org/resource/Velvet_Goldmine",
      "http://dbpedia.org/resource/Christian_Bale"
    ],
    "classes": [],
    "extended_amr": "(s / star-01 :mode interrogative\n      :ARG1 (p / person :name (n / name :op1 \"Christian\" :op2 \"Bale\"))\n      :ARG2 (w / work-of-art :name (n2 / name :op1 \"Velvet\" :op2 \"Goldmine\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Christian Bale\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Christian_Bale\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Velvet Goldmine\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Velvet_Goldmine\")))\n\n"
  },
  "train_102": {
    "id": "102_102",
    "text": "List all games by GMT.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\t\n        ?uri dbo:publisher res:GMT_Games .\n}",
    "relations": [
      "dbo:publisher"
    ],
    "resources": [
      "http://dbpedia.org/resource/GMT_Games"
    ],
    "classes": [],
    "extended_amr": "(l / list-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (g / game\n            :mod (a / all)\n            :mod (p / prep-by\n                  :op1 (c / company :name (n / name :op1 \"GMT\"))))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"GMT\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/GMT_Games\")))\n\n"
  },
  "train_103": {
    "id": "103_103",
    "text": "Does the Isar flow into a lake?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nASK\nWHERE {\n        ?x dbo:inflow res:Isar .\n        ?x rdf:type dbo:Lake . \n}",
    "relations": [
      "dbo:inflow"
    ],
    "resources": [
      "http://dbpedia.org/resource/Isar"
    ],
    "classes": [
      "dbo:Lake"
    ],
    "extended_amr": "(f / flow-01 :mode interrogative\n      :ARG1 (r / river :name (n / name :op1 \"Isar\"))\n      :destination (l / lake)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Isar\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Isar\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"lake\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Lake\")))\n\n"
  },
  "train_104": {
    "id": "104_104",
    "text": "Which airports does Yeti Airlines serve?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Yeti_Airlines> <http://dbpedia.org/ontology/targetAirport> ?uri . }",
    "relations": [
      "dbo:targetAirport"
    ],
    "resources": [
      "http://dbpedia.org/resource/Yeti_Airlines"
    ],
    "classes": [],
    "extended_amr": "(s / serve-01\n\t:ARG0 (c / company\n\t\t:name (n / name\n\t\t\t:op1 \"Yeti\"\n\t\t\t:op2 \"Airlines\" ) )\n\t:ARG1 (a / airport)\n\t:ARG2 (a2 / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Yeti Airlines\"\n\t\t\t\t:type Company\n\t\t\t\t:uri \"http://dbpedia.org/resource/Yeti_Airlines\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"airports\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Airport\")))\n"
  },
  "train_105": {
    "id": "105_105",
    "text": "Which Indian company has the most employees?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/India> . ?uri <http://dbpedia.org/ontology/numberOfEmployees> ?n . } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
    "relations": [
      "dbo:location",
      "dbo:numberOfEmployees"
    ],
    "resources": [
      "http://dbpedia.org/resource/India"
    ],
    "classes": [
      "dbo:Company"
    ],
    "extended_amr": "(h / have-03\n      :ARG0 (c / company\n            :mod (c2 / country :name (n / name :op1 \"India\"))\n            :mod (a / amr-unknown))\n      :ARG1 (p / person\n            :ARG1-of (e / employ-01\n                  :ARG0 c)\n            :ARG1-of (h2 / have-degree-91\n                  :ARG3 (m / most)))\n      :entities ( el / entity_list\n            :entity (e0/ linked_entity\n                        :surface_form \"India\"\n                        :uri \"http://dbpedia.org/resource/India\")\n            :entity (e1/ linked_entity\n                        :surface_form \"company\"\n                        :uri \"http://dbpedia.org/ontology/Company\")))"
  },
  "train_106": {
    "id": "106_106",
    "text": "What color expresses loyalty?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/connotation> <http://dbpedia.org/resource/Loyalty> . }",
    "relations": [
      "dbo:connotation"
    ],
    "resources": [
      "http://dbpedia.org/resource/Loyalty"
    ],
    "classes": [],
    "extended_amr": "(e/express-01\n\t:ARG0 (c/color\n\t\t:mod (a/amr-unknown))\n\t:ARG1 (l/loyal-01)\n\t:entities ( el / entity_list\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"color\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Color\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"loyalty\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Loyalty\")))\n\n"
  },
  "train_107": {
    "id": "107_107",
    "text": "Which city has the most inhabitants?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n         ?uri rdf:type dbo:City . \n         ?uri dbo:populationTotal ?pop . \n}\nORDER BY DESC(?pop)\nOFFSET 0 LIMIT 1",
    "relations": [
      "dbo:populationTotal"
    ],
    "resources": [],
    "classes": [
      "dbo:City"
    ],
    "extended_amr": "(h / have-03\n      :ARG0 (c / city\n            :mod (a / amr-unknown))\n      :ARG1 (p / person\n            :ARG0-of (i2 / inhabit-01\n                  :ARG1 c)\n            :ARG1-of (h2 / have-degree-91\n                  :ARG3 (m / most)))\n      :entities ( el / entity_list\n            :entity (e0/ linked_entity\n                        :surface_form \"city\"\n                        :uri \"http://dbpedia.org/ontology/City\")))"
  },
  "train_108": {
    "id": "108_108",
    "text": "Who created Wikipedia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n\tres:Wikipedia dbo:author ?uri .\n}",
    "relations": [
      "dbo:author"
    ],
    "resources": [
      "http://dbpedia.org/resource/Wikipedia"
    ],
    "classes": [],
    "extended_amr": "(c / create-01\n\t:ARG1 (p / publication\n\t\t:name (n / name\n\t\t\t:op1 \"Wikipedia\" ) )\n\t:ARG0 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Wikipedia\"\n\t\t\t\t:type Company\n\t\t\t\t:uri \"http://dbpedia.org/resource/Wikipedia\")))\n"
  },
  "train_109": {
    "id": "109_109",
    "text": "Is Rita Wilson the wife of Tom Hanks?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nASK \nWHERE { \n        res:Tom_Hanks dbo:spouse res:Rita_Wilson . \n}",
    "relations": [
      "dbo:spouse"
    ],
    "resources": [
      "http://dbpedia.org/resource/Tom_Hanks",
      "http://dbpedia.org/resource/Rita_Wilson"
    ],
    "classes": [],
    "extended_amr": "(p / person :mode interrogative\n      :ARG0-of (h / have-rel-role-91\n            :ARG1 (p2 / person :name (n / name :op1 \"Tom\" :op2 \"Hanks\"))\n            :ARG2 (w / wife))\n      :domain (p3 / person :name (n2 / name :op1 \"Rita\" :op2 \"Wilson\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"tom hanks\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Tom_Hanks\")\n\t\t:entity (a1/ linked_entity\n\t\t\t\t:surface_form \"rita wilson\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Rita_Wilson\")))\n\n"
  },
  "train_110": {
    "id": "110_110",
    "text": "Is the wife of president Obama called Michelle?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nASK \nWHERE {\n        res:Barack_Obama dbo:spouse ?spouse .\n        ?spouse rdfs:label ?name .\n        FILTER(regex(?name,'Michelle')) \n}",
    "relations": [
      "dbo:spouse"
    ],
    "resources": [
      "http://dbpedia.org/resource/Barack_Obama"
    ],
    "classes": [],
    "extended_amr": "(c / call-01\n\t:mode interrogative\n\t:ARG1 (h / have-rel-role-91\n\t\t:ARG3 \"wife\"\n\t\t:ARG1 (p / person\n\t\t\t:name (n / name\n\t\t\t\t:op1 \"Obama\" )\n\t\t\t:ARG0-of (h2 / have-org-role-91\n\t\t\t\t:ARG2 (p2 / president) ) ) )\n\t:ARG2 (p3 / person\n\t\t:name (n2 / name\n\t\t\t:op1 \"Michelle\" ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Obama\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Michel%27le\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Michelle\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Michel%27le\")\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"President of the United States\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/President_of_the_United_States\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"wife\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Divorce\")))\n"
  },
  "train_111": {
    "id": "111_111",
    "text": "How many ethnic groups live in Slovenia?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  <http://dbpedia.org/resource/Slovenia> <http://dbpedia.org/ontology/ethnicGroup> ?uri . } ",
    "relations": [
      "dbo:ethnicGroup"
    ],
    "resources": [
      "http://dbpedia.org/resource/Slovenia"
    ],
    "classes": [],
    "extended_amr": "(l / live-01\n      :ARG0 (g / group\n            :mod (e / ethnic)\n            :quant (a / amr-unknown))\n      :location (c / country :name (n / name :op1 \"Slovenia\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Slovenia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Slovenia\")))\n\n"
  },
  "train_112": {
    "id": "112_112",
    "text": "Who is the president of Eritrea?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eritrea> <http://dbpedia.org/ontology/leader> ?uri . <http://dbpedia.org/resource/Eritrea> <http://dbpedia.org/ontology/leaderTitle> 'President'@en . }  ",
    "relations": [
      "dbo:leader",
      "dbo:leaderTitle"
    ],
    "resources": [
      "http://dbpedia.org/resource/Eritrea"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c / country :name (n / name :op1 \"Eritrea\"))\n            :ARG2 (p2 / president))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"eritrea\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Eritrea\")))\n\n"
  },
  "train_113": {
    "id": "113_113",
    "text": "Which films did Stanley Kubrick direct?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> . }",
    "relations": [
      "dbo:director"
    ],
    "resources": [
      "http://dbpedia.org/resource/Stanley_Kubrick"
    ],
    "classes": [],
    "extended_amr": "(d / direct-01\n      :ARG0 (p / person :name (n / name :op1 \"Stanley\" :op2 \"Kubrick\"))\n      :ARG1 (f / film\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Stanley Kubrick\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Stanley_Kubrick\")))\n\n"
  },
  "train_114": {
    "id": "114_114",
    "text": "When was the Titanic completed?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?date\nWHERE { \n        res:RMS_Titanic dbo:completionDate ?date . \n}",
    "relations": [
      "dbo:completionDate"
    ],
    "resources": [
      "http://dbpedia.org/resource/RMS_Titanic"
    ],
    "classes": [],
    "extended_amr": "(c / complete-01\n      :ARG1 (s / ship :name (n / name :op1 \"Titanic\"))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Titanic\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/RMS_Titanic\")))\n\n"
  },
  "train_115": {
    "id": "115_115",
    "text": "How many pages does War and Peace have?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?n\nWHERE {\n        res:War_and_Peace dbo:numberOfPages ?n .\n}",
    "relations": [
      "dbo:numberOfPages"
    ],
    "resources": [
      "http://dbpedia.org/resource/War_and_Peace"
    ],
    "classes": [],
    "extended_amr": "(h / have-03\n      :ARG0 (b / book :name (n / name :op1 \"War\" :op2 \"and\" :op3 \"Peace\"))\n      :ARG1 (p / page\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"War and Peacen\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/War_and_Peace\")))\n\n"
  },
  "train_116": {
    "id": "116_116",
    "text": "Who is the youngest player in the Premier League?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        ?uri dbo:team ?x . \n        ?x dbo:league res:Premier_League . \n        ?uri dbo:birthDate ?y . \n} \nORDER BY DESC(?y) \nOFFSET 0 LIMIT 1",
    "relations": [
      "dbo:team",
      "dbo:league",
      "dbo:birthDate"
    ],
    "resources": [
      "http://dbpedia.org/resource/Premier_League"
    ],
    "classes": [],
    "extended_amr": "(p/play-01\n\t:ARG1-of (h/have-degree-91\n\t\t:rel (y/youngest))\n\t:domain (a/amr-unknown)\n\t:location (o/organization\n\t\t:name (n/name\n\t\t\t:op1 \"Premier\"\n\t\t\t:op2 \"League\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"premier league\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Premier_League\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"player\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Massively_multiplayer_online_role-playing_game\")))\n\n"
  },
  "train_117": {
    "id": "117_117",
    "text": "What is the highest mountain in Italy?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Mountain .\n        ?uri dbo:locatedInArea res:Italy .\n        ?uri dbo:elevation ?num .\n}\nORDER BY DESC(?num)\nOFFSET 0 LIMIT 1",
    "relations": [
      "dbo:locatedInArea",
      "dbo:elevation"
    ],
    "resources": [
      "http://dbpedia.org/resource/Italy"
    ],
    "classes": [
      "dbo:Mountain"
    ],
    "extended_amr": "(m / mountain\n      :ARG1-of (h / have-degree-91\n            :ARG2 (h2 / high-02\n                  :ARG1 m)\n            :ARG3 (m2 / most)\n            :ARG5 (m3 / mountain\n                  :location (c / country :name (n / name :op1 \"Italy\"))))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Italy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Italy\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"mountain\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Mountain\")))\n\n"
  },
  "train_118": {
    "id": "118_118",
    "text": "How tall is Claudia Schiffer?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?height \nWHERE {       \n        res:Claudia_Schiffer dbo:height ?height .      \n}",
    "relations": [
      "dbo:height"
    ],
    "resources": [
      "http://dbpedia.org/resource/Claudia_Schiffer"
    ],
    "classes": [],
    "extended_amr": "(h / have-quant-91\n      :ARG1 (p / person :name (n / name :op1 \"Claudia\" :op2 \"Schiffer\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Claudia Schiffer\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Claudia_Schiffer\")))\n\n"
  },
  "train_119": {
    "id": "119_119",
    "text": "Who was John F. Kennedy's vice president?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { res:John_F._Kennedy dbo:vicePresident ?uri . \n}",
    "relations": [
      "dbo:vicePresident"
    ],
    "resources": [
      "http://dbpedia.org/resource/John_F._Kennedy"
    ],
    "classes": [],
    "extended_amr": "(p / president\n      :mod (v / vice)\n      :poss (p2 / person :name (n / name :op1 \"John\" :op2 \"F.\" :op3 \"Kennedy\"))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"John F. Kennedy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_F._Kennedy\")))\n\n"
  },
  "train_120": {
    "id": "120_120",
    "text": "Which subsidiary of Lufthansa serves both Dortmund and Berlin Tegel?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri \nWHERE {\n        res:Lufthansa dbo:subsidiary ?uri .\n        ?uri dbo:targetAirport res:Dortmund_Airport .\n        ?uri dbo:targetAirport res:Berlin_Tegel_Airport .\n}",
    "relations": [
      "dbo:subsidiary",
      "dbo:targetAirport"
    ],
    "resources": [
      "http://dbpedia.org/resource/Lufthansa",
      "http://dbpedia.org/resource/Dortmund_Airport",
      "http://dbpedia.org/resource/Berlin_Tegel_Airport"
    ],
    "classes": [],
    "extended_amr": "(s / serve-01\n      :ARG0 (c / company\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c2 / company :name (n / name :op1 \"Lufthansa\"))\n                  :ARG2 (s2 / subsidiary))\n            :mod (a / amr-unknown))\n      :ARG2 (a2 / and\n            :op1 (a3 / airport :name (n2 / name :op1 \"Dortmund\"))\n            :op2 (a4 / airport :name (n3 / name :op1 \"Berlin\" :op2 \"Tegel\")))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"lufthansa\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Lufthansa\")\n\t\t:entity (a1/ linked_entity\n\t\t\t\t:surface_form \"dortmund\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Dortmund\")\n\t\t:entity (a2/ linked_entity\n\t\t\t\t:surface_form \"berlin tegel\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Berlin_Tegel_Airport\")))\n\n"
  },
  "train_121": {
    "id": "121_121",
    "text": "Who was the successor of John F. Kennedy?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:John_F._Kennedy dbo:successor ?uri .\n}",
    "relations": [
      "dbo:successor"
    ],
    "resources": [
      "http://dbpedia.org/resource/John_F._Kennedy"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (s / succeed-02\n            :ARG1 (p2 / person :name (n / name :op1 \"John\" :op2 \"F.\" :op3 \"Kennedy\")))\n      :mod (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"John F. Kennedy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_F._Kennedy\")))\n\n"
  },
  "train_122": {
    "id": "122_122",
    "text": "Who composed the soundtrack for Cameron's Titanic?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Titanic_(1997_film)> <http://dbpedia.org/ontology/musicComposer> ?uri . } ",
    "relations": [
      "dbo:musicComposer"
    ],
    "resources": [
      "http://dbpedia.org/resource/Titanic_(1997_film)"
    ],
    "classes": [],
    "extended_amr": "(c / compose-02\n      :ARG0 (a / amr-unknown)\n      :ARG1 (s / soundtrack\n            :beneficiary (w / work-of-art :name (n / name :op1 \"Titanic\")\n                  :poss (p / person :name (n2 / name :op1 \"Cameron\"))))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Titanic\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Titanic_(1997_film)\")))\n\n"
  },
  "train_123": {
    "id": "123_123",
    "text": "Which movies did Kurosawa direct?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:Film .\n        ?uri dbo:director res:Akira_Kurosawa .\n}",
    "relations": [
      "dbo:director"
    ],
    "resources": [
      "http://dbpedia.org/resource/Akira_Kurosawa"
    ],
    "classes": [
      "dbo:Film"
    ],
    "extended_amr": "(d/direct-01\n\t:ARG0 (p/person\n\t\t:name (n/name\n\t\t\t:op1 \"Kurosawa\"))\n\t:ARG1 (m/movie)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"kurosawa\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Kurosawa\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"movie\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Movie\")))\n\n"
  },
  "train_124": {
    "id": "124_124",
    "text": "For which label did Elvis record his first album?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?x rdf:type dbo:Album .\n        ?x dbo:artist res:Elvis_Presley .\n        ?x dbo:releaseDate ?y .\n        ?x dbo:recordLabel ?uri .\n}\nORDER BY ASC(?y) \nOFFSET 0 LIMIT 1",
    "relations": [
      "dbo:artist",
      "dbo:releaseDate",
      "dbo:recordLabel"
    ],
    "resources": [
      "http://dbpedia.org/resource/Elvis_Presley"
    ],
    "classes": [
      "dbo:Album"
    ],
    "extended_amr": "(r / record-01\n\t:ARG0 (p / person\n\t\t:name (n / name\n\t\t\t:op1 \"Elvis\" ) )\n\t:ARG0 (t / thing\n\t\t:ARG1-of (l / label) )\n\t:ARG1 (a / album\n\t\t:ord (o / ordinal-entity\n\t\t\t:value (f / first) )\n\t\t:poss p )\n\t:ARG2 (a2 / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Elvis\"\n\t\t\t\t:type Person\n\t\t\t\t:uri \"http://dbpedia.org/resource/Elvis_Presley\")\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Album\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Album\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"label\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Record_label\")\n\t\t:entity (d1/ linked_entity\n\t\t\t\t:surface_form \"first\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/First-class_cricket\")))\n"
  },
  "train_125": {
    "id": "125_125",
    "text": "In which time zone is Rome?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rome> <http://dbpedia.org/ontology/timeZone> ?uri . } ",
    "relations": [
      "dbo:timeZone"
    ],
    "resources": [
      "http://dbpedia.org/resource/Rome"
    ],
    "classes": [],
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (c / city :name (n / name :op1 \"Rome\"))\n      :ARG2 (z / zone\n            :mod (t / time)\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Rome\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Rome\")))\n\n"
  },
  "train_126": {
    "id": "126_126",
    "text": "Give me the currency of China.",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri\nWHERE {  \n   res:China dbo:currency ?uri . \n}",
    "relations": [
      "dbo:currency"
    ],
    "resources": [
      "http://dbpedia.org/resource/China"
    ],
    "classes": [],
    "extended_amr": "(g / give-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (c / currency\n            :mod (c2 / country :name (n / name :op1 \"China\")))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"china\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/China\")))\n\n"
  },
  "train_127": {
    "id": "127_127",
    "text": "Who are the developers of DBpedia?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/DBpedia> <http://dbpedia.org/ontology/developer> ?uri . }",
    "relations": [
      "dbo:developer"
    ],
    "resources": [
      "http://dbpedia.org/resource/DBpedia"
    ],
    "classes": [],
    "extended_amr": "(p / product\n\t:name (n / name\n\t\t:op1 \"DBpedia\" )\n\t:domain (a / amr-unknown\n\t\t:mod (p2 / person\n\t\t\t:ARG0-of (d / developers) ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"DBpedia\"\n\t\t\t\t:type Company\n\t\t\t\t:uri \"http://dbpedia.org/resource/DBpedia\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"developers\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Video_game_developer\")))\n"
  },
  "train_128": {
    "id": "128_128",
    "text": "Does Abraham Lincoln's death place have a website?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n        res:Abraham_Lincoln dbo:deathPlace ?p .\n        ?p dbo:website ?w . \n}",
    "relations": [
      "dbo:deathPlace",
      "dbo:website"
    ],
    "resources": [
      "http://dbpedia.org/resource/Abraham_Lincoln"
    ],
    "classes": [],
    "extended_amr": "(h / have-03 :mode interrogative\n      :ARG0 (p / place\n            :location-of (d / die-01\n                  :ARG1 (p2 / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\"))))\n      :ARG1 (w / website)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"abraham lincoln\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Abraham_Lincoln\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"place\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Place\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"death\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Death\")\n\t\t:entity (n2/ linked_entity\n\t\t\t\t:surface_form \"website\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Website\")))\n\n"
  },
  "train_129": {
    "id": "129_129",
    "text": "Who is the king of the Netherlands?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Netherlands> <http://dbpedia.org/ontology/leader> ?uri . ?uri a <http://dbpedia.org/ontology/Royalty> . } ",
    "relations": [
      "dbo:leader"
    ],
    "resources": [
      "http://dbpedia.org/resource/Netherlands"
    ],
    "classes": [
      "dbo:Royalty"
    ],
    "extended_amr": "(h / have-org-role-91\n\t:ARG2 (k / king)\n\t:ARG1 (c / country\n\t\t:name (n / name\n\t\t\t:op1 \"Netherlands\" ) )\n\t:domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"the Netherlands\"\n\t\t\t\t:type Location\n\t\t\t\t:uri \"http://dbpedia.org/resource/Netherlands\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"king\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Henry_VIII_of_England\")))\n"
  },
  "train_130": {
    "id": "130_130",
    "text": "In which city did Nikos Kazantzakis die?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nikos_Kazantzakis> <http://dbpedia.org/ontology/deathPlace> ?uri . ?uri a <http://dbpedia.org/ontology/Town> . }",
    "relations": [
      "dbo:deathPlace"
    ],
    "resources": [
      "http://dbpedia.org/resource/Nikos_Kazantzakis"
    ],
    "classes": [
      "dbo:Town"
    ],
    "extended_amr": "(d / die-01\n      :ARG1 (p / person :name (n / name :op1 \"Nikos\" :op2 \"Kazantzakis\"))\n      :location (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Nikos Kazantzakis\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nikos_Kazantzakis\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"city\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Town\")))\n\n"
  },
  "train_131": {
    "id": "131_131",
    "text": "Who was the father of Queen Elizabeth II?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT DISTINCT ?uri\nWHERE { \n        res:Elizabeth_II dbp:father ?uri .\n}",
    "relations": [
      "dbp:father"
    ],
    "resources": [
      "http://dbpedia.org/resource/Elizabeth_II"
    ],
    "classes": [],
    "extended_amr": "(p2/person\n\t:ARG0-of (p/person)\n\t:domain (a/amr-unknown)\n\t:rel (p3/person\n\t\t:name (n/name\n\t\t\t:op1 \"Queen\"\n\t\t\t:op2 \"Elizabeth\"\n\t\t\t:op3 \"II\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"queen elizabeth ii\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Queen_Elizabeth_II_Bridge\")))\n\n"
  },
  "train_132": {
    "id": "132_132",
    "text": "Give me a list of all critically endangered birds.",
    "sparql": "SELECT DISTINCT ?uri ?p WHERE { ?uri a <http://dbpedia.org/ontology/Bird> . { ?uri <http://dbpedia.org/ontology/conservationStatus> 'CR'^^<http://www.w3.org/2001/XMLSchema#string> . } UNION { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Critically_endangered_animals> . } }",
    "relations": [
      "dbo:conservationStatus"
    ],
    "resources": [
      "http://dbpedia.org/resource/Category:Critically_endangered_animals"
    ],
    "classes": [
      "dbo:Bird"
    ],
    "extended_amr": "(g/give-01\n\t:ARG1 (l/list-01\n\t\t:ARG1 (b/bird\n\t\t\t:ARG1-of (e/endanger-01\n\t\t\t\t:ARG1-of (c/criticism-04))\n\t\t\t:mod (a/all)))\n\t:mode (m/me)\n\t:entities ( el / entity_list\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"critically endanger bird\":uri \"http://dbpedia.org/resource/Category:Critically_endangered_animals\")))\n\n"
  },
  "train_133": {
    "id": "133_133",
    "text": "How many inhabitants does the largest city in Canada have?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?num\nWHERE {\n        res:Canada dbo:largestCity ?city . \n        ?city dbo:populationTotal ?num .\n}",
    "relations": [
      "dbo:largestCity",
      "dbo:populationTotal"
    ],
    "resources": [
      "http://dbpedia.org/resource/Canada"
    ],
    "classes": [],
    "extended_amr": "(h / have-03\n      :ARG0 (c / city\n            :ARG1-of (h2 / have-degree-91\n                  :ARG2 (l / large)\n                  :ARG3 (m / most))\n            :location (c2 / country :name (n / name :op1 \"Canada\")))\n      :ARG1 (p / person\n            :ARG0-of (i2 / inhabit-01\n                  :ARG1 c)\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Canada\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Canada\")))\n\n"
  },
  "train_134": {
    "id": "134_134",
    "text": "In which military conflicts did Lawrence of Arabia participate?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:T._E._Lawrence dbo:battle ?uri . \n}",
    "relations": [
      "dbo:battle"
    ],
    "resources": [
      "http://dbpedia.org/resource/T._E._Lawrence"
    ],
    "classes": [],
    "extended_amr": "(p / participate-01\n      :ARG0 (p2 / person :name (n / name :op1 \"Lawrence\" :op2 \"of\" :op3 \"Arabia\"))\n      :ARG1 (c / conflict-01\n            :mod (m / military)\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"lawrence of arabia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Lawrence_Arabia\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"conflict\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Arab\u2013Israeli_conflict\")))\n\n"
  },
  "train_135": {
    "id": "135_135",
    "text": "Which book has the most pages?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        ?uri rdf:type dbo:Book . \n        ?uri dbo:numberOfPages ?n .\n}\nORDER BY DESC(?n)\nOFFSET 0 LIMIT 1",
    "relations": [
      "dbo:numberOfPages"
    ],
    "resources": [],
    "classes": [
      "dbo:Book"
    ],
    "extended_amr": "(h/have-03\n\t:ARG0 (b/book\n\t\t:mod (a/amr-unknown))\n\t:ARG1 (p/page\n\t\t:quant (m/most))\n\t:entities ( el / entity_list\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"book\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Book\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"page\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Handley_Page_Halifax\")))\n\n"
  },
  "train_136": {
    "id": "136_136",
    "text": "In which country does the Nile start?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {       \n        res:Nile dbo:sourceCountry ?uri .\n}",
    "relations": [
      "dbo:sourceCountry"
    ],
    "resources": [
      "http://dbpedia.org/resource/Nile"
    ],
    "classes": [],
    "extended_amr": "(s / start-01\n\t:ARG1 (f / facility\n\t\t:name (n / name\n\t\t\t:op1 \"Nile\" ) )\n\t:location (c / country\n\t\t:location (a / amr-unknown) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Nile\"\n\t\t\t\t:type GeographicFeature\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nile\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Country_music\")))\n"
  },
  "train_137": {
    "id": "137_137",
    "text": "Who is the Formula 1 race driver with the most races?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer> .  ?uri <http://dbpedia.org/ontology/races> ?x . } ORDER BY DESC(?x) OFFSET 0 LIMIT 1 ",
    "relations": [
      "dbo:races"
    ],
    "resources": [],
    "classes": [
      "dbo:FormulaOneRacer"
    ],
    "extended_amr": "(p / person\n      :ARG0-of (d / drive-01)\n      :mod (r / race :name (n / name :op1 \"Formula\" :op2 \"1\"))\n      :ARG0-of (h / have-03\n            :ARG1 (r2 / race-02\n                  :ARG0 p\n                  :ARG1-of (h2 / have-degree-91\n                        :ARG3 (m / most))))\n      :domain (a / amr-unknown)\n      :entities ( el / entity_list\n            :entity (e0/ linked_entity\n                        :surface_form \"Formula 1 race driver\"\n                        :uri \"http://dbpedia.org/ontology/FormulaOneRacer\")))"
  },
  "train_138": {
    "id": "138_138",
    "text": "Which companies produce hovercrafts?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Hovercraft> . }",
    "relations": [
      "dbo:product"
    ],
    "resources": [
      "http://dbpedia.org/resource/Hovercraft"
    ],
    "classes": [
      "dbo:Company"
    ],
    "extended_amr": "(p / produce-01\n      :ARG0 (c / company\n            :mod (a / amr-unknown))\n      :ARG1 (h / hovercraft)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"hovercrafts\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Hovercraft\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"companies\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Company\")))\n\n"
  },
  "train_139": {
    "id": "139_139",
    "text": "Did Elvis Presley have children?",
    "sparql": "ASK WHERE { <http://dbpedia.org/resource/Elvis_Presley> <http://dbpedia.org/ontology/child> ?uri . } ",
    "relations": [
      "dbo:child"
    ],
    "resources": [
      "http://dbpedia.org/resource/Elvis_Presley"
    ],
    "classes": [],
    "extended_amr": "(h / have-03 :mode interrogative\n      :ARG0 (p / person :name (n / name :op1 \"Elvis\" :op2 \"Presley\"))\n      :ARG1 (p2 / person\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (c / child)))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"elvis presley\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Elvis_Presley\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"child\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Child\")))\n\n"
  },
  "train_140": {
    "id": "140_140",
    "text": "In which city was the president of Montenegro born?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/office> <http://dbpedia.org/resource/President_of_Montenegro> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri . ?uri a <http://dbpedia.org/ontology/City> . } ",
    "relations": [
      "dbp:office",
      "dbo:birthPlace"
    ],
    "resources": [
      "http://dbpedia.org/resource/President_of_Montenegro"
    ],
    "classes": [
      "dbo:City"
    ],
    "extended_amr": "(h2/have-degree-91\n\t:ARG0 (a/amr-unknown)\n\t:ARG1 (c/city\n\t\t:ARG0-of (h/have-org-role-91\n\t\t\t:ARG1 (c2/country\n\t\t\t\t:name (n/name\n\t\t\t\t\t:op1 \"Montenegro\"))\n\t\t\t:ARG2 (p/president)))\n\t:rel (b/bear-02)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"montenegro\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Montenegro\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"city\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/City\")))\n\n"
  },
  "train_141": {
    "id": "141_141",
    "text": "Which country was Bill Gates born in?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bill_Gates> <http://dbpedia.org/ontology/birthPlace> ?x . ?x <http://dbpedia.org/ontology/country> ?uri . }",
    "relations": [
      "dbo:birthPlace",
      "dbo:country"
    ],
    "resources": [
      "http://dbpedia.org/resource/Bill_Gates"
    ],
    "classes": [],
    "extended_amr": "(c/country\n\t:location (b/bear-02\n\t\t:ARG1 (p/person\n\t\t\t:name (n/name\n\t\t\t\t:op1 \"Bill\"\n\t\t\t\t:op2 \"Gates\")))\n\t:location (a/amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"bill gates\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Bill_Gates\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")))\n\n"
  },
  "train_142": {
    "id": "142_142",
    "text": "In which countries do people speak Japanese?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Japanese_language> . } ",
    "relations": [
      "dbo:language"
    ],
    "resources": [
      "http://dbpedia.org/resource/Japanese_language"
    ],
    "classes": [
      "dbo:Country"
    ],
    "extended_amr": "(s / speak-01\n      :ARG0 (p / person)\n      :ARG3 (l / language :name (n / name :op1 \"Japanese\"))\n      :location (c / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"japanese\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/First_Sino-Japanese_War\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"people\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Arab_people\")))\n\n"
  },
  "train_143": {
    "id": "143_143",
    "text": "Show me the book that Muhammad Ali wrote.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n         ?uri rdf:type dbo:Book . \n         ?uri dbo:author res:Muhammad_Ali . \n}",
    "relations": [
      "dbo:author"
    ],
    "resources": [
      "http://dbpedia.org/resource/Muhammad_Ali"
    ],
    "classes": [
      "dbo:Book"
    ],
    "extended_amr": "(s / show-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (b / book\n            :ARG1-of (w / write-01\n                  :ARG0 (p / person :name (n / name :op1 \"Muhammad\" :op2 \"Ali\"))))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"muhammad ali\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Muhammad_Ali\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"book\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Book\")))\n\n"
  },
  "train_144": {
    "id": "144_144",
    "text": "Is Michelle Obama the wife of Barack Obama?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n\tres:Barack_Obama dbo:spouse res:Michelle_Obama .\n}",
    "relations": [
      "dbo:spouse"
    ],
    "resources": [
      "http://dbpedia.org/resource/Barack_Obama",
      "http://dbpedia.org/resource/Michelle_Obama"
    ],
    "classes": [],
    "extended_amr": "(p / person :mode interrogative\n      :ARG0-of (h / have-rel-role-91\n            :ARG1 (p2 / person :name (n / name :op1 \"Barack\" :op2 \"Obama\"))\n            :ARG2 (w / wife))\n      :domain (p3 / person :name (n2 / name :op1 \"Michelle\" :op2 \"Obama\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"barack obama\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Barack_Obama\")\n\t\t:entity (a1/ linked_entity\n\t\t\t\t:surface_form \"michelle obama\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Michelle_Obama\")))\n\n"
  },
  "train_145": {
    "id": "145_145",
    "text": "What is the area code of Berlin?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?string \nWHERE {\n\tres:Berlin dbo:areaCode ?string .\n}",
    "relations": [
      "dbo:areaCode"
    ],
    "resources": [
      "http://dbpedia.org/resource/Berlin"
    ],
    "classes": [],
    "extended_amr": "(c/code\n\t:domain (a/amr-unknown)\n\t:location (c2/city\n\t\t:name (n/name\n\t\t\t:op1 \"Berlin\"))\n\t:mod (a2/area)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"berlin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Berlin\")))\n\n"
  },
  "train_146": {
    "id": "146_146",
    "text": "Give me all actors starring in Last Action Hero.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Last_Action_Hero dbo:starring ?uri . \n}",
    "relations": [
      "dbo:starring"
    ],
    "resources": [
      "http://dbpedia.org/resource/Last_Action_Hero"
    ],
    "classes": [],
    "extended_amr": "(g / give-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (p / person\n            :ARG0-of (a / act-01)\n            :mod (a2 / all)\n            :ARG1-of (s / star-01\n                  :ARG2 (w / work-of-art :name (n / name :op1 \"Last\" :op2 \"Action\" :op3 \"Hero\"))))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"last action hero\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Last_Action_Hero\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"actor\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Actor\")))\n\n"
  },
  "train_147": {
    "id": "147_147",
    "text": "What are the nicknames of San Francisco?",
    "sparql": "SELECT DISTINCT ?string WHERE {  <http://dbpedia.org/resource/San_Francisco> <http://dbpedia.org/property/nickname> ?string . } ",
    "relations": [
      "dbp:nickname"
    ],
    "resources": [
      "http://dbpedia.org/resource/San_Francisco"
    ],
    "classes": [],
    "extended_amr": "(n/nickname\n\t:beneficiary (c/city\n\t\t:name (n2/name\n\t\t\t:op1 \"San\"\n\t\t\t:op2 \"Francisco\"))\n\t:domain (a/amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"san francisco\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/San_Francisco\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"nickname\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nickname\")))\n\n"
  },
  "train_148": {
    "id": "148_148",
    "text": "What was the first Queen album?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Album> . ?uri <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Queen_(band)> . ?uri <http://dbpedia.org/ontology/releaseDate> ?d . } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
    "relations": [
      "dbo:artist",
      "dbo:releaseDate"
    ],
    "resources": [
      "http://dbpedia.org/resource/Queen_(band)"
    ],
    "classes": [
      "dbo:Album"
    ],
    "extended_amr": "(a / album\n      :mod (t / team :name (n / name :op1 \"Queen\"))\n      :ord (o / ordinal-entity :value 1)\n      :domain (a2 / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"queen\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Anne,_Queen_of_Great_Britain\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"first album\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/First\")))\n\n"
  },
  "train_149": {
    "id": "149_149",
    "text": "Through which countries does the Yenisei river flow?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Yenisei_River dbp:country ?uri .\n}",
    "relations": [
      "dbp:country"
    ],
    "resources": [
      "http://dbpedia.org/resource/Yenisei_River"
    ],
    "classes": [],
    "extended_amr": "(m/multiple\n\t:op1 (c/country\n\t\t:location-of (f/flow-01\n\t\t\t:ARG1 (r/river\n\t\t\t\t:name (n/name\n\t\t\t\t\t:op1 \"Yenisei\"))))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"yenisei\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/15804_Yenisei\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"river\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/River\")))\n\n"
  },
  "train_150": {
    "id": "150_150",
    "text": "Which television shows were created by Walt Disney?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n\t?uri rdf:type dbo:TelevisionShow .\n        ?uri dbo:creator res:Walt_Disney .\n}",
    "relations": [
      "dbo:creator"
    ],
    "resources": [
      "http://dbpedia.org/resource/Walt_Disney"
    ],
    "classes": [
      "dbo:TelevisionShow"
    ],
    "extended_amr": "(c / create-01\n      :ARG0 (p / person :name (n / name :op1 \"Walt\" :op2 \"Disney\"))\n      :ARG1 (s / show\n            :medium (t / television)\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Walt Disney\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Walt_Disney\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"television shows\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/TelevisionShow\")))\n\n"
  },
  "train_151": {
    "id": "151_151",
    "text": "What is the bridge with the longest span?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Bridge .\n        ?uri dbo:mainspan ?s . \n} \nORDER BY DESC(?s) \nOFFSET 0 LIMIT 1",
    "relations": [
      "dbo:mainspan"
    ],
    "resources": [],
    "classes": [
      "dbo:Bridge"
    ],
    "extended_amr": "(b / bridge\n      :ARG0-of (h / have-03\n            :ARG1 (s / span\n                  :ARG1-of (h2 / have-degree-91\n                        :ARG2 (l / long-03\n                              :ARG1 s)\n                        :ARG3 (m / most)\n                        :ARG5 (s2 / span))))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"bridge\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Bridge\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"span\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Span\")))\n\n"
  },
  "train_152": {
    "id": "152_152",
    "text": "What country is Sitecore from?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sitecore> <http://dbpedia.org/ontology/foundationPlace> ?uri . }",
    "relations": [
      "dbo:foundationPlace"
    ],
    "resources": [
      "http://dbpedia.org/resource/Sitecore"
    ],
    "classes": [],
    "extended_amr": "(b / be-from-91\n      :ARG1 (c / company :name (n / name :op1 \"Sitecore\"))\n      :ARG2 (c2 / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Sitecore\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sitecore\")))\n\n"
  },
  "train_153": {
    "id": "153_153",
    "text": "Whom did Lance Bass marry?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Lance_Bass> . } ",
    "relations": [
      "dbo:spouse"
    ],
    "resources": [
      "http://dbpedia.org/resource/Lance_Bass"
    ],
    "classes": [],
    "extended_amr": "(m/marry-01\n\t:ARG1 (p/person\n\t\t:name (n/name\n\t\t\t:op1 \"Lance\"\n\t\t\t:op2 \"Bass\"))\n\t:ARG2 (b/beat-03)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"lance bass\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Lance_Bass\")))\n\n"
  },
  "train_154": {
    "id": "154_154",
    "text": "What is the capital of Canada?",
    "sparql": "PREFIX dbo:  <http://dbpedia.org/ontology/>\nPREFIX res:  <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Canada dbo:capital ?uri .\n}",
    "relations": [
      "dbo:capital"
    ],
    "resources": [
      "http://dbpedia.org/resource/Canada"
    ],
    "classes": [],
    "extended_amr": "(c / city\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c2 / country :name (n / name :op1 \"Canada\"))\n            :ARG2 (c3 / capital))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"canada\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Canada\")))\n\n"
  },
  "train_155": {
    "id": "155_155",
    "text": "Who was Vincent van Gogh inspired by?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/Vincent_van_Gogh> . }",
    "relations": [
      "dbo:influenced"
    ],
    "resources": [
      "http://dbpedia.org/resource/Vincent_van_Gogh"
    ],
    "classes": [],
    "extended_amr": "(i2 / inspire-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (p / person :name (n / name :op1 \"Vincent\" :op2 \"van\" :op3 \"Gogh\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Vincent van Gogh\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Vincent_van_Gogh\")))\n\n"
  },
  "train_156": {
    "id": "156_156",
    "text": "In which city did John F. Kennedy die?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE { \n        res:John_F._Kennedy dbo:deathPlace ?uri .\n        ?uri rdf:type dbo:City .\n}",
    "relations": [
      "dbo:deathPlace"
    ],
    "resources": [
      "http://dbpedia.org/resource/John_F._Kennedy"
    ],
    "classes": [
      "dbo:City"
    ],
    "extended_amr": "(d / die-01\n      :ARG1 (p / person :name (n / name :op1 \"John\" :op2 \"F.\" :op3 \"Kennedy\"))\n      :location (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"john f. kennedy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_F._Kennedy\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"city\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/City\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"die\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Die_Fledermaus\")))\n\n"
  },
  "train_157": {
    "id": "157_157",
    "text": "Was U.S. president Jackson involved in a war?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n\tres:Andrew_Jackson dbo:battle ?battle .    \n}",
    "relations": [
      "dbo:battle"
    ],
    "resources": [
      "http://dbpedia.org/resource/Andrew_Jackson"
    ],
    "classes": [],
    "extended_amr": "(i2 / involve-01 :mode interrogative\n      :ARG1 (p / person :name (n / name :op1 \"Jackson\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country :name (n2 / name :op1 \"U.S.\"))\n                  :ARG2 (p2 / president)))\n      :ARG2 (w / war-01)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"U.S. president Jackson\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Andrew_Jackson\")))\n\n"
  },
  "train_158": {
    "id": "158_158",
    "text": "Who wrote the Game of Thrones theme?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/composer> ?uri. }",
    "relations": [
      "dbo:composer"
    ],
    "resources": [
      "http://dbpedia.org/resource/Game_of_Thrones"
    ],
    "classes": [],
    "extended_amr": "(w / write-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (t / theme)\n      :ARG2 (s / show :name (n / name :op1 \"Game\" :op2 \"of\" :op3 \"Thrones\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"game of thrones\"\n\t\t:uri \"http://dbpedia.org/resource/Game_of_Thrones\")))\n\n"
  },
  "train_159": {
    "id": "159_159",
    "text": "Who designed the Brooklyn Bridge?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:Brooklyn_Bridge dbo:architect ?uri .\n}",
    "relations": [
      "dbo:architect"
    ],
    "resources": [
      "http://dbpedia.org/resource/Brooklyn_Bridge"
    ],
    "classes": [],
    "extended_amr": "(d / design-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (b / bridge :name (n / name :op1 \"Brooklyn\" :op2 \"Bridge\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Brooklyn Bridge\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Brooklyn_Bridge\")))\n\n"
  },
  "train_160": {
    "id": "160_160",
    "text": "When did Boris Becker end his active career?",
    "sparql": "SELECT DISTINCT ?d WHERE { <http://dbpedia.org/resource/Boris_Becker> <http://dbpedia.org/ontology/activeYearsEndDate> ?d . } ",
    "relations": [
      "dbo:activeYearsEndDate"
    ],
    "resources": [
      "http://dbpedia.org/resource/Boris_Becker"
    ],
    "classes": [],
    "extended_amr": "(e / end-01\n      :ARG0 (p / person :name (n / name :op1 \"Boris\" :op2 \"Becker\"))\n      :ARG1 (c / career\n            :ARG1-of (a / activity-06)\n            :poss p)\n      :time (a2 / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"boris becker\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Boris_Becker\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"career\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Career\")))\n\n"
  },
  "train_161": {
    "id": "161_161",
    "text": "Which types of grapes grow in Oregon?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oregon_wine> <http://dbpedia.org/ontology/growingGrape> ?uri . } ",
    "relations": [
      "dbo:growingGrape"
    ],
    "resources": [
      "http://dbpedia.org/resource/Oregon_wine"
    ],
    "classes": [],
    "extended_amr": "(g / grow-03\n      :ARG1 (g2 / grape\n            :mod (a / amr-uknown))\n      :location (s / state :name (n / name :op1 \"Oregon\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Oregon\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Oregon_wine\")))\n\n"
  },
  "train_162": {
    "id": "162_162",
    "text": "How tall is Michael Jordan?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?num \nWHERE {\n        res:Michael_Jordan dbo:height ?num .\n}",
    "relations": [
      "dbo:height"
    ],
    "resources": [
      "http://dbpedia.org/resource/Michael_Jordan"
    ],
    "classes": [],
    "extended_amr": "(h / have-quant-91\n      :ARG1 (p / person :name (n / name :op1 \"Michael\" :op2 \"Jordan\"))\n      :ARG1 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"michael jordan\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Michael_Jordan\")))\n\n"
  },
  "train_163": {
    "id": "163_163",
    "text": "To which party does the mayor of Paris belong?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paris> <http://dbpedia.org/ontology/mayor> ?x . ?x <http://dbpedia.org/ontology/party> ?uri . }",
    "relations": [
      "dbo:mayor",
      "dbo:party"
    ],
    "resources": [
      "http://dbpedia.org/resource/Paris"
    ],
    "classes": [],
    "extended_amr": "(b / belong-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / city :name (n / name :op1 \"Paris\"))\n                  :ARG2 (m / mayor)))\n      :ARG1 (p2 / party\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Paris\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Paris\")))\n\n"
  },
  "train_164": {
    "id": "164_164",
    "text": "Who wrote the book The Pillars of the Earth?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n        res:The_Pillars_of_the_Earth dbo:author ?uri .\n}",
    "relations": [
      "dbo:author"
    ],
    "resources": [
      "http://dbpedia.org/resource/The_Pillars_of_the_Earth"
    ],
    "classes": [],
    "extended_amr": "(w / write-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"The Pillars of the Earth\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Pillars_of_the_Earth\")))\n\n"
  },
  "train_165": {
    "id": "165_165",
    "text": "Who was the 16th president of the United States?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n         ?uri dbo:office 'President of the United States' .\n         ?uri dbo:orderInOffice '16th' .\n}",
    "relations": [
      "dbo:office",
      "dbo:orderInOffice"
    ],
    "resources": [],
    "classes": [],
    "extended_amr": "(p/person\n\t:ARG0-of (h/have-org-role-91\n\t\t:ARG1 (c/country\n\t\t\t:name (n/name\n\t\t\t\t:op1 \"United\"\n\t\t\t\t:op2 \"States\"))\n\t\t:ARG2 (p2/president))\n\t:domain (a/amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"united states\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_States\")))\n\n"
  },
  "train_166": {
    "id": "166_166",
    "text": "How high is the Mount Everest?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?num \nWHERE {\n\tres:Mount_Everest dbo:elevation ?num.\n}",
    "relations": [
      "dbo:elevation"
    ],
    "resources": [
      "http://dbpedia.org/resource/Mount_Everest"
    ],
    "classes": [],
    "extended_amr": "(h/high-02\n\t:ARG1 (i/island\n\t\t:name (n/name\n\t\t\t:op1 \"Mount\"\n\t\t\t:op2 \"Everest\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"mount everest\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mount_Everest\")))\n\n"
  },
  "train_167": {
    "id": "167_167",
    "text": "Who was the doctoral supervisor of Albert Einstein?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Einstein> <http://dbpedia.org/ontology/doctoralAdvisor> ?uri . }",
    "relations": [
      "dbo:doctoralAdvisor"
    ],
    "resources": [
      "http://dbpedia.org/resource/Albert_Einstein"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (s / supervise-01\n            :ARG1 (p2 / person :name (n / name :op1 \"Albert\" :op2 \"Einstein\"))\n            :mod (d / doctor))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Albert Einstein\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Albert_Einstein\")))\n\n"
  },
  "train_168": {
    "id": "168_168",
    "text": "In which city does Sylvester Stallone live?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/City> . <http://dbpedia.org/resource/Sylvester_Stallone> <http://dbpedia.org/ontology/residence> ?uri . }",
    "relations": [
      "dbo:residence"
    ],
    "resources": [
      "http://dbpedia.org/resource/Sylvester_Stallone"
    ],
    "classes": [
      "dbo:City"
    ],
    "extended_amr": "(l / live-01\n      :ARG0 (p / person :name (n / name :op1 \"Sylvester\" :op2 \"Stallone\"))\n      :location (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"sylvester stallone\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sylvester_Stallone\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"city\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/City\")))\n\n"
  },
  "train_169": {
    "id": "169_169",
    "text": "What is the currency of the Czech Republic?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n\tres:Czech_Republic dbo:currency ?uri .\n}",
    "relations": [
      "dbo:currency"
    ],
    "resources": [
      "http://dbpedia.org/resource/Czech_Republic"
    ],
    "classes": [],
    "extended_amr": "(c / currency\n      :mod (c2 / country :name (n / name :op1 \"Czech\" :op2 \"Republic\"))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"czech republic\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Czech_Republic\")))\n\n"
  },
  "train_170": {
    "id": "170_170",
    "text": "Did Socrates influence Aristotle?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n\tres:Aristotle dbo:influencedBy res:Socrates .\n}",
    "relations": [
      "dbo:influencedBy"
    ],
    "resources": [
      "http://dbpedia.org/resource/Aristotle",
      "http://dbpedia.org/resource/Socrates"
    ],
    "classes": [],
    "extended_amr": "(i2 / influence-01 :mode interrogative\n      :ARG0 (p / person :name (n / name :op1 \"Socrates\"))\n      :ARG1 \"Aristotle\"\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"socrates\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Socrates\")\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Aristotle\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Aristotle\")))\n\n"
  },
  "train_171": {
    "id": "171_171",
    "text": "What is the time zone of Salt Lake City?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:Salt_Lake_City dbp:timezone ?uri . \n}",
    "relations": [
      "dbp:timezone"
    ],
    "resources": [
      "http://dbpedia.org/resource/Salt_Lake_City"
    ],
    "classes": [],
    "extended_amr": "(z/zone\n\t:beneficiary (c/city\n\t\t:name (n/name\n\t\t\t:op1 \"Salt\"\n\t\t\t:op2 \"Lake\"\n\t\t\t:op3 \"City\"))\n\t:domain (a/amr-unknown)\n\t:mod (t/time)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"salt lake city\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Salt_Lake_City\")))\n\n"
  },
  "train_172": {
    "id": "172_172",
    "text": "Who is the son of Sonny and Cher?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Cher> . ?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Sonny_Bono> . }",
    "relations": [
      "dbo:parent"
    ],
    "resources": [
      "http://dbpedia.org/resource/Cher",
      "http://dbpedia.org/resource/Sonny_Bono"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (h / have-rel-role-91\n            :ARG1 (a / and\n                  :op1 (p2 / person :name (n / name :op1 \"Sonny\"))\n                  :op2 (p3 / person :name (n2 / name :op1 \"Cher\")))\n            :ARG2 (s / son))\n      :domain (a2 / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Sonny\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sonny_Bono\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Cher\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cher\")))\n\n"
  },
  "train_173": {
    "id": "173_173",
    "text": "In which city are the headquarters of the United Nations?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Headquarters_of_the_United_Nations> <http://dbpedia.org/ontology/location> ?uri . ?uri a <http://dbpedia.org/ontology/City> . } ",
    "relations": [
      "dbo:location"
    ],
    "resources": [
      "http://dbpedia.org/resource/Headquarters_of_the_United_Nations"
    ],
    "classes": [
      "dbo:City"
    ],
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (h / headquarters\n            :poss (o / organization :name (n / name :op1 \"United\" :op2 \"Nations\")))\n      :ARG2 (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"united nations\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_Nations\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"city\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/City\")))\n\n"
  },
  "train_174": {
    "id": "174_174",
    "text": "Who is the founder of Penguin Books?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri\nWHERE { \n        res:Penguin_Books dbo:founder ?uri .\n}",
    "relations": [
      "dbo:founder"
    ],
    "resources": [
      "http://dbpedia.org/resource/Penguin_Books"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (f / found-01\n            :ARG1 (p2 / publication :name (n / name :op1 \"Penguin\" :op2 \"Books\")))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"penguin books\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Penguin_Books\")))\n\n"
  },
  "train_175": {
    "id": "175_175",
    "text": "When was Jack Wolfskin founded?",
    "sparql": "SELECT DISTINCT ?year WHERE {  <http://dbpedia.org/resource/Jack_Wolfskin> <http://dbpedia.org/ontology/foundingYear> ?year . } ",
    "relations": [
      "dbo:foundingYear"
    ],
    "resources": [
      "http://dbpedia.org/resource/Jack_Wolfskin"
    ],
    "classes": [],
    "extended_amr": "(f/found-01\n\t:ARG1 (p/person\n\t\t:name (n/name\n\t\t\t:op1 \"Jack\"\n\t\t\t:op2 \"Wolfskin\"))\n\t:time (a/amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"jack wolfskin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Jack_Wolfskin\")))\n\n"
  },
  "train_176": {
    "id": "176_176",
    "text": "Who is the mayor of Rotterdam?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        res:Rotterdam dbo:leaderName ?uri .\n}",
    "relations": [
      "dbo:leaderName"
    ],
    "resources": [
      "http://dbpedia.org/resource/Rotterdam"
    ],
    "classes": [],
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c / city :name (n / name :op1 \"Rotterdam\"))\n            :ARG2 (m / mayor))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Rotterdam\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Rotterdam\")))\n\n"
  },
  "train_177": {
    "id": "177_177",
    "text": "Give me all Swedish oceanographers.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri dbo:field res:Oceanography . \n        ?uri dbo:birthPlace res:Sweden .        \n}",
    "relations": [
      "dbo:field",
      "dbo:birthPlace"
    ],
    "resources": [
      "http://dbpedia.org/resource/Oceanography",
      "http://dbpedia.org/resource/Sweden"
    ],
    "classes": [],
    "extended_amr": "(g / give-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (o / oceanographer\n            :mod (c / country :name (n / name :op1 \"Sweden\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"sweden\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sweden\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"oceanographer\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/David_Ho_(oceanographer)\")))\n\n"
  },
  "train_178": {
    "id": "178_178",
    "text": "Show me Hemingway's autobiography.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Ernest_Hemingway> . ?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Autobiography> . }",
    "relations": [
      "dbo:author",
      "dbo:literaryGenre"
    ],
    "resources": [
      "http://dbpedia.org/resource/Ernest_Hemingway",
      "http://dbpedia.org/resource/Autobiography"
    ],
    "classes": [],
    "extended_amr": "(s / show-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (a / autobiography\n            :poss (p / person :name (n / name :op1 \"Hemingway\")))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"hemingway\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/3656_Hemingway\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"autobiography\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Autobiography\")))\n\n"
  },
  "train_179": {
    "id": "179_179",
    "text": "Who are the parents of the wife of Juan Carlos I?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?uri \nWHERE { \n        res:Juan_Carlos_I_of_Spain dbo:spouse ?x . \n        ?x dbo:parent ?uri . \n}",
    "relations": [
      "dbo:spouse",
      "dbo:parent"
    ],
    "resources": [
      "http://dbpedia.org/resource/Juan_Carlos_I_of_Spain"
    ],
    "classes": [],
    "extended_amr": "(p2/person\n\t:ARG0-of (p/person\n\t\t:ARG1 (h/have-rel-role-91\n\t\t\t:ARG1 p2\n\t\t\t:ARG2 (w/wife)))\n\t:rel (p3/person\n\t\t:name (n/name\n\t\t\t:op1 \"Juan\"\n\t\t\t:op2 \"Carlos\"\n\t\t\t:op3 \"I\"))\n\t:rel (a/amr-unknown)\n\t\t:mode expressive\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"juan carlos i\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Juan_Carlos_G\u00f3mez\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"parent\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Parent\")))\n\n"
  },
  "train_180": {
    "id": "180_180",
    "text": "Did Tesla win a nobel prize in physics?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n        res:Nikola_Tesla dbo:award res:Nobel_Prize_in_Physics .\n}",
    "relations": [
      "dbo:award"
    ],
    "resources": [
      "http://dbpedia.org/resource/Nikola_Tesla",
      "http://dbpedia.org/resource/Nobel_Prize_in_Physics"
    ],
    "classes": [],
    "extended_amr": "(w / win-01 :mode interrogative\n      :ARG0 (p / person :name (n / name :op1 \"Tesla\"))\n      :ARG1 (a / award :name (n2 / name :op1 \"nobel\" :op2 \"prize\")\n            :topic (p2 / physics))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Tesla\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nikola_Tesla\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"nobel prize in physics\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nobel_Prize_in_Physics\")))\n\n"
  },
  "train_181": {
    "id": "181_181",
    "text": "Who is the tallest basketball player?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer> .  ?uri <http://dbpedia.org/ontology/height> ?num . } ORDER BY DESC(?num) OFFSET 0 LIMIT 1 ",
    "relations": [
      "dbo:height"
    ],
    "resources": [],
    "classes": [
      "dbo:BasketballPlayer"
    ],
    "extended_amr": "(p / person\n      :ARG1-of (h / have-degree-91\n            :ARG2 (t / tall)\n            :ARG3 (m / most))\n      :ARG0-of (p2 / play-01\n            :ARG1 (b / basketball))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"basketball player\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/BasketballPlayer\")))\n\n"
  },
  "train_182": {
    "id": "182_182",
    "text": "Which city has the least inhabitants?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City> .  ?uri <http://dbpedia.org/ontology/populationTotal> ?pop . } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1 ",
    "relations": [
      "dbo:populationTotal"
    ],
    "resources": [],
    "classes": [
      "dbo:City"
    ],
    "extended_amr": "(h / have-03\n      :ARG0 (c / city\n            :mod (a / amr-unknown))\n      :ARG1 (p / person\n            :ARG0-of (i2 / inhabit-01\n                  :ARG1 c)\n            :ARG1-of (h2 / have-degree-91\n                  :ARG3 (l / least)))\n\t:entities ( el / entity_list\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"city\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/City\")))\n\n"
  },
  "train_183": {
    "id": "183_183",
    "text": "Is proinsulin a protein?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nASK \nWHERE {\n\tres:Proinsulin rdf:type dbo:Protein .\n}",
    "relations": [ ],
    "resources": [
      "http://dbpedia.org/resource/Proinsulin"
    ],
    "classes": [
      "dbo:Protein"
    ],
    "extended_amr": "(p / protein :mode interrogative\n      :domain (p2 / proinsulin)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"proinsulin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Proinsulin\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"protein\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Protein\")))\n\n"
  },
  "train_184": {
    "id": "184_184",
    "text": "Who were the parents of Queen Victoria?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n         res:Queen_Victoria dbo:parent ?uri .\n}",
    "relations": [
      "dbo:parent"
    ],
    "resources": [
      "http://dbpedia.org/resource/Queen_Victoria"
    ],
    "classes": [],
    "extended_amr": "(p/person\n\t:ARG0-of (h/have-rel-role-91\n\t\t:ARG2 (p3/parent))\n\t:domain (a/amr-unknown)\n\t:rel (p2/person\n\t\t:name (n/name\n\t\t\t:op1 \"Queen\"\n\t\t\t:op2 \"Victoria\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"queen victoria\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Queen_Victoria\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"parent\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Parent\")))\n\n"
  },
  "train_185": {
    "id": "185_185",
    "text": "Did Che Guevara have children?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK\nWHERE { \n        res:Che_Guevara dbo:child ?uri . \n}",
    "relations": [
      "dbo:child"
    ],
    "resources": [
      "http://dbpedia.org/resource/Che_Guevara"
    ],
    "classes": [],
    "extended_amr": "(h / have-03 :mode interrogative\n      :ARG0 (p / person :name (n / name :op1 \"Che\" :op2 \"Guevara\"))\n      :ARG1 (c / child)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Che Guevara\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Che_Guevara\")))\n\n"
  },
  "train_186": {
    "id": "186_186",
    "text": "Is Lake Baikal bigger than the Great Bear Lake?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nASK\nWHERE {  \n        res:Lake_Baikal dbo:areaTotal ?a1 . \n        res:Great_Bear_Lake dbo:areaTotal ?a2 .\n        FILTER (?a1 > ?a2)\n}",
    "relations": [
      "dbo:areaTotal"
    ],
    "resources": [
      "http://dbpedia.org/resource/Lake_Baikal",
      "http://dbpedia.org/resource/Great_Bear_Lake"
    ],
    "classes": [],
    "extended_amr": "(h / have-degree-91 :mode interrogative\n      :ARG1 (l / lake :name (n / name :op1 \"Lake\" :op2 \"Baikal\"))\n      :ARG2 (b / big)\n      :ARG3 (m / more)\n      :ARG4 (l2 / lake :name (n2 / name :op1 \"Great\" :op2 \"Bear\" :op3 \"Lake\"))\n      :ARG5 (l3 / lake)\n      :entities ( el / entity_list\n            :entity (e0/ linked_entity\n                        :surface_form \"Lake Baikal\"\n                        :uri \"http://dbpedia.org/resource/Lake_Baikal\"))\n            :entity (e0/ linked_entity\n                        :surface_form \"Great Bear Lake\"\n                        :uri \"http://dbpedia.org/ontology/Great_Bear_Lake\")))"
  },
  "train_187": {
    "id": "187_187",
    "text": "Did Kaurism\u00e4ki ever win the Grand Prix at Cannes?",
    "sparql": "ASK WHERE { <http://dbpedia.org/resource/Aki_Kaurism\u00e4ki> <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Grand_Prix_(Cannes_Film_Festival)> . }",
    "relations": [
      "dbo:award"
    ],
    "resources": [
      "http://dbpedia.org/resource/Aki_Kaurism\u00e4ki",
      "http://dbpedia.org/resource/Grand_Prix_(Cannes_Film_Festival)"
    ],
    "classes": [],
    "extended_amr": "(w / win-01 :mode interrogative\n      :ARG0 (p / person :name (n / name :op1 \"Kaurism\u00e4ki\"))\n      :ARG1 (a / award :name (n2 / name :op1 \"Grand\" :op2 \"Prix\"))\n      :location (c / city :name (n3 / name :op1 \"Cannes\"))\n      :time (e / ever)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Kaurism\u00e4ki\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Aki_Kaurism\u00e4ki\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Grand Prix at Cannes\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Grand_Prix_(Cannes_Film_Festival)\")))\n\n"
  },
  "train_188": {
    "id": "188_188",
    "text": "Give me all books by William Goldman with more than 300 pages.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n        ?uri rdf:type dbo:Book .\n        ?uri dbo:author res:William_Goldman .\n        ?uri dbo:numberOfPages ?x .\n        FILTER (?x > 300)\n}",
    "relations": [
      "dbo:author",
      "dbo:numberOfPages"
    ],
    "resources": [
      "http://dbpedia.org/resource/William_Goldman"
    ],
    "classes": [
      "dbo:Book"
    ],
    "extended_amr": "(g / give-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (b / book\n            :mod (a / all)\n            :prep-by (p / person :name (n / name :op1 \"William\" :op2 \"Goldman\"))\n            :ARG0-of (h / have-03\n                  :ARG1 (p2 / page\n                        :quant (m / more-than :op1 300))))\n      :ARG2 (y2 / you)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"william goldman\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/William_Goldman\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"book\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Book\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"more than 300 page\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/300-page_iPhone_bill\")))\n\n"
  },
  "train_189": {
    "id": "189_189",
    "text": "Where is Fort Knox located?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/Fort_Knox> <http://dbpedia.org/property/location> ?uri . }",
    "relations": [
      "dbp:location"
    ],
    "resources": [
      "http://dbpedia.org/resource/Fort_Knox"
    ],
    "classes": [],
    "extended_amr": "(b/be-located-at-91\n\t:ARG1 (f/facility\n\t\t:name (n/name\n\t\t\t:op1 \"Fort\"\n\t\t\t:op2 \"Knox\"))\n\t:ARG2 (l/locate-01)\n\t:location (a/amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"fort knox\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Fort_Knox\")))\n\n"
  },
  "train_190": {
    "id": "190_190",
    "text": "In which U.S. state is Fort Knox located?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n\tres:Fort_Knox dbp:location ?uri .\n        ?uri dbo:country res:United_States .\n}",
    "relations": [
      "dbp:location",
      "dbo:country"
    ],
    "resources": [
      "http://dbpedia.org/resource/Fort_Knox",
      "http://dbpedia.org/resource/United_States"
    ],
    "classes": [],
    "extended_amr": "(l / locate-01\n\t:ARG1 (s / ship\n\t\t:name (n / name\n\t\t\t:op1 \"Fort\"\n\t\t\t:op2 \"Knox\" ) )\n\t:location (s2 / state\n\t\t:location (c / country\n\t\t\t:name (n2 / name\n\t\t\t\t:op1 \"U.S.\" ) ) )\n\t:manner (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"U.S.\"\n\t\t\t\t:type Facility\n\t\t\t\t:uri \"http://dbpedia.org/resource/Fort_Knox_%28Maine%29\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Fort Knox\"\n\t\t\t\t:type Facility\n\t\t\t\t:uri \"http://dbpedia.org/resource/Fort_Knox_%28Maine%29\")\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Federal government of the United States\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Federal_government_of_the_United_States\")))\n"
  },
  "train_191": {
    "id": "191_191",
    "text": "Where is Syngman Rhee buried?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Syngman_Rhee> <http://dbpedia.org/ontology/restingPlace> ?uri . } ",
    "relations": [
      "dbo:restingPlace"
    ],
    "resources": [
      "http://dbpedia.org/resource/Syngman_Rhee"
    ],
    "classes": [],
    "extended_amr": "(b / bury-01\n      :ARG1 (p / person :name (n / name :op1 \"Syngman\" :op2 \"Rhee\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Syngman Rhee\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Syngman_Rhee\")))\n\n"
  },
  "train_192": {
    "id": "192_192",
    "text": "What is the timezone in San Pedro de Atacama?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/San_Pedro_de_Atacama> <http://dbpedia.org/ontology/timeZone> ?uri . } ",
    "relations": [
      "dbo:timeZone"
    ],
    "resources": [
      "http://dbpedia.org/resource/San_Pedro_de_Atacama"
    ],
    "classes": [],
    "extended_amr": "(t / timezone\n      :location (c / city :name (n / name :op1 \"San\" :op2 \"Pedro\" :op3 \"de\" :op4 \"Atacama\"))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"san pedro de atacama\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/San_Pedro_de_Atacama\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"timezone\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Time_zone\")))\n\n"
  },
  "train_193": {
    "id": "193_193",
    "text": "To which artistic movement did the painter of The Three Dancers belong?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/The_Three_Dancers> <http://dbpedia.org/ontology/author> ?person .  ?person <http://dbpedia.org/ontology/movement> ?uri . } ",
    "relations": [
      "dbo:author",
      "dbo:movement"
    ],
    "resources": [
      "http://dbpedia.org/resource/The_Three_Dancers"
    ],
    "classes": [],
    "extended_amr": "(b / belong-01\n      :ARG0 (p / person\n            :ARG0-of (p2 / paint-02\n                  :ARG1 (p3 / picture :name (n / name :op1 \"The\" :op2 \"Three\" :op3 \"Dancers\"))))\n      :ARG1 (m / movement-07\n            :ARG1 (a / art)\n            :mod (a2 / amr-unknown))\n      :entities ( el / entity_list\n            :entity (e0/ linked_entity\n                        :surface_form \"The Three Dancers\"\n                        :uri \"http://dbpedia.org/resource/The_Three_Dancers\")))"
  },
  "train_194": {
    "id": "194_194",
    "text": "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri dbo:knownFor res:Manhattan_Project .\n        ?uri rdf:type dbo:Scientist .\n        ?uri dbo:knownFor res:Nobel_Peace_Prize .\n}",
    "relations": [
      "dbo:knownFor"
    ],
    "resources": [
      "http://dbpedia.org/resource/Manhattan_Project",
      "http://dbpedia.org/resource/Nobel_Peace_Prize"
    ],
    "classes": [
      "dbo:Scientist"
    ],
    "extended_amr": "(k / know-02\n      :ARG1 (s / scientist\n            :mod (a / amr-unknown))\n      :ARG3 (a2 / and\n            :op1 (e / event :name (n / name :op1 \"Manhattan\" :op2 \"Project\"))\n            :op2 (a3 / award :name (n2 / name :op1 \"Nobel\" :op2 \"Peace\" :op3 \"Prize\")))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Manhattan Project\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Manhattan_Project\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Nobel Peace Prize\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nobel_Peace_Prize\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"scientist\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Scientist\")))\n\n"
  },
  "train_195": {
    "id": "195_195",
    "text": "Show me all books in Asimov's Foundation series.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/Foundation_series> . } ",
    "relations": [
      "dbo:series"
    ],
    "resources": [
      "http://dbpedia.org/resource/Foundation_series"
    ],
    "classes": [],
    "extended_amr": "(s / show-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (b / book\n            :mod (a / all)\n            :part-of (s2 / series :name (n / name :op1 \"Asimov's\" :op2 \"Foundation\")))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Asimov's Foundation series\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Foundation_series\")))\n\n"
  },
  "train_196": {
    "id": "196_196",
    "text": "Give me all cities in New Jersey with more than 100000 inhabitants.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE {\n\t?uri rdf:type dbo:City .\n        ?uri dbo:isPartOf res:New_Jersey .\n        ?uri dbp:populationTotal ?inhabitants .\n        FILTER (?inhabitants > 100000) .\n}",
    "relations": [
      "dbo:isPartOf",
      "dbp:populationTotal"
    ],
    "resources": [
      "http://dbpedia.org/resource/New_Jersey"
    ],
    "classes": [
      "dbo:City"
    ],
    "extended_amr": "(m / multi-sentence\n\t:snt1 (g / give-01\n\t\t:mode imperative\n\t\t:ARG1 (c / city\n\t\t\t:mod (a / all)\n\t\t\t:location (s / state\n\t\t\t\t:name (n / name\n\t\t\t\t\t:op1 \"New\"\n\t\t\t\t\t:op2 \"Jersey\" ) )\n\t\t\t:ARG0-of (i / inhabit-01\n\t\t\t\t:ARG2 (m2 / more-than\n\t\t\t\t\t:op1 100000 ) ) ) )\n\t:snt2 (i2 / imperative\n\t\t:op1 \"me\" )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"New Jersey\"\n\t\t\t\t:type Location\n\t\t\t\t:uri \"http://dbpedia.org/resource/New_Jersey\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"cities\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Twin_towns_and_sister_cities\")))\n"
  },
  "train_197": {
    "id": "197_197",
    "text": "Which museum in New York has the most visitors?",
    "sparql": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Museum> .  ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/New_York_City> .  ?uri <http://dbpedia.org/ontology/numberOfVisitors> ?num . } ORDER BY DESC(?num) OFFSET 0 LIMIT 1 ",
    "relations": [
      "dbo:location",
      "dbo:numberOfVisitors"
    ],
    "resources": [
      "http://dbpedia.org/resource/New_York_City"
    ],
    "classes": [
      "dbo:Museum"
    ],
    "extended_amr": "(h / have-03\n      :ARG0 (m / museum\n            :mod (a / amr-unknown)\n            :location (s / state :name (n / name :op1 \"New\" :op2 \"York\")))\n      :ARG1 (p / person\n            :ARG0-of (v / visit-01\n                  :ARG1 m)\n            :ARG1-of (h2 / have-degree-91\n                  :ARG3 (m2 / most)))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"new york\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/New_York\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"museum\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Museum\")\n\t\t:entity (n1/ linked_entity\n\t\t\t\t:surface_form \"visitor\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Visitor\")))\n\n"
  },
  "train_198": {
    "id": "198_198",
    "text": "How high is the Yokohama Marine Tower?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?num\nWHERE {\n        res:Yokohama_Marine_Tower dbo:height ?num .\n}",
    "relations": [
      "dbo:height"
    ],
    "resources": [
      "http://dbpedia.org/resource/Yokohama_Marine_Tower"
    ],
    "classes": [],
    "extended_amr": "(h / have-quant-91\n      :ARG1 (f / facility :name (n / name :op1 \"Yokohama\" :op2 \"Marine\" :op3 \"Tower\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Yokohama Marine Tower\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Yokohama_Marine_Tower\")))\n\n"
  },
  "train_199": {
    "id": "199_199",
    "text": "Does the new Battlestar Galactica series have more episodes than the old one?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nASK \nWHERE {\n\t<http://dbpedia.org/resource/Battlestar_Galactica_%281978_TV_series%29> dbo:numberOfEpisodes ?x .\n\t<http://dbpedia.org/resource/Battlestar_Galactica_%282004_TV_series%29> dbo:numberOfEpisodes ?y .\n\tFILTER (?y > ?x)\n}",
    "relations": [
      "dbo:numberOfEpisodes"
    ],
    "resources": [
      "http://dbpedia.org/resource/Battlestar_Galactica_%281978_TV_series%29",
      "http://dbpedia.org/resource/Battlestar_Galactica_%282004_TV_series%29"
    ],
    "classes": [],
    "extended_amr": "(h / have-03\n\t:mode interrogative\n\t:ARG0 (u / university\n\t\t:name (n / name\n\t\t\t:op1 \"Battlestar\"\n\t\t\t:op2 \"Galactica\" )\n\t\t:ARG1-of (n2 / new-01) )\n\t:ARG1 (e / episode\n\t\t:quant (m / more) )\n\t:compared-to (o / one\n\t\t:mod (o2 / old) )\n\t:entities ( el / entity_list\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"Battlestar Galactica\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Battlestar_Galactica_(1978_TV_series)\")\n\t\t:entity (c1/ linked_entity\n\t\t\t\t:surface_form \"Battlestar Pegasus\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Battlestar_Pegasus\")\n\t\t:entity (c2/ linked_entity\n\t\t\t\t:surface_form \"Old One\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Old_One\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"episodes\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Psychosis\")))\n"
  },
  "train_200": {
    "id": "200_200",
    "text": "Who is the youngest Darts player?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n        ?uri rdf:type dbo:DartsPlayer .\n        ?uri dbo:birthDate ?date .\n}\nORDER BY DESC(?date)\nOFFSET 0 LIMIT 1",
    "relations": [
      "dbo:birthDate"
    ],
    "resources": [],
    "classes": [
      "dbo:DartsPlayer"
    ],
    "extended_amr": "(p / play-01\n\t:ARG1 (p2 / political-movement\n\t\t:name (n / name\n\t\t\t:op1 \"Darts\" ) )\n\t:mod (l / large\n\t\t:op1 \"youngest\" )\n\t:domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"Darts player\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Darts\")))\n"
  },
  "train_201": {
    "id": "201_201",
    "text": "Who developed the video game World of Warcraft?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:World_of_Warcraft dbo:developer ?uri . \n}",
    "relations": [
      "dbo:developer"
    ],
    "resources": [
      "http://dbpedia.org/resource/World_of_Warcraft"
    ],
    "classes": [],
    "extended_amr": "(d / develop-02\n\t:ARG1 (o / organization\n\t\t:name (n / name\n\t\t\t:op1 \"World\"\n\t\t\t:op2 \"Of\"\n\t\t\t:op3 \"Warcraft\" )\n\t\t:mod (v / video) )\n\t:ARG0 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (c0/ linked_entity\n\t\t\t\t:surface_form \"World of Warcraft\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/World_of_Warcraft\")\n\t\t:entity (c1/ linked_entity\n\t\t\t\t:surface_form \"Warcraft: Orcs & Humans\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Warcraft:_Orcs_&_Humans\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"video game\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Video_game\")))\n"
  },
  "train_202": {
    "id": "202_202",
    "text": "Who was the pope that founded the Vatican Television?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT ?uri \nWHERE { \n         ?uri rdf:type dbo:Pope . \n         res:Vatican_Television_Center dbo:foundedBy ?uri .\n}",
    "relations": [
      "dbo:foundedBy"
    ],
    "resources": [
      "http://dbpedia.org/resource/Vatican_Television_Center"
    ],
    "classes": [
      "dbo:Pope"
    ],
    "extended_amr": "(m / multi-sentence\n\t:snt1 (f / found-01\n\t\t:mode interrogative\n\t\t:ARG1 (o / organization\n\t\t\t:name (n / name\n\t\t\t\t:op1 \"Vatican\"\n\t\t\t\t:op2 \"Television\" ) ) )\n\t:snt2 (p / person\n\t\t:ARG0-of (h / have-org-role-91\n\t\t\t:ARG2 (p2 / pope) ) )\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"pope\"\n\t\t\t\t:type Location\n\t\t\t\t:uri \"http://dbpedia.org/resource/Vatican_City\")\n\t\t:entity (e1/ linked_entity\n\t\t\t\t:surface_form \"Vatican\"\n\t\t\t\t:type Location\n\t\t\t\t:uri \"http://dbpedia.org/resource/Vatican_City\")))\n"
  },
  "train_203": {
    "id": "203_203",
    "text": "Who composed the music for Harold and Maude?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri \nWHERE {\n\tres:Harold_and_Maude dbo:musicComposer ?uri .\n}",
    "relations": [
      "dbo:musicComposer"
    ],
    "resources": [
      "http://dbpedia.org/resource/Harold_and_Maude"
    ],
    "classes": [],
    "extended_amr": "(c / compose-02\n      :ARG0 (a / amr-unknown)\n      :ARG1 (m / music)\n      :ARG2 (w / work-of-art :name (n / name :op1 \"Harold\" :op2 \"and\" :op3 \"Maude\"))\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Harold and Maude\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Harold_and_Maude\")))\n\n"
  },
  "train_204": {
    "id": "204_204",
    "text": "Give me all members of Prodigy.",
    "sparql": "SELECT DISTINCT ?uri WHERE {  <http://dbpedia.org/resource/The_Prodigy> <http://dbpedia.org/ontology/bandMember> ?uri . } ",
    "relations": [
      "dbo:bandMember"
    ],
    "resources": [
      "http://dbpedia.org/resource/The_Prodigy"
    ],
    "classes": [],
    "extended_amr": "(g / give-01 :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / company :name (n / name :op1 \"Prodigy\"))\n                  :ARG2 (m / member))\n            :mod (a / all))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Prodigy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Prodigy\")))\n\n"
  },
  "train_205": {
    "id": "205_205",
    "text": "Who is starring in Spanish movies produced by Benicio del Toro?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?film <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?film <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain> . ?film <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Benicio_del_Toro> . ?film <http://dbpedia.org/ontology/starring> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person> . } ",
    "relations": [
      "dbo:country",
      "dbo:producer",
      "dbo:starring"
    ],
    "resources": [
      "http://dbpedia.org/resource/Spain",
      "http://dbpedia.org/resource/Benicio_del_Toro"
    ],
    "classes": [
      "dbo:Film",
      "dbo:Person"
    ],
    "extended_amr": "(s / star-01\n      :ARG1 (a / amr-unknown)\n      :ARG2 (m / movie\n            :mod (c / country :name (n / name :op1 \"Spain\"))\n            :ARG1-of (p / produce-01\n                  :ARG0 (p2 / person :name (n2 / name :op1 \"Benicio\" :op2 \"del\" :op3 \"Toro\"))))\n      :entities ( el / entity_list\n            :entity (e0/ linked_entity\n                        :surface_form \"Spain\"\n                        :uri \"http://dbpedia.org/resource/Spain\"))\n            :entity (e1/ linked_entity\n                        :surface_form \"Benicio del Toro\"\n                        :uri \"http://dbpedia.org/resource/Benicio_del_Toro\"))\n            :entity (e2/ linked_entity\n                        :surface_form \"movie\"\n                        :uri \"http://dbpedia.org/ontology/Film\"))\n            :entity (e3/ linked_entity\n                        :surface_form \"person\"\n                        :uri \"http://dbpedia.org/ontology/Person\")))"
  },
  "train_206": {
    "id": "206_206",
    "text": "Which subsidiary of TUI Travel serves both Glasgow and Dublin?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/TUI_Travel> <http://dbpedia.org/ontology/subsidiary> ?uri .  ?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Glasgow_Airport> . ?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Dublin_Airport> . } ",
    "relations": [
      "dbo:subsidiary",
      "dbo:targetAirport"
    ],
    "resources": [
      "http://dbpedia.org/resource/TUI_Travel",
      "http://dbpedia.org/resource/Glasgow_Airport",
      "http://dbpedia.org/resource/Dublin_Airport"
    ],
    "classes": [],
    "extended_amr": "(s2/serve-01\n\t:ARG0 (s/subsidiary\n\t\t:mod (c/company\n\t\t\t:name (n/name\n\t\t\t\t:op1 \"TUI\"\n\t\t\t\t:op2 \"Travel\")))\n\t:ARG1 (b/both\n\t\t:op1 (a/and\n\t\t\t:op1 (c2/city\n\t\t\t\t:name (n2/name\n\t\t\t\t\t:op1 \"Glasgow\"))\n\t\t\t:op2 (c3/city\n\t\t\t\t:name (n3/name\n\t\t\t\t\t:op1 \"Dublin\"))))\n\t:ARG2 (a2/amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"tui travel\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/TUI_Travel\")\n\t\t:entity (a1/ linked_entity\n\t\t\t\t:surface_form \"glasgow\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Glasgow\")\n\t\t:entity (a2/ linked_entity\n\t\t\t\t:surface_form \"dublin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Dublin\")))\n\n"
  },
  "train_207": {
    "id": "207_207",
    "text": "In which country is Mecca located?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri \nWHERE {  \n        res:Mecca dbo:country ?uri .\n}",
    "relations": [
      "dbo:country"
    ],
    "resources": [
      "http://dbpedia.org/resource/Mecca"
    ],
    "classes": [],
    "extended_amr": "(l / locate-01\n\t:ARG1 (c / city\n\t\t:name (n / name\n\t\t\t:op1 \"Mecca\" ) )\n\t:ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Mecca\"\n\t\t\t\t:type Location\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mecca\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Country_music\")))\n"
  },
  "train_208": {
    "id": "208_208",
    "text": "How many languages are spoken in Colombia?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Language> .  <http://dbpedia.org/resource/Colombia> <http://dbpedia.org/ontology/language> ?uri . } ",
    "relations": [
      "dbo:language"
    ],
    "resources": [
      "http://dbpedia.org/resource/Colombia"
    ],
    "classes": [
      "dbo:Language"
    ],
    "extended_amr": "(s / speak-01\n      :ARG3 (l / language\n            :quant (a / amr-unknown))\n      :location (c / country :name (n / name :op1 \"Colombia\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"Colombia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Colombia\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"language\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Language\")))\n\n"
  },
  "train_209": {
    "id": "209_209",
    "text": "What is the biggest stadium in Spain?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Stadium> . ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Spain> . ?uri <http://dbpedia.org/ontology/seatingCapacity> ?n . } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
    "relations": [
      "dbo:location",
      "dbo:seatingCapacity"
    ],
    "resources": [
      "http://dbpedia.org/resource/Spain"
    ],
    "classes": [
      "dbo:Stadium"
    ],
    "extended_amr": "(e / establish\n\t:mod (b / big\n\t\t:op1 \"biggest\"\n\t\t:compared-to (c / country\n\t\t\t:name (n / name\n\t\t\t\t:op1 \"Spain\" ) ) )\n\t:domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Spain\"\n\t\t\t\t:type Location\n\t\t\t\t:uri \"http://dbpedia.org/resource/Kingdom_of_Spain_%28Napoleonic%29\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"stadium\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Stadium\")))\n"
  },
  "train_210": {
    "id": "210_210",
    "text": "Which professional surfers were born on the Philippines?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n\t?uri dbo:occupation res:Surfing .\n\t?uri dbo:birthPlace res:Philippines .\n}",
    "relations": [
      "dbo:occupation",
      "dbo:birthPlace"
    ],
    "resources": [
      "http://dbpedia.org/resource/Surfing",
      "http://dbpedia.org/resource/Philippines"
    ],
    "classes": [],
    "extended_amr": "(s/surfer\n\t:mod (p/professional)\n\t:mod (a/amr-unknown)\n\t:rel (b/bear-02)\n\t\t:location (c/country\n\t\t\t:name (n/name\n\t\t\t\t:op1 \"Phillippines\"))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"phillippines\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cebu,_Phillippines\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"surfer\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Surfer\")))\n\n"
  },
  "train_211": {
    "id": "211_211",
    "text": "What are the five boroughs of New York?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/governmentType> <http://dbpedia.org/resource/Borough_(New_York_City)> . }",
    "relations": [
      "dbo:governmentType"
    ],
    "resources": [
      "http://dbpedia.org/resource/Borough_(New_York_City)"
    ],
    "classes": [],
    "extended_amr": "(b / bourough :quant 5\n      :part-of (c / city :name (n / name :op1 \"New\" :op2 \"York\"))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"new york\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/New_York\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"five borough\")))\n\n"
  },
  "train_212": {
    "id": "212_212",
    "text": "Is Cola a beverage?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nASK \nWHERE {\n        res:Cola rdf:type dbo:Beverage .\n}",
    "relations": [ ],
    "resources": [
      "http://dbpedia.org/resource/Cola"
    ],
    "classes": [
      "dbo:Beverage"
    ],
    "extended_amr": "(c / cola\n\t:mode interrogative\n\t:domain (b / beverage)\n\t:entities ( el / entity_list\n\t\t:entity (e0/ linked_entity\n\t\t\t\t:surface_form \"Cola\"\n\t\t\t\t:type Company\n\t\t\t\t:uri \"http://dbpedia.org/resource/Coca-Cola\")\n\t\t:entity (d0/ linked_entity\n\t\t\t\t:surface_form \"beverage\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Alcoholic_beverage\")))\n"
  },
  "train_213": {
    "id": "213_213",
    "text": "When did princess Diana die?",
    "sparql": "SELECT DISTINCT ?d WHERE { <http://dbpedia.org/resource/Diana,_Princess_of_Wales> <http://dbpedia.org/ontology/deathDate> ?d . }",
    "relations": [
      "dbo:deathDate"
    ],
    "resources": [
      "http://dbpedia.org/resource/Diana,_Princess_of_Wales"
    ],
    "classes": [],
    "extended_amr": "(d/die-01\n\t:ARG1 (p/person\n\t\t:name (n/name\n\t\t\t:op1 \"Princess\"\n\t\t\t:op2 \"Diana\"))\n\t:time (a/amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"princess diana\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Princess_Diana_Bible\")))\n\n"
  },
  "train_214": {
    "id": "214_214",
    "text": "Where in France is sparkling wine produced?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?uri\nWHERE {\n        ?uri dbo:wineProduced res:Sparkling_wine .\n        ?uri dbo:location res:France .\n}",
    "relations": [
      "dbo:wineProduced",
      "dbo:location"
    ],
    "resources": [
      "http://dbpedia.org/resource/Sparkling_wine",
      "http://dbpedia.org/resource/France"
    ],
    "classes": [],
    "extended_amr": "(p / produce-01\n      :ARG1 (w / wine\n            :ARG1-of (s / sparkle-01))\n      :location (a / amr-unknown\n            :location (c / country :name (n / name :op1 \"France\")))\n\t:entities ( el / entity_list\n\t\t:entity (a0/ linked_entity\n\t\t\t\t:surface_form \"france\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/France\")\n\t\t:entity (n0/ linked_entity\n\t\t\t\t:surface_form \"wine\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Wine\")))\n\n"
  }
}