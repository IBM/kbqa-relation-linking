{
  "train_0": {
    "text": "List all boardgames by GMT.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
    "extended_amr": "(l / list-01\n      :ARG1 (b / boardgame\n            :mod (a / all)\n            :prep-by (c / company\n                  :name (n / name\n                        :op1 \"Gene\"\n                        :op2 \"Mike\"\n                        :op3 \"Terry\")))\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"boardgame\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Generic_Mapping_Tools\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"boardgame\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Belarus\")))\n",
    "relations": [
      "dbo:publisher"
    ],
    "id": 0
  },
  "train_1": {
    "text": "Who developed Skype?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
    "extended_amr": "(d / develop-02\n      :ARG0 (a / amr-unknown)\n      :ARG1 (p / product\n            :name (n / name\n                  :op1 \"Skype\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Skype\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Skype\")))\n",
    "relations": [
      "dbo:developer"
    ],
    "id": 1
  },
  "train_2": {
    "text": "Which people were born in Heraklion?",
    "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Person ; dbo:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
    "extended_amr": "(b / bear-02\n      :ARG1 (p / person\n            :mod (a / amr-unknown))\n      :location (c / city\n            :name (n / name\n                  :op1 \"Heraklion\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Heraklion\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Heraklion\")))\n",
    "relations": [
      "dbo:birthPlace"
    ],
    "id": 2
  },
  "train_3": {
    "text": "In which U.S. state is Area 51 located?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
    "extended_amr": "(l / locate-01\n      :ARG1 (f / facility\n            :name (n2 / name\n                  :op1 \"Area\"\n                  :op2 \"51\"))\n      :location (s / state\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"United\"\n                        :op2 \"States\"))\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"state\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_States\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Area 51\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Area_51\")))\n",
    "relations": [
      "dbo:country",
      "dbo:location"
    ],
    "id": 3
  },
  "train_4": {
    "text": "Who is the mayor of New York City?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
    "extended_amr": "(p / person\n      :ARG1-of (i / include-91)\n      :domain (a / amr-unknown)\n      :rel (m / mayor)\n      :rel (c / city\n            :name (n / name\n                  :op1 \"New\"\n                  :op2 \"Yor\"\n                  :op3 \"City\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"New Yor City\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/New_York_City\")))\n",
    "relations": [
      "dbo:leaderName"
    ],
    "id": 4
  },
  "train_5": {
    "text": "Which countries have places with more than two caves?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
    "extended_amr": "(h / have-03\n      :ARG0 (c / country\n            :mod (a / amr-unknown))\n      :ARG1 (p / place\n            :ARG0-of (h2 / have-03\n                  :ARG1 (c2 / cave\n                        :quant (m / more-than\n                              :op1 2))))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"cave\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Caves_of_Aggtelek_Karst_and_Slovak_Karst\")))\n",
    "relations": [
      "dbo:location"
    ],
    "id": 5
  },
  "train_6": {
    "text": "Where did Abraham Lincoln die?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
    "extended_amr": "(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Abraham\"\n                  :op2 \"Lincoln\"))\n      :location (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Abraham Lincoln\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Abraham_Lincoln\")))\n",
    "relations": [
      "dbo:deathPlace"
    ],
    "id": 6
  },
  "train_7": {
    "text": "Which airports does Air China serve?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
    "extended_amr": "(s / serve-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Air\"\n                  :op2 \"China\"))\n      :ARG2 (a2 / airport\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Air China\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Air_China\")))\n",
    "relations": [
      "dbo:targetAirport"
    ],
    "id": 7
  },
  "train_8": {
    "text": "Give me all actors starring in movies directed by and starring William Shatner.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG0-of (a2 / act-01)\n            :ARG1-of (s / star-01\n                  :ARG2 (m / movie\n                        :ARG1-of (d / direct-01\n                              :ARG0 (p2 / person\n                                    :name (n / name\n                                          :op1 \"William\"\n                                          :op2 \"Shatner\")))\n                        :ARG1-of (s2 / star-01\n                              :ARG1 p2)))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"William Shatner\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/William_Shatner\")))\n",
    "relations": [
      "dbp:starring",
      "dbo:starring",
      "dbo:director"
    ],
    "id": 8
  },
  "train_9": {
    "text": "What are the official languages of the Philippines?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
    "extended_amr": "(l / language\n      :domain (a / amr-unknown)\n      :mod (o / official)\n      :poss (c / country\n            :name (n / name\n                  :op1 \"Phillippines\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Phillippines\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Philippines\")))\n",
    "relations": [
      "dbo:officialLanguage"
    ],
    "id": 9
  },
  "train_10": {
    "text": "Give me all Danish films.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
    "extended_amr": "(g / give-01\n      :ARG1 (f / film\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Denmark\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"film\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Denmark\")))\n",
    "relations": [
      "dbo:country"
    ],
    "id": 10
  },
  "train_11": {
    "text": "Which movies starring Brad Pitt were directed by Guy Ritchie?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
    "extended_amr": "(d / direct-01\n      :ARG0 (p2 / person\n            :name (n2 / name\n                  :op1 \"Guy\"\n                  :op2 \"Ritchie\"))\n      :ARG1 (m / movie\n            :ARG2-of (s / star-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Brad\"\n                              :op2 \"Pitt\")))\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Brad Pitt\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Brad_Pitt\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Guy Ritchie\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Guy_Ritchie\")))\n",
    "relations": [
      "dbo:director",
      "dbo:starring"
    ],
    "id": 11
  },
  "train_12": {
    "text": "Give me the grandchildren of Bruce Lee.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
    "extended_amr": "(g / give-01\n      :ARG2 (i / i)\n      :mode imperative\n      :rel (h / have-rel-role-91\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Bruce\"\n                        :op2 \"Lee\"))\n            :ARG2 (g2 / grandchild))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Bruce Lee\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Bruce_Lee\")))\n",
    "relations": [
      "dbo:child",
      "dbp:children"
    ],
    "id": 12
  },
  "train_13": {
    "text": "Which other weapons did the designer of the Uzi develop?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
    "extended_amr": "(w2 / weapon\n      :name (n / name\n            :op1 \"Uzi\")\n      :rel (d / develop-02\n            :ARG0 (p / person\n                  :ARG0-of (d2 / design-01))\n            :ARG1 (w / weapon\n                  :mod (o / other)\n                  :mod (a / amr-unknown)))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Uzi\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Uzi\")))\n",
    "relations": [
      "dbp:designer"
    ],
    "id": 13
  },
  "train_14": {
    "text": "Who is the owner of Universal Studios?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (o / own-01\n            :ARG1 (c / company\n                  :name (n / name\n                        :op1 \"Universal\"\n                        :op2 \"Studios\")))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Universal Studios\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Universal_Studios\")))\n",
    "relations": [
      "dbo:owner"
    ],
    "id": 14
  },
  "train_15": {
    "text": "Which state of the USA has the highest population density?",
    "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
    "extended_amr": "(h / have-03\n      :ARG0 (s / state\n            :mod (a / amr-unknown)\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"United\"\n                        :op2 \"States\"\n                        :op4 \"America\")))\n      :ARG1 (d / density\n            :mod (p / population))\n      :rel (h2 / high-02)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"state\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Usa_District,_\u014cita\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"density\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Population_density\")))\n",
    "relations": [
      "dbp:densityrank"
    ],
    "id": 15
  },
  "train_16": {
    "text": "Which monarchs were married to a German?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
    "extended_amr": "(m / marry-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (m2 / monarch))\n            :mod (a / amr-unknown))\n      :ARG2 (p2 / person\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Germany\")))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Germany\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Germany\")))\n",
    "relations": [
      "dbo:birthPlace",
      "dbo:country",
      "dbo:spouse"
    ],
    "id": 16
  },
  "train_17": {
    "text": "Which organizations were founded in 1950?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
    "extended_amr": "(f / found-01\n      :ARG1 (o / organization\n            :mod (a / amr-unknown))\n      :time (d / date-entity\n            :year 1950)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"found-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/1950\")))\n",
    "relations": [
      "dbp:formation",
      "dbo:formationYear",
      "dbo:foundingYear",
      "dbp:foundation"
    ],
    "id": 17
  },
  "train_18": {
    "text": "Who created the comic Captain America?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
    "extended_amr": "(c / create-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (c2 / comic\n            :name (n / name\n                  :op1 \"Captain\"\n                  :op2 \"America\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Captain America\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Captain_Comic\")))\n",
    "relations": [
      "dbo:creator"
    ],
    "id": 18
  },
  "train_19": {
    "text": "Give me the Apollo 14 astronauts.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
    "extended_amr": "(g / give-01\n      :ARG1 (a / astronaut\n            :mod (s / spaceship\n                  :name (n / name\n                        :op1 \"Apollo\"\n                        :op2 \"14\")))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"astronaut\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Apollo_14\")))\n",
    "relations": [
      "dbo:mission"
    ],
    "id": 19
  },
  "train_20": {
    "text": "Who wrote the book The pillars of the Earth?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
    "extended_amr": "(w / write-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (b / book\n            :name (n / name\n                  :op1 \"The\"\n                  :op2 \"pillars\"\n                  :op3 \"of\"\n                  :op4 \"the\"\n                  :op5 \"Earth\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"The pillars of the Earth\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Pillars_of_the_Earth\")))\n",
    "relations": [
      "dbo:author"
    ],
    "id": 20
  },
  "train_21": {
    "text": "Which state of the United States of America has the highest density?",
    "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
    "extended_amr": "(h / have-03\n      :ARG0 (s / state\n            :mod (a / amr-unknown)\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"United\"\n                        :op2 \"States\"\n                        :op3 \"of\"\n                        :op4 \"America\")))\n      :ARG1 (d / density)\n      :rel (h2 / high-02)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"United States of America\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_States\")))\n",
    "relations": [
      "dbp:densityrank"
    ],
    "id": 21
  },
  "train_22": {
    "text": "Which spaceflights were launched from Baikonur?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
    "extended_amr": "(l / launch-01\n      :ARG1 (s / spaceflight\n            :mod (a / amr-unknown))\n      :source (c / city\n            :name (n / name\n                  :op1 \"Baikonur\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Baikonur\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Baikonur_Cosmodrome_Site_110\")))\n",
    "relations": [
      "dbp:launchPad"
    ],
    "id": 22
  },
  "train_23": {
    "text": "Give me a list of all trumpet players that were bandleaders.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
    "extended_amr": "(g / give-01\n      :ARG1 (l / list-01\n            :ARG1 (p / person\n                  :ARG0-of (l2 / lead-01)\n                  :ARG0-of (p2 / play-01)))\n      :ARG2 (i / i)\n      :mode imperative\n      :rel (t / trumpet)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"trumpet\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Trumpet\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"person\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/List_of_American_big_band_bandleaders\")))\n",
    "relations": [
      "dbo:occupation",
      "dbo:instrument"
    ],
    "id": 23
  },
  "train_24": {
    "text": "Which U.S. states are in the same timezone as Utah?",
    "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (s / state\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"United\"\n                        :op2 \"States\"))\n            :mod (a / amr-unknown))\n      :ARG2 (t / timezone\n            :ARG1-of (s2 / same-01\n                  :ARG2 (s3 / state\n                        :name (n2 / name\n                              :op1 \"Utah\"))))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"state\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Usk,_Washington\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Utah\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Utah\")))\n",
    "relations": [
      "dbp:timezone"
    ],
    "id": 24
  },
  "train_25": {
    "text": "Which U.S. states possess gold minerals?",
    "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
    "extended_amr": "(p / possess-01\n      :ARG0 (s / state\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"United\"\n                        :op2 \"States\"))\n            :mod (a / amr-unknown))\n      :ARG1 (m / mineral\n            :mod (g / gold))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"possess-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_States\")))\n",
    "relations": [
      "dbp:mineral"
    ],
    "id": 25
  },
  "train_26": {
    "text": "Who is the daughter of Ingrid Bergman married to?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
    "extended_amr": "(h / have-rel-role-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ingrid\"\n                  :op2 \"Bergman\"))\n      :ARG2 (d / daughter)\n      :rel (m / marry-01\n            :ARG2 (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Ingrid Bergman\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ingrid_Bergman\")))\n",
    "relations": [
      "dbo:child",
      "dbp:spouse"
    ],
    "id": 26
  },
  "train_27": {
    "text": "How deep is Lake Placid?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
    "extended_amr": "(d / deep-02\n      :ARG1 (l / lake\n            :name (n / name\n                  :op1 \"Placid\"))\n      :rel (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Placid\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Lake_Placid\")))\n",
    "relations": [
      "dbo:maximumDepth"
    ],
    "id": 27
  },
  "train_28": {
    "text": "Show me all museums in London.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
    "extended_amr": "(s / show-01\n      :ARG1 (m / museum\n            :location (c / city\n                  :name (n / name\n                        :op1 \"London\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"museum\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Museums_in_Aalborg\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"London\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/London\")))\n",
    "relations": [
      "dbo:location"
    ],
    "id": 28
  },
  "train_29": {
    "text": "Which caves have more than 3 entrances?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
    "extended_amr": "(h / have-03\n      :ARG0 (c / cave\n            :mod (a / amr-unknown))\n      :ARG1 (e / entrance\n            :quant (m / more-than\n                  :op1 3))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"cave\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Caves_of_Aggtelek_Karst_and_Slovak_Karst\")))\n",
    "relations": [
      "dbp:entranceCount"
    ],
    "id": 29
  },
  "train_30": {
    "text": "Who is the tallest player of the Atlanta Falcons?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
    "extended_amr": "(p / person\n      :ARG0-of (p2 / play-01)\n      :ARG1-of (h / have-degree-91\n            :ARG2 (t2 / tall)\n            :ARG3 (m / most))\n      :domain (a / amr-unknown)\n      :part-of (t / team\n            :name (n / name\n                  :op1 \"Atlanta\"\n                  :op2 \"Falcons\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Atlanta Falcons\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Atlanta_Falcons\")))\n",
    "relations": [
      "dbo:team",
      "dbo:height"
    ],
    "id": 30
  },
  "train_31": {
    "text": "What are the top-10 action role-playing video games according to IGN?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
    "extended_amr": "(g / game\n      :ARG1-of (s / say-01\n            :ARG0 (w / website\n                  :name (n / name\n                        :op1 \"IGN\")))\n      :domain (a / amr-unknown)\n      :mod (v / video)\n      :mod (r / role-playing\n            :mod (a2 / action)\n            :quant x0)\n      :mod (t / top)\n      :quant 10\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"video\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Action_role-playing_games\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"IGN\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/IGN\")))\n",
    "relations": [
      "dbp:ign"
    ],
    "id": 31
  },
  "train_32": {
    "text": "Give me all writers that won the Nobel Prize in literature.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG0-of (w / win-01\n                  :ARG1 (a / award\n                        :name (n / name\n                              :op1 \"Nobel\"\n                              :op2 \"Prize\"\n                              :op3 \"in\"\n                              :op4 \"Literature\")))\n            :ARG0-of (w2 / write-01))\n      :ARG2 (i / i)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Nobel Prize in Literature\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nobel_Prize\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Nobel Prize in Literature\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Literature\")))\n",
    "relations": [
      "dbo:award"
    ],
    "id": 32
  },
  "train_33": {
    "text": "Show me all basketball players that are higher than 2 meters.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
    "extended_amr": "(s / show-01\n      :ARG1 (p / person\n            :ARG0-of (p2 / play-01)\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (h2 / high-02)\n                  :ARG3 (m / more)\n                  :ARG4 (d / distance-quantity\n                        :quant 2\n                        :unit (m2 / meter))))\n      :ARG2 (i2 / i)\n      :mode imperative\n      :rel (b / basketball)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"basketball\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/National_Basketball_Players_Association\")))\n",
    "relations": [
      "dbo:height"
    ],
    "id": 33
  },
  "train_34": {
    "text": "When was the Statue of Liberty built?",
    "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
    "extended_amr": "(b / build-01\n      :ARG1 (m / monument\n            :name (n / name\n                  :op1 \"Statue\"\n                  :op2 \"Of\"\n                  :op3 \"Liberty\"))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Statue Of Liberty\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Statue_of_Liberty\")))\n",
    "relations": [
      "dbp:beginningDate"
    ],
    "id": 34
  },
  "train_35": {
    "text": "Which states border Illinois?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
    "extended_amr": "(b / border-01\n      :ARG1 (s2 / state\n            :name (n / name\n                  :op1 \"Illinois\"))\n      :ARG2 (s / state\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Illinois\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Border_(1982_film)\")))\n",
    "relations": [
      "dbp:borderingstates"
    ],
    "id": 35
  },
  "train_36": {
    "text": "Who developed Minecraft?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
    "extended_amr": "(d / develop-02\n      :ARG0 (a / amr-unknown)\n      :ARG1 (g / game\n            :mod (v / video)\n            :name (n / name\n                  :op1 \"Minecraft\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Minecraft\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Minecraft\")))\n",
    "relations": [
      "dbo:developer"
    ],
    "id": 36
  },
  "train_37": {
    "text": "Where did Hillel Slovak die?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
    "extended_amr": "(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Hillel\"\n                  :op2 \"Slovak\"))\n      :location (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Hillel Slovak\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Hillel_Slovak\")))\n",
    "relations": [
      "dbo:deathPlace"
    ],
    "id": 37
  },
  "train_38": {
    "text": "What movies does Jesse Eisenberg play in?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
    "extended_amr": "(p2 / play-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jesse\"\n                  :op2 \"Eisenberg\"))\n      :location (m / movie\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Jesse Eisenberg\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Jesse_Eisenberg\")))\n",
    "relations": [
      "dbo:starring"
    ],
    "id": 38
  },
  "train_39": {
    "text": "Give all swimmers that were born in Moscow.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG0-of (s / swim-01)\n            :ARG1-of (b / bear-02\n                  :location (c / city\n                        :name (n / name\n                              :op1 \"Moscow\")))\n            :mod (a / all))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"swim-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Swimmers_(film)\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Moscow\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Moscow\")))\n",
    "relations": [
      "dbo:birthPlace"
    ],
    "id": 39
  },
  "train_40": {
    "text": "Give me all cosmonauts.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
    "extended_amr": "(g / give-01\n      :ARG1 (c / cosmonaut\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"cosmonaut\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cosmonauts_Alley\")))\n",
    "relations": [
      "dbo:nationality"
    ],
    "id": 40
  },
  "train_41": {
    "text": "Give me all Swiss non-profit organizations.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
    "extended_amr": "(g / give-01\n      :ARG1 (o / organization\n            :ARG0-of (p / profit-01\n                  :polarity -)\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Switzerland\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"organization\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Non\u2013profit_organizations_based_in_California\")))\n",
    "relations": [
      "dbo:country",
      "dbo:type",
      "dbo:location"
    ],
    "id": 41
  },
  "train_42": {
    "text": "Which presidents were born in 1945?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/President> ; <http://dbpedia.org/ontology/birthDate> ?date FILTER regex(?date, \"^1945\") }",
    "extended_amr": "(b / bear-02\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (p2 / president))\n            :mod (a / amr-unknown))\n      :time (d / date-entity\n            :year 1945)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"have-org-role-91\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/1945\")))\n",
    "relations": [
      "dbo:birthDate"
    ],
    "id": 42
  },
  "train_43": {
    "text": "What kind of music did Lou Reed play?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
    "extended_amr": "(p2 / play-11\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lou\"\n                  :op2 \"Reed\"))\n      :ARG1 (m / music\n            :mod (k / kind-yy\n                  :mod (a / amr-unknown)))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Lou Reed\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Lou_Reed\")))\n",
    "relations": [
      "dbo:genre"
    ],
    "id": 43
  },
  "train_44": {
    "text": "Where do the Red Sox play?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Boston_Red_Sox> <http://dbpedia.org/property/ballpark> ?uri }",
    "extended_amr": "(p / play-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Red\"\n                  :op2 \"Sox\"))\n      :location (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Red Sox\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Boston_Red_Sox\")))\n",
    "relations": [
      "dbp:ballpark"
    ],
    "id": 44
  },
  "train_45": {
    "text": "Show a list of soccer clubs that play in the Bundesliga.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
    "extended_amr": "(s / show-01\n      :ARG1 (l / list-01\n            :ARG1 (c / club\n                  :ARG0-of (p / play-01)\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (l2 / league\n                              :name (n / name\n                                    :op1 \"Bundesliga\")))\n                  :mod (s2 / soccer)))\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Bundesliga\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Bundesliga\")))\n",
    "relations": [
      "dbo:league"
    ],
    "id": 45
  },
  "train_46": {
    "text": "Which volcanos in Japan erupted since 2000?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Japan> ; <http://dbpedia.org/ontology/eruptionYear> ?date FILTER ( year(?date) >= 2000 ) }",
    "extended_amr": "(e / erupt-01\n      :ARG1 (v / volcano\n            :mod (a / amr-unknown))\n      :time (s / since\n            :op1 (d / date-entity\n                  :year 2000))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"volcano\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Japan\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"erupt-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/2000\")))\n",
    "relations": [
      "dbo:eruptionYear",
      "dbo:locatedInArea"
    ],
    "id": 46
  },
  "train_47": {
    "text": "Which bridges cross the Seine?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
    "extended_amr": "(c / cross-02\n      :ARG0 (b / bridge\n            :mod (a / amr-unknown))\n      :ARG1 (r / river\n            :name (n / name\n                  :op1 \"Seine\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Seine\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Seine\")))\n",
    "relations": [
      "dbo:crosses"
    ],
    "id": 47
  },
  "train_48": {
    "text": "What is the official color of the University of Oxford?",
    "sparql": "SELECT DISTINCT ?string WHERE { <http://dbpedia.org/resource/University_of_Oxford> <http://dbpedia.org/ontology/officialSchoolColour> ?string }",
    "extended_amr": "(c / color\n      :domain (a / amr-unknown)\n      :mod (o / official)\n      :poss (u / university\n            :name (n / name\n                  :op1 \"University\"\n                  :op2 \"Of\"\n                  :op3 \"Oxford\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"University Of Oxford\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/University_of_Oxford\")))\n",
    "relations": [
      "dbo:officialSchoolColour"
    ],
    "id": 48
  },
  "train_49": {
    "text": "How many films did Hal Roach produce?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> }",
    "extended_amr": "(p2 / produce-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hal\"\n                  :op2 \"Roach\"))\n      :ARG1 (f / film\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Hal Roach\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Hal_Roach\")))\n",
    "relations": [
      "dbo:producer"
    ],
    "id": 49
  },
  "train_50": {
    "text": "Give me all Danish movies.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
    "extended_amr": "(g / give-01\n      :ARG1 (m / movie\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Denmark\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Denmark\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Denmark\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"movie\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Film\")))\n",
    "relations": [
      "dbo:country"
    ],
    "id": 50
  },
  "train_51": {
    "text": "What is the most frequent cause of death?",
    "sparql": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
    "extended_amr": "(c / cause-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (d / die-01)\n      :ARG1-of (h / have-degree-91\n            :ARG2 (f / frequent-02)\n            :ARG3 (m / most))\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:deathCause"
    ],
    "id": 51
  },
  "train_52": {
    "text": "Who are the four youngest MVP basketball players?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/birthDate> ?date ; <http://dbpedia.org/property/highlights> ?h FILTER regex(?h, \"MVP\") } ORDER BY DESC(?date) OFFSET 0 LIMIT 4",
    "extended_amr": "(p / person\n\t:mod (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Basketball Players\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/BasketballPlayer\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Four Youngest MVP Basketball Players\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/National_Basketball_Players_Association\")))\n",
    "relations": [
      "dbp:highlights",
      "dbo:birthDate"
    ],
    "id": 52
  },
  "train_53": {
    "text": "Give me all companies in Munich.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Munich> } }",
    "extended_amr": "(g / give-01\n      :ARG1 (c / company\n            :location (c2 / city\n                  :name (n / name\n                        :op1 \"Munich\")))\n     :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"company\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Company\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Munich\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Munich\")))\n",
    "relations": [
      "dbo:headquarter",
      "dbo:locationCity",
      "dbo:location"
    ],
    "id": 53
  },
  "train_54": {
    "text": "Give me the capitals of all countries that the Himalayas run through.",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
    "extended_amr": "(g / give-01\n      :ARG1 (c / city\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (c3 / capital)))\n      :ARG2 (i / i)\n      :mode imperative\n      :rel (c2 / country\n            :ARG1-of (r / run-04\n                  :path (w / world-region\n                        :name (n / name\n                              :op1 \"Himalayas\"))))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Himalayas\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Himalayas\")))\n",
    "relations": [
      "dbo:country",
      "dbo:capital"
    ],
    "id": 54
  },
  "train_55": {
    "text": "How many movies did Park Chan-wook direct?",
    "sparql": "SELECT COUNT(DISTINCT ?uri AS ?uri) WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Park_Chan-wook> . }",
    "extended_amr": "(d / direct-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chan-wook\"))\n      :ARG1 (m / movie\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Chan-wook\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Park_Chan-wook\")))\n",
    "relations": [
      "dbo:director"
    ],
    "id": 55
  },
  "train_56": {
    "text": "Which rivers flow into a German lake?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> . ?x <http://dbpedia.org/ontology/inflow> ?uri ; a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> }",
    "extended_amr": "(f / flow-01\n      :ARG1 (r / river\n            :mod (a / amr-unknown))\n      :destination (l / lake\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Germany\")))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"lake\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Germany\")))\n",
    "relations": [
      "dbo:inflow",
      "dbo:country"
    ],
    "id": 56
  },
  "train_57": {
    "text": "How many airlines are there?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> }",
    "extended_amr": "(a2 / airline\n      :quant (a / amr-unknown)\n\t:entities ( el / entity_list))\n",
    "relations": [],
    "id": 57
  },
  "train_58": {
    "text": "Give me all islands that belong to Japan.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
    "extended_amr": "(g / give-01\n      :ARG1 (i2 / island\n            :ARG0-of (b / belong-01\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"Japan\")))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Japan\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Japan\")))\n",
    "relations": [
      "dbo:country"
    ],
    "id": 58
  },
  "train_59": {
    "text": "How many inhabitants does Maribor have?",
    "sparql": "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Maribor> <http://dbpedia.org/ontology/populationTotal> ?num }",
    "extended_amr": "(h / have-03\n      :ARG0 (c / city\n            :name (n / name\n                  :op1 \"Maribor\"))\n      :ARG1 (p / person\n            :ARG0-of (i / inhabit-01)\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Maribor\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Maribor\")))\n",
    "relations": [
      "dbo:populationTotal"
    ],
    "id": 59
  },
  "train_60": {
    "text": "Give me all Apollo 14 astronauts.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/mission> <http://dbpedia.org/resource/Apollo_14> }",
    "extended_amr": "(g / give-01\n      :ARG1 (a2 / astronaut\n            :mod (s / spaceship\n                  :name (n / name\n                        :op1 \"Apollo\"\n                        :op2 \"14\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"astronaut\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Apollo_14\")))\n",
    "relations": [
      "dbo:mission"
    ],
    "id": 60
  },
  "train_61": {
    "text": "Which companies have more than 1 million employees?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/numberOfEmployees> ?n } UNION { ?uri <http://dbpedia.org/property/numEmployees> ?n } FILTER ( ?n > 1000000 ) }",
    "extended_amr": "(h / have-03\n      :ARG1 (c / company\n            :mod (a / amr-unknown))\n      :rel (m / more-than\n            :op1 1000000)\n      :rel (e / employ-01)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"company\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Companies_listed_on_the_New_York_Stock_Exchange_(J)\")))\n",
    "relations": [
      "dbp:numEmployees",
      "dbo:numberOfEmployees"
    ],
    "id": 61
  },
  "train_62": {
    "text": "In which films directed by Garry Marshall was Julia Roberts starring?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
    "extended_amr": "(s / star-01\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Julia\"\n                  :op2 \"Roberts\"))\n      :ARG2 (f / film\n            :ARG1-of (d / direct-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Garry\"\n                              :op2 \"Marshall\")))\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Julia Roberts\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Garry_Marshall\")))\n",
    "relations": [
      "dbo:director",
      "dbo:starring"
    ],
    "id": 62
  },
  "train_63": {
    "text": "Give me all soccer clubs in the Premier League.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Premier_League> }",
    "extended_amr": "(g / give-01\n      :ARG1 (c / club\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (l / league\n                        :name (n / name\n                              :op1 \"Premier\"\n                              :op2 \"League\")))\n            :mod (s / soccer)\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Premier League\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Premier_League\")))\n",
    "relations": [
      "dbo:league"
    ],
    "id": 63
  },
  "train_64": {
    "text": "What is the highest place of the Urals?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ural_Mountains> <http://dbpedia.org/property/highest> ?uri }",
    "extended_amr": "(p / place\n      :ARG1-of (h / have-degree-91\n            :ARG2 (h2 / high-02))\n      :domain (a / amr-unknown)\n      :part-of (w / world-region\n            :name (n / name\n                  :op1 \"Urals\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Urals\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Urals_Mussorgsky_State_Conservatoire\")))\n",
    "relations": [
      "dbp:highest"
    ],
    "id": 64
  },
  "train_65": {
    "text": "Who is the governor of Wyoming?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wyoming> <http://dbpedia.org/property/governor> ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (s / state\n                  :name (n / name\n                        :op1 \"Wyoming\"))\n            :ARG2 (g / governor))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Wyoming\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Wyoming\")))\n",
    "relations": [
      "dbp:governor"
    ],
    "id": 65
  },
  "train_66": {
    "text": "Where did the architect of the Eiffel Tower study?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eiffel_Tower> <http://dbpedia.org/ontology/architect> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri }",
    "extended_amr": "(s / study-01\n      :ARG0 (a2 / architect\n            :topic (t / tower\n                  :name (n / name\n                        :op1 \"Eiffel\"\n                        :op2 \"Tower\")))\n      :location (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Eiffel Tower\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Eiffel_Tower\")))\n",
    "relations": [
      "dbo:architect",
      "dbp:almaMater"
    ],
    "id": 66
  },
  "train_67": {
    "text": "Give me all world heritage sites designated within the past two years.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WorldHeritageSite> . { ?uri <http://dbpedia.org/property/year> '2013'^^xsd:integer . } UNION { ?uri <http://dbpedia.org/property/year> '2014'^^xsd:integer . } }",
    "extended_amr": "(g / give-01\n      :ARG1 (s / site\n            :ARG1-of (d / designate-01\n                  :ARG0 o\n                  :time (a2 / after\n                        :op1 (n / now)))\n            :mod (o / organization\n                  :name (n2 / name\n                        :op1 \"World\"\n                        :op2 \"Heritage\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n      :rel (t / temporal-quantity\n            :quant 2\n            :unit (y / year))\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbp:year"
    ],
    "id": 67
  },
  "train_68": {
    "text": "Give me all actors who were born in Paris after 1950.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Paris> . ?uri <http://dbpedia.org/ontology/birthDate> ?date . FILTER ( ?date >= xsd:dateTime('1950-12-31T00:00:00Z')) }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG0-of (a3 / act-01)\n            :ARG1-of (b / bear-02\n                  :location (c / city\n                        :name (n / name\n                              :op1 \"Paris\"))\n                  :time (a2 / after\n                        :op1 (d / date-entity\n                              :year 1950)))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Paris\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Paris\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"give-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/1950\")))\n",
    "relations": [
      "dbo:birthPlace",
      "dbo:birthDate"
    ],
    "id": 68
  },
  "train_69": {
    "text": "Which movies star both Liz Taylor and Richard Burton?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
    "extended_amr": "(s / star-01\n      :ARG1 (a2 / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Liz\"\n                        :op2 \"Taylor\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Richard\"\n                        :op2 \"Burton\")))\n      :ARG2 (m / movie\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Liz Taylor\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Liz:_The_Elizabeth_Taylor_Story\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Richard Burton\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Richard_Burton\")))\n",
    "relations": [
      "dbo:starring"
    ],
    "id": 69
  },
  "train_70": {
    "text": "Give me all Australian nonprofit organizations.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
    "extended_amr": "(g / give-01\n      :ARG1 (o / organization\n            :ARG0-of (p / profit-01\n                  :polarity -)\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Australia\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"organization\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Australia\")))\n",
    "relations": [
      "dbo:location",
      "dbo:country",
      "dbo:type",
      "dbo:locationCountry"
    ],
    "id": 70
  },
  "train_71": {
    "text": "Which pope succeeded John Paul II?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_John_Paul_II> <http://dbpedia.org/property/successor> ?uri }",
    "extended_amr": "(s / succeed-02\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (p3 / pope))\n            :mod (a / amr-unknown))\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Paul\"\n                  :op3 \"II\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"John Paul II\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ii\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"John Paul II\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_Paul\")))\n",
    "relations": [
      "dbp:successor"
    ],
    "id": 71
  },
  "train_72": {
    "text": "Give me all ESA astronauts.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/property/type> <http://dbpedia.org/resource/European_Space_Agency> }",
    "extended_amr": "(g / give-01\n      :ARG1 (a2 / astronaut\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (g2 / goverment-organization\n                        :name (n / name\n                              :op1 \"ESA\")))\n            :mod (a / all))\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"ESA\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/European_Free_Trade_Association_Surveillance_Authority\")))\n",
    "relations": [
      "dbp:type"
    ],
    "id": 72
  },
  "train_73": {
    "text": "Who was president of Pakistan in 1978?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/President_of_Pakistan> ; <http://dbpedia.org/property/years> 1978 }",
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c / country\n                  :name (n / name\n                        :op1 \"Pakistan\"))\n            :ARG2 (p2 / president)\n            :time (d / date-entity\n                  :year 1978))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Pakistan\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Pakistan\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"have-org-role-91\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/1978\")))\n",
    "relations": [
      "dbp:years",
      "dbp:title"
    ],
    "id": 73
  },
  "train_74": {
    "text": "Who is the owner of Rolls-Royce?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolls-Royce_Motors> <http://dbpedia.org/ontology/owner> ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (o / own-01\n            :ARG1 (c / company\n                  :name (n / name\n                        :op1 \"Rolls-Royce\")))\n      :domain (a / amr-unknown)\n      :rel \"Union\"\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Rolls-Royce\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Rolls-Royce\")))\n",
    "relations": [
      "dbo:owner"
    ],
    "id": 74
  },
  "train_75": {
    "text": "How many museums does Paris have?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Paris> }",
    "extended_amr": "(h / have-03\n      :ARG0 (c / city\n            :name (n / name\n                  :op1 \"Paris\"))\n      :ARG1 (m / museum\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"museum\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Museums_in_Aalborg\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Paris\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Paris\")))\n",
    "relations": [
      "dbo:location"
    ],
    "id": 75
  },
  "train_76": {
    "text": "Where was JFK assassinated?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (a / assassinate-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"JFK\")))\n      :ARG2 (a2 / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"JFK\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_F._Kennedy_International_Airport\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"assassinate-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Assassinated_Catholic_priests_in_Guatemala\")))\n",
    "relations": [
      "dbo:deathPlace"
    ],
    "id": 76
  },
  "train_77": {
    "text": "Give me all federal chancellors of Germany.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/office> \"Chancellor of Germany\" } UNION { ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Chancellor_of_Germany> } }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG1-of (i3 / include-91)\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n      :rel (c / chancellor\n            :mod (f / federal))\n      :rel (c2 / country\n            :name (n / name\n                  :op1 \"Germany\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Germany\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Germany\")))\n",
    "relations": [
      "dbp:office",
      "dbo:office"
    ],
    "id": 77
  },
  "train_78": {
    "text": "Show me everyone who was born on Halloween.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/birthDate> ?date } UNION { ?uri <http://dbpedia.org/property/birthDate> ?date } <http://dbpedia.org/resource/Halloween> <http://dbpedia.org/property/date> ?date }",
    "extended_amr": "(s / show-01\n      :ARG1 (e / everyone\n            :ARG1-of (b / bear-02\n                  :time (f / festival\n                        :name (n / name\n                              :op1 \"Halloween\"))))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Halloween\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Halloween\")))\n",
    "relations": [
      "dbp:date",
      "dbo:birthDate",
      "dbp:birthDate"
    ],
    "id": 78
  },
  "train_79": {
    "text": "Which beer originated in Ireland?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Beer> ; <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Beer_in_Ireland> }",
    "extended_amr": "(o / originate-01\n      :ARG1 (b / beer\n            :mod (a / amr-unknown))\n      :location (c / country\n            :name (n / name\n                  :op1 \"Ireland\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Ireland\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ireland\")))\n",
    "relations": [
      "dbp:type",
      "dbo:origin"
    ],
    "id": 79
  },
  "train_80": {
    "text": "To which countries does the Himalayan mountain system extend?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
    "extended_amr": "(e / extend-01\n      :ARG1 (s / system\n            :mod (m / mountain\n                  :name (n / name\n                        :op1 \"Himalayan\")))\n      :ARG4 (c / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Himalayan\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Himalayan\")))\n",
    "relations": [
      "dbo:country"
    ],
    "id": 80
  },
  "train_81": {
    "text": "Which actors were born in Germany?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
    "extended_amr": "(b / bear-02\n      :ARG1 (p / person\n            :mod (a / amr-unknown))\n      :location (c / country\n            :name (n / name\n                  :op1 \"Germany\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Germany\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Germany\")))\n",
    "relations": [
      "dbo:birthPlace",
      "dbo:country"
    ],
    "id": 81
  },
  "train_82": {
    "text": "How much carbs does peanut butter have?",
    "sparql": "SELECT DISTINCT ?carbs WHERE { <http://dbpedia.org/resource/Peanut_butter> <http://dbpedia.org/property/carbs> ?carbs }",
    "extended_amr": "(h / have-03\n      :ARG0 (b / butter\n            :mod (p / peanut))\n      :ARG1 (c / carb\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"carb\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Carby\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"butter\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Peanut_butter\")))\n",
    "relations": [
      "dbp:carbs"
    ],
    "id": 82
  },
  "train_83": {
    "text": "Who produced the most films?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?film <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?film <http://dbpedia.org/ontology/producer> ?uri . } ORDER BY DESC(COUNT(?film)) OFFSET 0 LIMIT 1",
    "extended_amr": "(p / produce-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (f / film)\n      :rel (m / most)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:producer"
    ],
    "id": 83
  },
  "train_84": {
    "text": "How many employees does Google have?",
    "sparql": "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Google> <http://dbpedia.org/ontology/numberOfEmployees> ?num }",
    "extended_amr": "(h / have-03\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Google\"))\n      :ARG1 (p / person\n            :ARG1-of (e / employ-01)\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Google\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Google\")))\n",
    "relations": [
      "dbo:numberOfEmployees"
    ],
    "id": 84
  },
  "train_85": {
    "text": "Give me all actors who were born in Berlin.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Berlin> }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG0-of (a2 / act-01)\n            :ARG1-of (b / bear-02\n                  :location (c / city\n                        :name (n / name\n                              :op1 \"Berlin\")))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Berlin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Berlin\")))\n",
    "relations": [
      "dbo:birthPlace"
    ],
    "id": 85
  },
  "train_86": {
    "text": "Who created Goofy?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
    "extended_amr": "(c / create-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (a2 / animal\n            :name (n / name\n                  :op1 \"Goofy\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Goofy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Goofy\")))\n",
    "relations": [
      "dbo:creator"
    ],
    "id": 86
  },
  "train_87": {
    "text": "Which music albums contain the song Last Christmas?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?single <http://dbpedia.org/ontology/album> ?uri ; <http://www.w3.org/2000/01/rdf-schema#label> \"Last Christmas\"@en }",
    "extended_amr": "(c / contain-01\n      :ARG0 (a2 / album\n            :mod (m / music)\n            :mod (a / amr-unknown))\n      :ARG1 (s / song\n            :name (n / name\n                  :op1 \"Last\"\n                  :op2 \"Christmas\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Last Christmas\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Last_Song_(film)\")))\n",
    "relations": [
      "dbo:album"
    ],
    "id": 87
  },
  "train_88": {
    "text": "When was Alberta admitted as province?",
    "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Alberta> <http://dbpedia.org/property/admittancedate> ?date }",
    "extended_amr": "(a2 / admit-02\n      :ARG1 (p / province\n            :name (n / name\n                  :op1 \"Alberta\"))\n      :manner (p2 / province)\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Alberta\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Alberta\")))\n",
    "relations": [
      "dbp:admittancedate"
    ],
    "id": 88
  },
  "train_89": {
    "text": "How many missions does the Soyuz programme have?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/property/programme> <http://dbpedia.org/resource/Soyuz_programme> }",
    "extended_amr": "(h / have-03\n      :ARG0 (p / programme\n            :name (n / name\n                  :op1 \"Soyuz\"))\n      :ARG1 (m / mission-01\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Soyuz\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Soyuz_programme\")))\n",
    "relations": [
      "dbp:programme"
    ],
    "id": 89
  },
  "train_90": {
    "text": "Give me all the TV shows with Neil Patrick Harris.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
    "extended_amr": "(g / give-01\n      :ARG1 (s / show-04\n            :ARG3 (t / television)\n            :mod (a / all)\n            :prep-with (p / person\n                  :name (n / name\n                        :op1 \"Neil\"\n                        :op2 \"Patrick\"\n                        :op3 \"Harris\")))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"give-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Tv_test_pattern\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Neil Patrick Harris\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Neil_Patrick_Harris\")))\n",
    "relations": [
      "dbo:starring"
    ],
    "id": 90
  },
  "train_91": {
    "text": "When were the Hells Angels founded?",
    "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Hells_Angels> <http://dbpedia.org/property/founded> ?date }",
    "extended_amr": "(b / be-temporally-at-91\n      :ARG1 (f / found-01\n            :ARG1 (c / club\n                  :name (n / name\n                        :op1 \"Hells\"\n                        :op2 \"Angels\")))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Hells Angels\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Hells_Angels\")))\n",
    "relations": [
      "dbp:founded"
    ],
    "id": 91
  },
  "train_92": {
    "text": "What is the net income of Apple?",
    "sparql": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
    "extended_amr": "(i / income\n      :domain (a / amr-unknown)\n      :mod (n / net)\n      :poss (c / company\n            :name (n2 / name\n                  :op1 \"Apple\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Apple\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Apple_Inc.\")))\n",
    "relations": [
      "dbo:netIncome"
    ],
    "id": 92
  },
  "train_93": {
    "text": "Give me all Swedish holidays.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
    "extended_amr": "(g / give-01\n      :ARG1 (h / holiday\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Sweden\")))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"holiday\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sweden\")))\n",
    "relations": [
      "dbo:country"
    ],
    "id": 93
  },
  "train_94": {
    "text": "In which city was the former Dutch queen Juliana buried?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juliana_of_the_Netherlands> <http://dbpedia.org/property/burialPlace> ?uri . ?uri a <http://dbpedia.org/ontology/Settlement> }",
    "extended_amr": "(b / bury-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c2 / country\n                        :name (n / name\n                              :op1 \"Netherlands\"))\n                  :ARG2 (q / queen))\n            :name (n2 / name\n                  :op1 \"Juliana\"))\n      :ARG2 (c / city\n            :mod (a / amr-unknown))\n      :rel (f / former)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Juliana\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Juliana_Maria_of_Brunswick-Wolfenb\u00fcttel\")))\n",
    "relations": [
      "dbp:burialPlace"
    ],
    "id": 94
  },
  "train_95": {
    "text": "List all the musicals with music by Leonard Bernstein.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Musical> ; <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Leonard_Bernstein> }",
    "extended_amr": "(l / list-01\n      :ARG1 (m / musical\n            :mod (a / all)\n            :prep-with (m2 / music\n                  :source (p / person\n                        :name (n / name\n                              :op1 \"Leonard\"\n                              :op2 \"Bernstein\"))))\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Leonard Bernstein\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Leonard_Bernstein\")))\n",
    "relations": [
      "dbo:musicBy"
    ],
    "id": 95
  },
  "train_96": {
    "text": "Give me all companies in the advertising industry.",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
    "extended_amr": "(g / give-01\n      :ARG1 (i / i)\n      :ARG1 (c / company\n            :mod (a / all)\n            :part-of (i2 / industry\n                  :mod (a2 / advertise-01)))\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"company\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Companies_listed_on_the_New_York_Stock_Exchange_(J)\")))\n",
    "relations": [
      "dbo:industry"
    ],
    "id": 96
  },
  "train_97": {
    "text": "What is the largest metropolitan area in Washington state?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Washington_(state)> <http://dbpedia.org/property/largestmetro> ?uri }",
    "extended_amr": "(a2 / area\n      :ARG1-of (h / have-degree-91\n            :ARG2 (l / large)\n            :ARG5 (a3 / area))\n      :domain (a / amr-unknown)\n      :mod (m / metropolitan)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"area\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Metropolitan_area\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"large\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Washington\")))\n",
    "relations": [
      "dbp:largestmetro"
    ],
    "id": 97
  },
  "train_98": {
    "text": "Who killed John Lennon?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/property/conviction> <http://dbpedia.org/resource/Death_of_John_Lennon> }",
    "extended_amr": "(k / kill-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Lennon\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"John Lennon\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_Lennon\")))\n",
    "relations": [
      "dbp:conviction"
    ],
    "id": 98
  },
  "train_99": {
    "text": "Which writers studied in Istanbul?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> { ?uri <http://dbpedia.org/ontology/almaMater> ?x } UNION { ?uri <http://dbpedia.org/ontology/education> ?x } { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Istanbul> } UNION { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Istanbul> } }",
    "extended_amr": "(s / study-01\n      :ARG0 (p / person\n            :ARG0-of (w / write-01)\n            :mod (a / amr-unknown))\n      :location (c / city\n            :name (n / name\n                  :op1 \"Istanbul\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Istanbul\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Istanbul\")))\n",
    "relations": [
      "dbp:city",
      "dbo:education",
      "dbo:city",
      "dbo:almaMater"
    ],
    "id": 99
  },
  "train_100": {
    "text": "Give me all Australian metalcore bands.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Band> ; <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Metalcore> { ?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/hometown> ?h . ?h <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
    "extended_amr": "(g / give-01\n      :ARG1 (b / band\n            :mod (m / metalcore)\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Australia\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"band\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Australia\")))\n",
    "relations": [
      "dbo:genre",
      "dbo:country",
      "dbo:hometown"
    ],
    "id": 100
  },
  "train_101": {
    "text": "Which countries adopted the Euro?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Euro> } UNION { ?uri <http://dbpedia.org/property/currencyCode> \"EUR\"@en } }",
    "extended_amr": "(a2 / adopt-01\n      :ARG0 (c / country\n            :mod (a / amr-unknown))\n      :ARG1 (e / euro)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"euro\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Euro\")))\n",
    "relations": [
      "dbp:currencyCode",
      "dbo:currency"
    ],
    "id": 101
  },
  "train_102": {
    "text": "Give me all types of eating disorders.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/class/yago/WikicatEatingDisorders> }",
    "extended_amr": "(g / give-01\n      :ARG1 (d / disease\n            :mod (t / type\n                  :mod (a / all))\n            :name (n / name\n                  :op1 \"Eating\"\n                  :op2 \"Disorders\"))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Eating Disorders\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Disorders_of_consciousness\")))\n",
    "relations": [],
    "id": 102
  },
  "train_103": {
    "text": "Was Marc Chagall a jew?",
    "sparql": "ASK WHERE { <http://dbpedia.org/resource/Marc_Chagall> <http://dbpedia.org/property/ethnicity> \"Jewish\"@en }",
    "extended_amr": "(p2 / person\n      :domain (p / person\n            :name (n / name\n                  :op1 \"Marc\"\n                  :op2 \"Chagall\"))\n      :mod (r / religious-group\n            :name (n2 / name\n                  :op1 \"Jew\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Marc Chagall\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Marc_Chagall\")))\n",
    "relations": [
      "dbp:ethnicity"
    ],
    "id": 103
  },
  "train_104": {
    "text": "What was Brazil's lowest rank in the FIFA World Ranking?",
    "sparql": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Brazil_national_football_team> <http://dbpedia.org/property/fifaMin> ?n }",
    "extended_amr": "(r / rank-01\n      :ARG1 (c / country\n            :name (n / name\n                  :op1 \"Brazil\"))\n      :ARG2 (h / have-degree-91\n            :ARG1 (a / amr-unknown)\n            :ARG2 (l / low-04))\n      :ARG5 (o / organization\n            :name (n2 / name\n                  :op1 \"FIFA\"\n                  :op2 \"World\"\n                  :op3 \"Ranking\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Brazil\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Brazil\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"rank-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/RANK\")\n\t\t:entity (all2/ linked_entity\n\t\t\t\t:surface_form \"FIFA World Ranking\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/FIFA\")\n\t\t:entity (all3/ linked_entity\n\t\t\t\t:surface_form \"FIFA World Ranking\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/World\")))\n",
    "relations": [
      "dbp:fifaMin"
    ],
    "id": 104
  },
  "train_105": {
    "text": "How many films did Leonardo DiCaprio star in?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
    "extended_amr": "(s / star-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Leonardo\"\n                  :op2 \"DiCaprio\"))\n      :ARG2 (f / film\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Leonardo DiCaprio\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Leonardo_DiCaprio\")))\n",
    "relations": [
      "dbo:starring"
    ],
    "id": 105
  },
  "train_106": {
    "text": "Was Margaret Thatcher a chemist?",
    "sparql": "ASK WHERE { <http://dbpedia.org/resource/Margaret_Thatcher> <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Chemist> }",
    "extended_amr": "(c / chemist\n      :domain (p / person\n            :name (n / name\n                  :op1 \"Margaret\"\n                  :op2 \"Thatcher\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Margaret Thatcher\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Margaret_Thatcher\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"chemist\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Chemist\")))\n",
    "relations": [
      "dbo:profession"
    ],
    "id": 106
  },
  "train_107": {
    "text": "Which U.S. states are in the same time zone as Utah?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Utah> <http://dbpedia.org/property/timezone> ?x . ?uri a <http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates> ; <http://dbpedia.org/property/timezone> ?x FILTER ( ?uri != <http://dbpedia.org/resource/Utah> ) }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (s / state\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"United\"\n                        :op2 \"States\"))\n            :mod (a / amr-unknown))\n      :ARG2 (t / time\n            :ARG1-of (s2 / same-01\n                  :ARG2 (s3 / state\n                        :name (n2 / name\n                              :op1 \"Utah\")))\n            :mod (z / zone))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"state\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Usk,_Washington\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Utah\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Utah\")))\n",
    "relations": [
      "dbp:timezone"
    ],
    "id": 107
  },
  "train_108": {
    "text": "Give me all books written by Danielle Steel.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Book> ; <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Danielle_Steel> }",
    "extended_amr": "(g / give-01\n      :ARG1 (b / book\n            :ARG1-of (w / write-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Danielle\"\n                              :op2 \"Steel\")))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Danielle Steel\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Danielle_Steel\")))\n",
    "relations": [
      "dbo:author"
    ],
    "id": 108
  },
  "train_109": {
    "text": "Which country has the most official languages?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/property/officialLanguages> ?language . } ORDER BY DESC(COUNT(?language)) OFFSET 0 LIMIT 1",
    "extended_amr": "(h / have-03\n      :ARG0 (c / country\n            :mod (a / amr-unknown))\n      :ARG1 (l / language\n            :mod (o / official))\n      :rel (m / most)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbp:officialLanguages"
    ],
    "id": 109
  },
  "train_110": {
    "text": "What is the total amount of men and women serving in the FDNY?",
    "sparql": "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/New_York_City_Fire_Department> <http://dbpedia.org/property/employees> ?num }",
    "extended_amr": "(o / organization\n      :name (n / name\n            :op3 \"City\")\n      :rel \"Fire\"\n      :rel (h / have-quant-91\n            :ARG1 (a / and\n                  :ARG0-of (s / serve-01\n                        :ARG2 (o2 / organization\n                              :name (n2 / name\n                                    :op1 \"FDNY\")))\n                  :op1 (m / man)\n                  :op2 (w / woman))\n            :ARG3 (t / total))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"FDNY\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/FDNY_Racing\")))\n",
    "relations": [
      "dbp:employees"
    ],
    "id": 110
  },
  "train_111": {
    "text": "Which actor played Chewbacca?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chewbacca> <http://dbpedia.org/ontology/portrayer> ?uri }",
    "extended_amr": "(p2 / play-02\n      :ARG0 (p / person\n            :ARG0-of (a2 / act-01)\n            :mod (a / amr-unknown))\n      :ARG1 (p3 / person\n            :name (n / name\n                  :op1 \"Chewbacca\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Chewbacca\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Chewbacca\")))\n",
    "relations": [
      "dbo:portrayer"
    ],
    "id": 111
  },
  "train_112": {
    "text": "Give me all libraries established earlier than 1400.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Library> ; <http://dbpedia.org/property/established> ?year FILTER ( ?year < 1400 ) }",
    "extended_amr": "(g / give-01\n      :ARG1 (l / library\n            :ARG1-of (e / establish-01\n                  :time (b / before\n                        :op1 (d / date-entity\n                              :year 1400)))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"library\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Libraries_in_Brighton_and_Hove\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"give-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/1400\")))\n",
    "relations": [
      "dbp:established"
    ],
    "id": 112
  },
  "train_113": {
    "text": "Which programming languages were influenced by Perl?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> { ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Perl> } UNION { <http://dbpedia.org/resource/Perl> <http://dbpedia.org/ontology/influenced> ?uri } }",
    "extended_amr": "(i / influence-01\n      :ARG0 (l2 / language\n            :medium-of (p / program-01)\n            :name (n / name\n                  :op1 \"Perl\"))\n      :ARG1 (l / language\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Perl\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Perl\")))\n",
    "relations": [
      "dbo:influenced",
      "dbo:influencedBy"
    ],
    "id": 113
  },
  "train_114": {
    "text": "In which U.S. state is Mount McKinley located?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_McKinley> dbo:wikiPageRedirects ?x . ?x <http://dbpedia.org/ontology/locatedInArea> ?uri. ?uri rdf:type yago:WikicatStatesOfTheUnitedStates }",
    "extended_amr": "(l / locate-01\n      :ARG1 (m / mount\n            :name (n2 / name\n                  :op1 \"Mount\"\n                  :op2 \"McKinley\"))\n      :location (s / state\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"United\"\n                        :op2 \"States\"))\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Mount McKinley\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_States\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Mount McKinley\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Denali\")))\n",
    "relations": [
      "dbo:locatedInArea",
      "dbo:wikiPageRedirects"
    ],
    "id": 114
  },
  "train_115": {
    "text": "What airlines are part of the SkyTeam alliance?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Airline> { ?uri <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/SkyTeam> } UNION { ?uri <http://dbpedia.org/ontology/Alliance> <http://dbpedia.org/resource/SkyTeam> } }",
    "extended_amr": "(a2 / airline\n      :mod (a / amr-unknown)\n      :part-of (a3 / alliance\n            :name (n / name\n                  :op1 \"SkyTeam\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"SkyTeam\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/SkyTeam\")))\n",
    "relations": [
      "dbo:alliance"
    ],
    "id": 115
  },
  "train_116": {
    "text": "Which ships were called after Benjamin Franklin?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/shipNamesake> <http://dbpedia.org/resource/Benjamin_Franklin> }",
    "extended_amr": "(c / call-01\n      :ARG1 (s / ship\n            :mod (a / amr-unknown))\n      :ARG2 (p / person\n            :name (n / name\n                  :op1 \"Benjamin\"\n                  :op2 \"Franklin\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Benjamin Franklin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Benjamin_Franklin\")))\n",
    "relations": [
      "dbp:shipNamesake"
    ],
    "id": 116
  },
  "train_117": {
    "text": "Give me all Methodist politicians.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Politician> ; <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Methodism> }",
    "extended_amr": "(g / give-01\n      :ARG1 (r / religious-group\n            :mod (a / all)\n            :name (n / name\n                  :op1 \"Methodist\"\n                  :op2 \"Politicians\"))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Methodist Politicians\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Chicago_Politicians\")))\n",
    "relations": [
      "dbo:religion"
    ],
    "id": 117
  },
  "train_118": {
    "text": "What other books have been written by the author of The Fault in Our Stars?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?books WHERE { ?books dbo:author <http://dbpedia.org/resource/John_Green_(author)> }",
    "extended_amr": "(w / write-01\n      :ARG0 (p / person\n            :ARG0-of (a2 / author-01))\n      :ARG1 (b / book\n            :mod (o / other)\n            :mod (a / amr-unknown))\n      :rel (b2 / book\n            :name (n / name\n                  :op1 \"The\"\n                  :op2 \"Fault\"\n                  :op3 \"in\"\n                  :op4 \"Our\"\n                  :op5 \"Stars\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"The Fault in Our Stars\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Fault_in_Our_Stars\")))\n",
    "relations": [
      "dbo:author"
    ],
    "id": 118
  },
  "train_119": {
    "text": "What is the highest mountain?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
    "extended_amr": "(m / mountain\n      :ARG1-of (h / have-degree-91\n            :ARG2 (h2 / high-02))\n      :rel (a / amr-unknown)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:elevation"
    ],
    "id": 119
  },
  "train_120": {
    "text": "Which poet wrote the most books?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Poet> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
    "extended_amr": "(w / write-01\n      :ARG0 (p / poet\n            :mod (a / amr-unknown))\n      :ARG1 (b / book)\n      :rel (m / most)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:author",
      "dbo:occupation"
    ],
    "id": 120
  },
  "train_121": {
    "text": "Which programming languages influenced Javascript?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> ; <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/JavaScript> }",
    "extended_amr": "(i / influence-01\n      :ARG0 (l / language\n            :medium-of (p / program-01)\n            :mod (a / amr-unknown))\n      :ARG1 (l2 / language\n            :name (n / name\n                  :op1 \"Javascript\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Javascript\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/JavaScript\")))\n",
    "relations": [
      "dbo:influenced"
    ],
    "id": 121
  },
  "train_122": {
    "text": "Which musician wrote the most books?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
    "extended_amr": "(w / write-01\n      :ARG0 (m / musician\n            :mod (a / amr-unknown))\n      :ARG1 (b / book)\n      :rel (m2 / most)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:author",
      "dbo:occupation"
    ],
    "id": 122
  },
  "train_123": {
    "text": "Which films starring Clint Eastwood did he direct himself?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
    "extended_amr": "(d / direct-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Clint\"\n                  :op2 \"Eastwood\"))\n      :ARG1 (f / film\n            :ARG2-of (s / star-01\n                  :ARG1 p)\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Clint Eastwood\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Clint_Eastwood\")))\n",
    "relations": [
      "dbo:starring",
      "dbo:director"
    ],
    "id": 123
  },
  "train_124": {
    "text": "Which software has been developed by organizations founded in California?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Software> . ?company a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/developer> ?company . ?company <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/California> }",
    "extended_amr": "(d / develop-02\n      :ARG0 (o / organization\n            :ARG1-of (f / found-01\n                  :location (s2 / state\n                        :name (n / name\n                              :op1 \"California\"))))\n      :ARG1 (s / software\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"software\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Software_Publishing_Corporation\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"California\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/California\")))\n",
    "relations": [
      "dbo:foundationPlace",
      "dbo:developer"
    ],
    "id": 124
  },
  "train_125": {
    "text": "Which instruments does Cat Stevens play?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cat_Stevens> <http://dbpedia.org/ontology/instrument> ?uri }",
    "extended_amr": "(p2 / play-11\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Cat\"\n                  :op2 \"Stevens\"))\n      :ARG2 (i / instrument\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Cat Stevens\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cat_Stevens\")))\n",
    "relations": [
      "dbo:instrument"
    ],
    "id": 125
  },
  "train_126": {
    "text": "How many airlines are members of the Star Alliance?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> ; <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/Star_Alliance> }",
    "extended_amr": "(h / have-org-role-91\n      :ARG0 (a2 / airline\n            :quant (a / amr-unknown))\n      :ARG1 (o / organization\n            :name (n / name\n                  :op1 \"Star\"\n                  :op2 \"Alliance\"))\n      :ARG2 (m / member)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Star Alliance\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Star_Alliance\")))\n",
    "relations": [
      "dbo:alliance"
    ],
    "id": 126
  },
  "train_127": {
    "text": "Give me all actors called Baldwin.",
    "sparql": "PREFIX foaf:<http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?uri WHERE { ?uri foaf:surname 'Baldwin'@en . { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Actor> . } UNION { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . } }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG1-of (c / call-01\n                  :ARG2 (p2 / person\n                        :name (n / name\n                              :op1 \"Baldwin\"))))\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Baldwin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Baldwin\")))\n",
    "relations": [
      "dbo:occupation"
    ],
    "id": 127
  },
  "train_128": {
    "text": "Who wrote The Hunger Games?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Hunger_Games> <http://dbpedia.org/property/author> ?uri }",
    "extended_amr": "(w / write-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (b / book\n            :name (n / name\n                  :op1 \"Hunger\"\n                  :op2 \"Games\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Hunger Games\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Hunger_Games\")))\n",
    "relations": [
      "dbp:author"
    ],
    "id": 128
  },
  "train_129": {
    "text": "For which label did Elvis record his first album?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
    "extended_amr": "(r / record-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Elvis\"))\n      :ARG1 (a2 / album\n            :ord (o / ordinal-entity\n                  :quant 1))\n      :beneficiary (l / label\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Elvis\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Elvis_(1973_album)\")))\n",
    "relations": [
      "dbo:releaseDate",
      "dbo:recordLabel",
      "dbo:artist"
    ],
    "id": 129
  },
  "train_130": {
    "text": "Is Christian Bale starring in Batman Begins?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Batman_Begins dbo:starring res:Christian_Bale }",
    "extended_amr": "(s / star-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Christian\"\n                  :op2 \"Bale\"))\n      :ARG2 (w / work-of-art\n            :name (n2 / name\n                  :op1 \"Batman\"\n                  :op2 \"Begins\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Christian Bale\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Christian_Bale\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Batman Begins\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Batman_Begins\")))\n",
    "relations": [
      "dbo:starring"
    ],
    "id": 130
  },
  "train_131": {
    "text": "Where is the residence of the prime minister of Spain?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Prime_Minister_of_Spain> <http://dbpedia.org/property/residence> ?uri }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (r / residency\n            :poss (p2 / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (c / country\n                              :name (n / name\n                                    :op1 \"Spain\"))\n                        :ARG2 (m / minister))))\n      :ARG2 (a / amr-unknown)\n      :rel (p / prime)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Spain\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Spain\")))\n",
    "relations": [
      "dbp:residence"
    ],
    "id": 131
  },
  "train_132": {
    "text": "Which actor was casted in the most movies?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?f <http://dbpedia.org/ontology/starring> ?uri . } ORDER BY DESC(COUNT(DISTINCT(?f))) OFFSET 0 LIMIT 1",
    "extended_amr": "(c / cast-02\n      :ARG1 (p / person\n            :ARG0-of (a2 / act-01)\n            :mod (a / amr-unknown))\n      :location (m2 / movie)\n      :rel (m / most)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:starring"
    ],
    "id": 132
  },
  "train_133": {
    "text": "Which countries have more than two official languages?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> ; <http://dbpedia.org/ontology/officialLanguage> ?language } GROUP BY ?uri HAVING ( COUNT(?language) > 2 )",
    "extended_amr": "(h / have-03\n      :ARG0 (c / country\n            :mod (a / amr-unknown))\n      :ARG1 (l / language\n            :mod (o / official)\n            :quant (m / more-than\n                  :op1 2))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")))\n",
    "relations": [
      "dbo:officialLanguage"
    ],
    "id": 133
  },
  "train_134": {
    "text": "Which countries have more than ten caves?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> . ?cave a <http://dbpedia.org/ontology/Cave> { ?cave <http://dbpedia.org/ontology/location> ?uri } UNION { ?cave <http://dbpedia.org/ontology/location> ?loc . ?loc <http://dbpedia.org/ontology/country> ?uri } } GROUP BY ?uri HAVING ( COUNT(?cave) > 10 )",
    "extended_amr": "(h / have-03\n      :ARG0 (c / country\n            :mod (a / amr-unknown))\n      :ARG1 (c2 / cave\n            :quant (m / more-than\n                  :op1 10))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"cave\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Caves_of_Aggtelek_Karst_and_Slovak_Karst\")))\n",
    "relations": [
      "dbo:country",
      "dbo:location"
    ],
    "id": 134
  },
  "train_135": {
    "text": "Show me all songs from Bruce Springsteen released between 1980 and 1990.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song> . ?uri <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Bruce_Springsteen> . ?uri <http://dbpedia.org/ontology/releaseDate> ?date . FILTER (?date >= '1980-01-01'^^xsd:date && ?date <= '1990-12-31'^^xsd:date) }",
    "extended_amr": "(s / show-01\n      :ARG1 (s2 / song\n            :ARG1-of (r / release-01\n                  :time (b / between\n                        :op1 (d / date-entity\n                              :year 1980)\n                        :op2 (d2 / date-entity\n                              :year 1990)))\n            :mod (a / all)\n            :source (p / person\n                  :name (n / name\n                        :op1 \"Bruce\"\n                        :op2 \"Springsteen\")))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Bruce Springsteen\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Bruce_Springsteen\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"show-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/1980\")\n\t\t:entity (all2/ linked_entity\n\t\t\t\t:surface_form \"show-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/1990\")))\n",
    "relations": [
      "dbo:releaseDate",
      "dbo:artist"
    ],
    "id": 135
  },
  "train_136": {
    "text": "Which television shows were created by John Cleese?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
    "extended_amr": "(c / create-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Cleese\"))\n      :ARG1 (s / show-04\n            :ARG1 (a / amr-unknown)\n            :ARG3 (t / television))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"John Cleese\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_Cleese\")))\n",
    "relations": [
      "dbo:creator"
    ],
    "id": 136
  },
  "train_137": {
    "text": "When did Latvia join the EU?",
    "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Latvia> <http://dbpedia.org/property/accessioneudate> ?date }",
    "extended_amr": "(j / join-01\n      :ARG0 (c / country\n            :name (n / name\n                  :op1 \"Latvia\"))\n      :ARG1 (o / organization\n            :name (n2 / name\n                  :op1 \"European\"\n                  :op2 \"Union\"))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"European Union\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Basque_language\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Latvia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Join\")))\n",
    "relations": [
      "dbp:accessioneudate"
    ],
    "id": 137
  },
  "train_138": {
    "text": "Which soccer players were born on Malta?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
    "extended_amr": "(b / bear-02\n      :ARG1 (p / person\n            :ARG0-of (p2 / play-01)\n            :mod (a / amr-unknown))\n      :location (c / country\n            :name (n / name\n                  :op1 \"Malta\"))\n      :rel (s / soccer)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"soccer\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/American_professional_soccer_players_abroad\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Malta\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Malta\")))\n",
    "relations": [
      "dbo:birthPlace"
    ],
    "id": 138
  },
  "train_139": {
    "text": "How many politicians graduated from Columbia University?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Politician> ; <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Columbia_University> }",
    "extended_amr": "(g / graduate-01\n      :ARG1 (p / politician\n            :quant (a / amr-unknown))\n      :ARG2 (u / university\n            :name (n / name\n                  :op1 \"Columbia\"\n                  :op2 \"University\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"politician\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Politicians_of_The_Wire\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Columbia University\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Columbia_University\")))\n",
    "relations": [
      "dbo:profession",
      "dbo:almaMater"
    ],
    "id": 139
  },
  "train_140": {
    "text": "Give me the birthdays of all actors of the television show Charmed.",
    "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
    "extended_amr": "(g / give-01\n      :ARG1 (b / birthday\n            :poss (p / person\n                  :ARG0-of (a2 / act-01)\n                  :mod (a / all)))\n      :mode imperative\n      :rel (s / show-04\n            :ARG1 (b2 / broadcast-program\n                  :name (n / name\n                        :op1 \"Charmed\"))\n            :mod (t / television))\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:birthDate",
      "dbo:starring"
    ],
    "id": 140
  },
  "train_141": {
    "text": "Which telecommunications organizations are located in Belgium?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Telecommunication> } UNION { ?uri <http://dbpedia.org/property/industry> ?industry FILTER regex(?industry, \"Telecommunications\") } { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Belgium> } UNION { ?uri <http://dbpedia.org/property/locationCountry> \"Belgium\"@en } }",
    "extended_amr": "(l / locate-01\n      :ARG1 (o / organization\n            :mod (t / telecomunication)\n            :mod (a / amr-unknown))\n      :location (c / country\n            :name (n / name\n                  :op1 \"Belgium\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"organization\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Complex_organizations\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Belgium\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Belgium\")))\n",
    "relations": [
      "dbp:locationCountry",
      "dbo:industry",
      "dbp:industry",
      "dbo:location"
    ],
    "id": 141
  },
  "train_142": {
    "text": "Give me a list of all lakes in Denmark.",
    "sparql": "SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> } UNION { ?uri a <http://dbpedia.org/class/yago/LakesOfDenmark> } }",
    "extended_amr": "(g / give-01\n      :ARG1 (l / list-01\n            :ARG1 (l2 / lake\n                  :location (c / cuountry\n                        :name (n / name\n                              :op1 \"Denmark\"))\n                  :mod (a / all)))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Denmark\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Denmark\")))\n",
    "relations": [
      "dbo:country"
    ],
    "id": 142
  },
  "train_143": {
    "text": "How many children does Eddie Murphy have?",
    "sparql": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Eddie_Murphy> <http://dbpedia.org/property/children> ?n }",
    "extended_amr": "(h / have-03\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Eddie\"\n                  :op2 \"Murphy\"))\n      :ARG1 (p / person\n            :quant (a / amr-unknown)\n            :quant (m / many))\n      :rel (c / child)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Eddie Murphy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Eddie_Murphy\")))\n",
    "relations": [
      "dbp:children"
    ],
    "id": 143
  },
  "train_144": {
    "text": "Show me all English Gothic buildings in Kent.",
    "sparql": "SELECT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Building> ; <http://dbpedia.org/ontology/architecturalStyle> <http://dbpedia.org/resource/English_Gothic_architecture> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Kent> }",
    "extended_amr": "(s / show-01\n      :ARG1 (b / building\n            :mod (g / gothic\n                  :mod (m / mod\n                        :name (n / name\n                              :op2 \"England\")))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"building\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/English_Gothic_architecture\")))\n",
    "relations": [
      "dbo:location",
      "dbo:architecturalStyle"
    ],
    "id": 144
  },
  "train_145": {
    "text": "Who is the manager of Real Madrid?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Real_Madrid_C.F.> <http://dbpedia.org/ontology/manager> ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (m / manage-01\n            :ARG1 (t / team\n                  :name (n / name\n                        :op1 \"Real\"\n                        :op2 \"Madrid\")))\n      :domain (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"real madrid\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Real_Madrid_C.F.\")))\n\n",
    "relations": [
      "dbo:manager"
    ],
    "id": 145
  },
  "train_146": {
    "text": "In which countries can you pay using the West African CFA franc?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
    "extended_amr": "(p / possible-01\n      :ARG1 (p2 / pay-01\n            :ARG0 (y / you)\n            :location (c / country\n                  :mod (a / amr-unknown))\n            :manner (u / use-01\n                  :ARG0 y\n                  :ARG1 (f / franc\n                        :mod (w / world-region\n                              :name (n / name\n                                    :op1 \"West\"\n                                    :op2 \"Africa\"))\n                        :name (n2 / name\n                              :op1 \"CFA\"\n                              :op2 \"Franc\"))))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"CFA Franc\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/CFA\")\n\t\t:entity (all2/ linked_entity\n\t\t\t\t:surface_form \"West Africa\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/West_African_CFA_franc\")))\n",
    "relations": [
      "dbo:currency"
    ],
    "id": 146
  },
  "train_147": {
    "text": "Which holidays are celebrated around the world?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
    "extended_amr": "(c / celebrate-01\n      :ARG1 (h / holiday\n            :mod (a / amr-unknown))\n      :location (a2 / around\n            :op1 (w / world))\n\t:entities ( el / entity_list))\n",
    "relations": [],
    "id": 147
  },
  "train_148": {
    "text": "What is the longest river?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> { ?uri <http://dbpedia.org/ontology/length> ?l } UNION { ?uri <http://dbpedia.org/property/length> ?l } } ORDER BY DESC(?l) OFFSET 0 LIMIT 1",
    "extended_amr": "(r / river\n      :ARG1-of (h / have-degree-91\n            :ARG2 (l / longest))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:length",
      "dbp:length"
    ],
    "id": 148
  },
  "train_149": {
    "text": "Which organizations were founded in 1930?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/formationYear> ?date } UNION { ?uri <http://dbpedia.org/ontology/foundingYear> ?date } FILTER regex(?date, \"^1930\") }",
    "extended_amr": "(f / found-01\n      :ARG1 (o / organization\n            :mod (a / amr-unknown))\n      :time (d / date-entity\n            :year 1930)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"found-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/1930\")))\n",
    "relations": [
      "dbo:formationYear",
      "dbo:foundingYear"
    ],
    "id": 149
  },
  "train_150": {
    "text": "What is the birth name of Angela Merkel?",
    "sparql": "SELECT DISTINCT ?string WHERE { <http://dbpedia.org/resource/Angela_Merkel> <http://dbpedia.org/property/birthName> ?string }",
    "extended_amr": "(h / have-name-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Angela\"\n                  :op2 \"Merkel\"))\n      :ARG2 (a / amr-unknown)\n      :mod (b / bear-02)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Angela Merkel\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Angela_Merkel\")))\n",
    "relations": [
      "dbp:birthName"
    ],
    "id": 150
  },
  "train_151": {
    "text": "Who has Tom Cruise been married to?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
    "extended_amr": "(m / marry-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Tom\"\n                  :op2 \"Cruise\"))\n      :ARG2 (a / amr-inknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Tom Cruise\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Tom_Cruise\")))\n",
    "relations": [
      "dbo:spouse"
    ],
    "id": 151
  },
  "train_152": {
    "text": "Which weapons did Heckler & Koch develop?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Weapon> ; <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Heckler_&_Koch> }",
    "extended_amr": "(d / develop-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Heckler\"\n                  :op2 \"&\"\n                  :op3 \"Koch\"))\n      :ARG1 (w / wapon\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Heckler & Koch\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Heckler_&_Koch\")))\n",
    "relations": [
      "dbp:designer"
    ],
    "id": 152
  },
  "train_153": {
    "text": "What is the smallest city by area in Germany?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX skos: <http://www.w3.org/2004/02/skos/core#> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT ?city WHERE { ?m skos:broader dbc:Cities_in_Germany . ?city dct:subject ?m ; dbo:areaTotal ?area } ORDER BY ?area LIMIT 1",
    "extended_amr": "(h / have-degree-91\n      :ARG1 (c / city\n            :mod (a / amr-unknown))\n      :ARG2 (s / small)\n      :ARG5 (a2 / area)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"have-degree-91\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Germany\")))\n",
    "relations": [
      "dbo:areaTotal"
    ],
    "id": 153
  },
  "train_154": {
    "text": "What is the ruling party in Lisbon?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lisbon> <http://dbpedia.org/property/leaderParty> ?uri }",
    "extended_amr": "(p / party\n      :ARG0-of (r / rule-03)\n      :location (c / city\n            :name (n / name\n                  :op1 \"Lisbon\"))\n      :mod (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Lisbon\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Lisbon\")))\n",
    "relations": [
      "dbp:leaderParty"
    ],
    "id": 154
  },
  "train_155": {
    "text": "How heavy is Jupiter's lightest moon?",
    "sparql": "SELECT DISTINCT ?n WHERE { ?uri <http://dbpedia.org/property/satelliteOf> <http://dbpedia.org/resource/Jupiter> ; <http://dbpedia.org/ontology/mass> ?n } ORDER BY ASC(?n) OFFSET 0 LIMIT 1",
    "extended_amr": "(m / moon\n      :ARG1-of (h2 / have-degree-91\n            :ARG2 (l / light-06)\n            :ARG3 (m2 / most))\n      :mod (h / heavy\n            :degree (a / amr-unknown))\n      :poss (p / planet\n            :name (n / name\n                  :op1 \"Juptir\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Juptir\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Jupiter\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"moon\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Lightest_Supersymmetric_Particle\")))\n",
    "relations": [
      "dbo:mass",
      "dbp:satelliteOf"
    ],
    "id": 155
  },
  "train_156": {
    "text": "How many employees does IBM have?",
    "sparql": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
    "extended_amr": "(h / have-03\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"IBM\"))\n      :ARG1 (p / person\n            :ARG1-of (e / employ-01)\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"IBM\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/IBM\")))\n",
    "relations": [
      "dbo:numberOfEmployees"
    ],
    "id": 156
  },
  "train_157": {
    "text": "List all episodes of the first season of the HBO television series The Sopranos!",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos ; dbo:seasonNumber 1 }",
    "extended_amr": "(l / list-01\n      :ARG1 (e / episode\n            :mod (a / all)\n            :time (s / season\n                  :ord (o / ordinal-entity\n                        :quant 1)))\n      :mode imperative\n      :rel (c / company\n            :name (n / name\n                  :op1 \"HBO\"\n                  :op2 \"Television\"\n                  :op3 \"Series\"\n                  :op4 \"The\"\n                  :op5 \"Sopranos\"\n                  :op6 \"!\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"HBO Television Series The Sopranos !\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Sopranos\")))\n",
    "relations": [
      "dbo:seasonNumber",
      "dbo:series"
    ],
    "id": 157
  },
  "train_158": {
    "text": "What does ICRO stand for?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/abbreviation> \"ICRO\" }",
    "extended_amr": "(s2 / stand-08\n      :ARG0 (s / string-entity\n            :value \"ICRO\")\n      :ARG0 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"amr-unknown\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Icrossing_Inc\")))\n",
    "relations": [
      "dbo:abbreviation"
    ],
    "id": 158
  },
  "train_159": {
    "text": "Does the new Battlestar Galactica series have more episodes than the old one?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { <http://dbpedia.org/resource/Battlestar_Galactica_%281978_TV_series%29> dbo:numberOfEpisodes ?x . <http://dbpedia.org/resource/Battlestar_Galactica_%282004_TV_series%29> dbo:numberOfEpisodes ?y FILTER ( ?y > ?x ) }",
    "extended_amr": "(h / have-03\n      :ARG0 (s / series\n            :ARG1-of (n / new-01)\n            :rel (s2 / serie\n                  :rel (n3 / name\n                        :name (n2 / name\n                              :op1 \"Battlestar\"\n                              :op2 \"Galactica\"))))\n      :ARG1 (e / episode)\n      :mode interrogative\n      :rel (m / more)\n      :rel (o / old)\n      :rel \"Battlestar\"\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"series\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Diana,_Princess_of_Wales\")))\n",
    "relations": [
      "dbo:numberOfEpisodes"
    ],
    "id": 159
  },
  "train_160": {
    "text": "Give me all films produced by Hal Roach.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> }",
    "extended_amr": "(g / give-01\n      :ARG1 (f / film\n            :ARG1-of (p / produce-01\n                  :ARG0 (o / of\n                        :name (n / name\n                              :op2 \"Hal\")))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Hal\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Hal_Roach\")))\n",
    "relations": [
      "dbo:producer"
    ],
    "id": 160
  },
  "train_161": {
    "text": "Who played Agent Smith in Matrix?",
    "sparql": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Agent_Smith <http://dbpedia.org/ontology/portrayer> ?uri }",
    "extended_amr": "(p / play-02\n      :ARG0 (a / amr-unknown)\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Agent\"\n                  :op2 \"Smith\"))\n      :beneficiary (w / work-of-art\n            :name (n2 / name\n                  :op1 \"Matrix\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Agent Smith\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Agent_Smith\")))\n",
    "relations": [
      "dbo:portrayer"
    ],
    "id": 161
  },
  "train_162": {
    "text": "Which Greek parties are pro-European?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
    "extended_amr": "(f / favor-01\n      :ARG0 (p / party\n            :mod (a / amr-unknown))\n      :ARG1 (c / continent\n            :name (n / name\n                  :op1 \"Europe\"))\n      :rel (f2 / favor-01\n            :ARG0 p\n            :ARG1 c)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Europe\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Greece\")))\n",
    "relations": [
      "dbo:country",
      "dbo:ideology"
    ],
    "id": 162
  },
  "train_163": {
    "text": "Give me a list of all bandleaders that play trumpet.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG0-of (l / lead-02\n                  :ARG1 (b / band))\n            :ARG0-of (p2 / play-11\n                  :ARG2 (t / trumpet))\n            :mod (a / all))\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"band\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Geraldo_(bandleader)\")))\n",
    "relations": [
      "dbo:occupation",
      "dbo:instrument"
    ],
    "id": 163
  },
  "train_164": {
    "text": "What is the second highest mountain on Earth?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
    "extended_amr": "(o / ordinal-entity\n      :quant 2\n      :rel (h / have-degree-91\n            :ARG1 (m / mountain\n                  :domain (a / amr-unknown))\n            :ARG2 (h2 / high-02)\n            :location (p / planet\n                  :name (n / name\n                        :op1 \"Earth\")))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Earth\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Earth\")))\n",
    "relations": [
      "dbo:elevation"
    ],
    "id": 164
  },
  "train_165": {
    "text": "Is Egypts largest city also its capital?",
    "sparql": "ASK WHERE { <http://dbpedia.org/resource/Egypt> <http://dbpedia.org/ontology/largestCity> ?large ; <http://dbpedia.org/ontology/capital> ?capital FILTER ( ?large = ?capital ) }",
    "extended_amr": "(c / country\n      :name (n / name\n            :op1 \"Egypt\")\n      :rel (c2 / city\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (l / large))\n            :mod (a / also)\n            :mode (h2 / have-org-role-91\n                  :ARG2 (c3 / capital)))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Egypt\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Largest_octopus\")))\n",
    "relations": [
      "dbo:largestCity",
      "dbo:capital"
    ],
    "id": 165
  },
  "train_166": {
    "text": "Which rockets were launched from Baikonur?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
    "extended_amr": "(l / launch-01\n      :ARG1 (r / rocket\n            :mod (a / amr-unknown))\n      :source (c / city\n            :name (n / name\n                  :op1 \"Baikonur\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Baikonur\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Baikonur_Cosmodrome_Site_109\")))\n",
    "relations": [
      "dbo:launchSite"
    ],
    "id": 166
  },
  "train_167": {
    "text": "How many programming languages are there?",
    "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
    "extended_amr": "(l / language\n      :medium-of (p / program-01)\n      :quant (a / amr-unknown)\n\t:entities ( el / entity_list))\n",
    "relations": [],
    "id": 167
  },
  "train_168": {
    "text": "Which Chess players died in the same place they were born in?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ChessPlayer> ; <http://dbpedia.org/ontology/birthPlace> ?x ; <http://dbpedia.org/ontology/deathPlace> ?y FILTER ( ?x = ?y ) }",
    "extended_amr": "(d / die-01\n      :ARG1 (p / person\n            :ARG0-of (p3 / play-01)\n            :mod (a / amr-unknown))\n      :location (p2 / place\n            :ARG1-of (s / same-01\n                  :ARG2 (b / bear-02\n                        :ARG1 p)))\n      :rel (c / chess)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"chess\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Chess_Players_(film)\")))\n",
    "relations": [
      "dbo:birthPlace",
      "dbo:deathPlace"
    ],
    "id": 168
  },
  "train_169": {
    "text": "Who is the owner of Facebook?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/ontology/foundedBy> ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (o / own-01\n            :ARG1 (p2 / publication\n                  :name (n / name\n                        :op1 \"Facebook\")))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Facebook\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Facebook\")))\n",
    "relations": [
      "dbo:foundedBy"
    ],
    "id": 169
  },
  "train_170": {
    "text": "Give me all movies with Tom Cruise.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
    "extended_amr": "(g / give-01\n      :ARG1 (m / movie\n            :mod (a / all)\n            :prep-with (p / person\n                  :name (n / name\n                        :op1 \"Tom\"\n                        :op2 \"Cruise\")))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Tom Cruise\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Tom_Cruise\")))\n",
    "relations": [
      "dbo:starring"
    ],
    "id": 170
  },
  "train_171": {
    "text": "In which U.S. state is Fort Knox located?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Fort_Knox dbo:location ?uri . ?uri dbo:country res:United_States }",
    "extended_amr": "(l / locate-01\n      :ARG1 (f / facility\n            :name (n2 / name\n                  :op1 \"Fort\"\n                  :op2 \"Knox\"))\n      :location (s / state\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"United\"\n                        :op2 \"States\"))\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"United States\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_States\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Fort Knox\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Fort_Knox\")))\n",
    "relations": [
      "dbo:country",
      "dbo:location"
    ],
    "id": 171
  },
  "train_172": {
    "text": "Give me all cities in New Jersey with more than 100000 inhabitants.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:isPartOf res:New_Jersey ; dbo:populationTotal ?inhabitants FILTER ( ?inhabitants > 100000 ) }",
    "extended_amr": "(g / give-01\n      :ARG1 (c / city\n            :ARG0-of (h / have-03\n                  :ARG1 (p / person\n                        :ARG0-of (i3 / inhabit-01)\n                        :quant (m / more-than\n                              :op1 100000)))\n            :location (s / state\n                  :name (n / name\n                        :op1 \"New3\"\n                        :op2 \"Jersey\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"New3 Jersey\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/New_Jersey\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"100000\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/100000_(disambiguation)\")))\n",
    "relations": [
      "dbo:populationTotal",
      "dbo:isPartOf"
    ],
    "id": 172
  },
  "train_173": {
    "text": "Which mountains are higher than the Nanga Parbat?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nanga_Parbat> <http://dbpedia.org/ontology/elevation> ?elevation . ?uri a <http://dbpedia.org/ontology/Mountain> { ?uri <http://dbpedia.org/ontology/elevation> ?otherelevation } UNION { ?uri <http://dbpedia.org/property/elevationM> ?otherelevation } FILTER ( ?otherelevation > ?elevation ) }",
    "extended_amr": "(h / have-degree-91\n      :ARG1 (m / mountain\n            :mod (a / amr-unknown))\n      :ARG2 (h2 / high-02)\n      :ARG5 (m2 / mountain\n            :name (n / name\n                  :op1 \"Nanga\"\n                  :op2 \"Parbat\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Nanga Parbat\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nanga_Parbat\")))\n",
    "relations": [
      "dbp:elevationM",
      "dbo:elevation"
    ],
    "id": 173
  },
  "train_174": {
    "text": "Give me all B-sides of the Ramones.",
    "sparql": "SELECT DISTINCT ?string WHERE { ?x <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Ramones> ; <http://dbpedia.org/ontology/bSide> ?string }",
    "extended_amr": "(g / give-01\n      :ARG1 (x0 / B-side\n            :poss (o / organization\n                  :name (n / name\n                        :op1 \"Ramones\")))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"B-side\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_B-Sides\")))\n",
    "relations": [
      "dbo:musicalArtist",
      "dbo:bSide"
    ],
    "id": 174
  },
  "train_175": {
    "text": "What are the specialities of the UNC Health Care?",
    "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/UNC_Health_Care> <http://dbpedia.org/property/speciality> ?uri }",
    "extended_amr": "(s / speciality\n      :domain (a / amr-unknown)\n      :poss (o / organization\n            :name (n / name\n                  :op1 \"UNC\"\n                  :op2 \"Health\"\n                  :op3 \"Care\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"speciality\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Traditional_Specialities_Guaranteed\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"UNC Health Care\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/UNC\")\n\t\t:entity (all2/ linked_entity\n\t\t\t\t:surface_form \"UNC Health Care\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Health_care\")))\n",
    "relations": [
      "dbp:speciality"
    ],
    "id": 175
  },
  "train_176": {
    "text": "When was Olof Palme shot?",
    "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
    "extended_amr": "(s / shot-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Olof\"\n                  :op2 \"Palme\"))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Olof Palme\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Olof_Palme\")))\n",
    "relations": [
      "dbo:deathDate"
    ],
    "id": 176
  },
  "train_177": {
    "text": "List the seven kings of Rome.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/King_of_Rome> }",
    "extended_amr": "(l / list-01\n      :ARG1 (p / person\n            :ARG1-of (i2 / include-91)\n            :quant 7)\n      :mode imperative\n      :rel (k / king)\n      :rel (e / empire\n            :name (n / name\n                  :op1 \"Rome\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Rome\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Rome\")))\n",
    "relations": [
      "dbp:title"
    ],
    "id": 177
  },
  "train_178": {
    "text": "Give me all people that were born in Vienna and died in Berlin.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG1-of a2\n            :mod (a / all))\n      :ARG2 (i / i)\n      :rel (a2 / and\n            :op1 (b / bear-02\n                  :ARG1 p\n                  :location (c / city\n                        :name (n / name\n                              :op1 \"Vienna\")))\n            :op2 (d / die-01\n                  :ARG1 p\n                  :location (c2 / city\n                        :name (n2 / name\n                              :op1 \"Berlin\"))))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Vienna\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Vienna\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Berlin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Berlin\")))\n",
    "relations": [
      "dbo:birthPlace",
      "dbo:deathPlace"
    ],
    "id": 178
  },
  "train_179": {
    "text": "Is Darth Vader Luke\u2019s father?",
    "sparql": "ASK WHERE { <http://dbpedia.org/resource/Darth_Vader> <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Luke_Skywalker> }",
    "extended_amr": "(h / have-rel-role-91\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Darth\"\n                  :op2 \"Vader\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Luke\"))\n      :ARG2 (f / father)\n      :mode interrogative)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"darth vader\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Darth_Vader\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"luke\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Luke_1\")))\n\n",
    "relations": [
      "dbo:child"
    ],
    "id": 179
  },
  "train_180": {
    "text": "Show me all the breweries in Australia.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Brewery> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
    "extended_amr": "(s / show-01\n      :ARG1 (b / brewery\n            :location (c / country\n                  :name (n / name\n                        :op1 \"Australia\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Australia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Palm_Breweries\")))\n",
    "relations": [
      "dbo:country",
      "dbo:location"
    ],
    "id": 180
  },
  "train_181": {
    "text": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Steven_Spielberg> . ?uri <http://dbpedia.org/ontology/budget> ?b . FILTER( xsd:double(?b) >= 8.0E7 ) }",
    "extended_amr": "(g / give-01\n      :ARG1 (f / film\n            :ARG1-of (p / produce-01\n                  :ARG0 (p2 / person\n                        :name (n / name\n                              :op1 \"Steven\"\n                              :op2 \"Spielberg\")))\n            :ARG2-of (b / budget-01\n                  :ARG1 (a2 / at-least\n                        :op1 (m / monetary-quantity\n                              :quant (a3 / at-least\n                                    :op1 80000000)\n                              :unit (d / dollars))))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Steven Spielberg\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Steven_Spielberg\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"80000000\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Boeing_80\")))\n",
    "relations": [
      "dbo:director",
      "dbo:budget"
    ],
    "id": 181
  },
  "train_182": {
    "text": "Give me all soccer clubs in Spain.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> { ?uri <http://dbpedia.org/ontology/ground> <http://dbpedia.org/resource/Spain> } UNION { ?uri <http://dbpedia.org/property/ground> ?ground FILTER regex(?ground, \"Spain\") } }",
    "extended_amr": "(g / give-01\n      :ARG1 (c / club\n            :location (c2 / country\n                  :name (n / name\n                        :op1 \"Spain\"))\n            :mod (s / soccer)\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Spain\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Spain\")))\n",
    "relations": [
      "dbp:ground",
      "dbo:ground"
    ],
    "id": 182
  },
  "train_183": {
    "text": "Who produced films starring Natalie Portman?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?film a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Natalie_Portman> ; <http://dbpedia.org/ontology/producer> ?uri }",
    "extended_amr": "(p / produce-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (f / film\n            :ARG2-of (s / star-01\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Natalie\"\n                              :op2 \"Portman\"))))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Natalie Portman\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Natalie_Portman\")))\n",
    "relations": [
      "dbo:producer",
      "dbo:starring"
    ],
    "id": 183
  },
  "train_184": {
    "text": "Give me all breeds of the German Shepherd dog.",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/breed> <http://dbpedia.org/resource/German_Shepherd> }",
    "extended_amr": "(g / give-01\n      :ARG1 (b / breed-01\n            :ARG1 (d / dog\n                  :domain (x0 / German-Shepherd))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"German-Shepherd\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Germany\")))\n",
    "relations": [
      "dbp:breed"
    ],
    "id": 184
  },
  "train_185": {
    "text": "Who is the heaviest player of the Chicago Bulls?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/ontology/weight> ?num { ?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
    "extended_amr": "(p / person\n      :ARG0-of (p2 / play-01)\n      :ARG1-of (h / have-degree-91\n            :ARG2 (h2 / heavy))\n      :domain (a / amr-unknown)\n      :part-of (t / team\n            :name (n / name\n                  :op1 \"Chicago\"\n                  :op2 \"Bulls\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Chicago Bulls\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Chicago_Bulls\")))\n",
    "relations": [
      "dbo:draftTeam",
      "dbo:weight",
      "dbp:team",
      "dbp:draftTeam"
    ],
    "id": 185
  },
  "train_186": {
    "text": "Which languages are spoken in Estonia?",
    "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spokenIn> <http://dbpedia.org/resource/Estonia> }",
    "extended_amr": "(s / speak-01\n      :ARG3 (l / language\n            :mod (a / amr-unknown))\n      :location (c / country\n            :name (n / name\n                  :op1 \"Estonia\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Estonia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Estonia\")))\n",
    "relations": [
      "dbo:spokenIn"
    ],
    "id": 186
  },
  "train_187": {
    "text": "What is the largest country in the world?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
    "extended_amr": "(h / have-degree-91\n      :ARG1 (c / country\n            :domain (a / amr-unknown))\n      :ARG2 (l / large)\n      :ARG5 (w / world)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:areaTotal"
    ],
    "id": 187
  },
  "train_188": {
    "text": "What is the largest city in america?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?lcity WHERE { dbr:United_States dbo:largestCity ?lcity }",
    "extended_amr": "(h / have-degree-91\n      :ARG1 (c / city\n            :domain (a / amr-unknown))\n      :ARG2 (l / large)\n      :ARG5 (c2 / country\n            :name (n / name\n                  :op1 \"America\"))\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:largestCity"
    ],
    "id": 188
  },
  "train_189": {
    "text": "Who was the pope that founded the Vatican Television?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:Pope . res:Vatican_Television_Center dbo:foundedBy ?uri }",
    "extended_amr": "(f / found-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (p2 / pope))\n            :domain (a / amr-unknown))\n      :ARG1 (c / company\n            :name (n / name\n                  :op1 \"Vatican\"\n                  :op2 \"Television\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Vatican Television\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Vatican_Television_Center\")))\n",
    "relations": [
      "dbo:foundedBy"
    ],
    "id": 189
  },
  "train_190": {
    "text": "Who discovered Ceres?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
    "extended_amr": "(d / discover-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (a2 / asteroid\n            :name (n / name\n                  :op1 \"Ceres\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Ceres\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ceres_(dwarf_planet)\")))\n",
    "relations": [
      "dbo:discoverer"
    ],
    "id": 190
  },
  "train_191": {
    "text": "Who is the king of the Netherlands?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Netherlands dbo:leader ?uri . ?uri rdf:type dbo:Royalty }",
    "extended_amr": "(p / person\n      :ARG1-of (i / include-91)\n      :domain (a / amr-unknown)\n      :rel (k / king)\n      :rel (c / country\n            :name (n / name\n                  :op1 \"Netherlands\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Netherlands\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Netherlands\")))\n",
    "relations": [
      "dbo:leader"
    ],
    "id": 191
  },
  "train_192": {
    "text": "Is Cola a beverage?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Cola rdf:type dbo:Beverage }",
    "extended_amr": "(v / veberage\n      :domain (p / product\n            :name (n / name\n                  :op1 \"Cola\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Cola\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cola\")))\n",
    "relations": [],
    "id": 192
  },
  "train_193": {
    "text": "What is the alma mater of the chancellor of Germany Angela Merkel?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
    "extended_amr": "(a2 / alma-matter\n      :domain (a / amr-unknown)\n      :poss (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c2 / country\n                        :name (n / name\n                              :op1 \"Germany\"))\n                  :ARG2 (c / chancellor))\n            :name (n2 / name\n                  :op1 \"Angela\"\n                  :op2 \"Merkel\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Angela Merkel\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Angela_Merkel\")))\n",
    "relations": [
      "dbo:almaMater"
    ],
    "id": 193
  },
  "train_194": {
    "text": "Who wrote the book Les Piliers de la terre?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
    "extended_amr": "(w / write-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (b / book\n            :name (n / name\n                  :op1 \"Les\"\n                  :op2 \"Piliers\"\n                  :op3 \"De\"\n                  :op4 \"La\"\n                  :op5 \"Terre\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Les Piliers De La Terre\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/La_Terre\")))\n",
    "relations": [
      "dbo:author"
    ],
    "id": 194
  },
  "train_195": {
    "text": "Which airports does Yeti Airlines serve?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Yeti_Airlines dbo:targetAirport ?uri }",
    "extended_amr": "(s / serve-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Yeti\"\n                  :op2 \"Airlines\"))\n      :ARG2 (a2 / airport\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Yeti Airlines\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Yeti_Airlines\")))\n",
    "relations": [
      "dbo:targetAirport"
    ],
    "id": 195
  },
  "train_196": {
    "text": "Where is the birthplace of Goethe?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Goethe WHERE { dbr:Johann_Wolfgang_von_Goethe dbo:birthPlace ?Goethe }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (p / place\n            :location-of (b2 / bear-02))\n      :rel (p2 / person\n            :name (n / name\n                  :op1 \"Goethe\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Goethe\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Goethe_Prize\")))\n",
    "relations": [
      "dbo:birthPlace"
    ],
    "id": 196
  },
  "train_197": {
    "text": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Cuban_Missile_Crisis dbo:date ?x . res:Bay_of_Pigs_Invasion dbo:date ?y FILTER ( ?x < ?y ) }",
    "extended_amr": "(w / war\n      :name (n / name\n            :op1 \"Cuban\"\n            :op2 \"Missile\"\n            :op3 \"Crisis\")\n      :rel (b / before\n            :op1 (i / invade-01\n                  :ARG1 (b2 / bay\n                        :name (n2 / name\n                              :op1 \"Bay\"\n                              :op2 \"Of\"\n                              :op3 \"Pigs\"))))\n      :rel interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Cuban Missile Crisis\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cuba\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Bay Of Pigs\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Bay_of_Pigs_Invasion\")))\n",
    "relations": [
      "dbo:date"
    ],
    "id": 197
  },
  "train_198": {
    "text": "Which ingredients do I need for carrot cake?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Carrot_cake dbo:ingredient ?uri }",
    "extended_amr": "(n / need-01\n      :ARG0 (i2 / i)\n      :ARG1 (i / ingridient\n            :mod (a / amr-unknown))\n      :purpose (c2 / cake\n            :mod (c / carrot))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"i\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/I\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"cake\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Carrot_cake\")))\n",
    "relations": [
      "dbo:ingredient"
    ],
    "id": 198
  },
  "train_199": {
    "text": "Who created Wikipedia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Wikipedia dbo:author ?uri }",
    "extended_amr": "(c / create-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (c2 / company\n            :name (n / name\n                  :op1 \"Wikipedia\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Wikipedia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Wikipedia\")))\n",
    "relations": [
      "dbo:author"
    ],
    "id": 199
  },
  "train_200": {
    "text": "What is the highest mountain in Saxony Germany?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?m WHERE { ?m dbo:mountainRange dbr:Ore_Mountains ; dbo:elevation ?height } ORDER BY DESC(?height) LIMIT 1",
    "extended_amr": "(m / mountain\n      :ARG1 (h / have-degree-91\n            :ARG2 (h2 / high-02))\n      :domain (a / amr-unknown)\n      :rel (s / state\n            :location (c / country\n                  :name (n2 / name\n                        :op1 \"Germany\"))\n            :name (n / name\n                  :op1 \"Saxony\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Saxony\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Frankenstein,_Saxony\")))\n",
    "relations": [
      "dbo:elevation",
      "dbo:mountainRange"
    ],
    "id": 200
  },
  "train_201": {
    "text": "Who is the current federal minister of finance in Germany?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?leader WHERE { <http://dbpedia.org/resource/Federal_Ministry_of_Finance_(Germany)> dbo:leader ?leader }",
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG2 (m / minister))\n      :domain (a / amr-unknown)\n      :rel (t / time)\n      :rel (f / federal)\n      :rel (f2 / finance)\n      :rel (c / country\n            :name (n / name\n                  :op1 \"Germany\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"minister\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Current_prime_minister_of_Canada\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Germany\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Germany\")))\n",
    "relations": [
      "dbo:leader"
    ],
    "id": 201
  },
  "train_202": {
    "text": "In which country is Mecca located?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
    "extended_amr": "(l / locate-01\n      :ARG1 (c2 / city\n            :name (n / name\n                  :op1 \"Mecca\"))\n      :location (c / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Mecca\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mecca\")))\n",
    "relations": [
      "dbo:country"
    ],
    "id": 202
  },
  "train_203": {
    "text": "Who played Gus Fring in Breaking Bad?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Gus_Fring dbo:portrayer ?uri }",
    "extended_amr": "(p / play-02\n      :ARG0 (a / amr-unknown)\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Gus\"\n                  :op2 \"Fring\"))\n      :subevent-of (s / show\n            :name (n2 / name\n                  :op1 \"Breaking\"\n                  :op2 \"Bad\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Gus Fring\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Gus_Fring\")))\n",
    "relations": [
      "dbo:portrayer"
    ],
    "id": 203
  },
  "train_204": {
    "text": "In which country does the Nile start?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Nile dbo:sourceCountry ?uri }",
    "extended_amr": "(s / start-06\n      :ARG0 (r / river\n            :name (n / name\n                  :op1 \"nile\"))\n      :location (c / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"nile\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nile\")))\n",
    "relations": [
      "dbo:sourceCountry"
    ],
    "id": 204
  },
  "train_205": {
    "text": "In which state Penn State University is located?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?s WHERE { dbr:Pennsylvania_State_University dbo:state ?s }",
    "extended_amr": "(l / locate-01\n      :ARG1 (u / university\n            :name (n / name\n                  :op1 \"Penn\"\n                  :op2 \"State\"\n                  :op3 \"University\"))\n      :location (s / state\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Penn State University\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Pennsylvania_State_University\")))\n",
    "relations": [
      "dbo:state"
    ],
    "id": 205
  },
  "train_206": {
    "text": "What is the biggest stadium in Spain?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Stadium ; dbo:location res:Spain ; dbo:seatingCapacity ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
    "extended_amr": "(s / stadium\n      :ARG1-of (h / have-degree-91\n            :ARG2 (b / big))\n      :domain (a / amr-unknown)\n      :rel (c / country\n            :name (n / name\n                  :op1 \"Spain\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Spain\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Spain\")))\n",
    "relations": [
      "dbo:location",
      "dbo:seatingCapacity"
    ],
    "id": 206
  },
  "train_207": {
    "text": "Who is the coach of Ankara's ice hockey team?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:city res:Ankara ; dbo:league res:Turkish_Ice_Hockey_First_League ; dbo:coach ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (t / team\n                  :mod (h2 / hockey\n                        :mod (i / ice))\n                  :poss (c / city\n                        :name (n / name\n                              :op1 \"Ankara\")))\n            :ARG2 (c2 / coach))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Ankara\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ankara\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"team\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Greece_national_ice_hockey_team\")))\n",
    "relations": [
      "dbo:coach",
      "dbo:league",
      "dbo:city"
    ],
    "id": 207
  },
  "train_208": {
    "text": "How large is the area of UK?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?area WHERE { dbr:United_Kingdom dbo:areaTotal ?area }",
    "extended_amr": "(h / have-quant-91\n      :ARG1 (a2 / area\n            :poss (c / country\n                  :name (n / name\n                        :op1 \"United\"\n                        :op2 \"Kingdom\")))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"have-quant-91\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_Kingdom\")))\n",
    "relations": [
      "dbo:areaTotal"
    ],
    "id": 208
  },
  "train_209": {
    "text": "Who created Batman?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
    "extended_amr": "(c / create-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Batman\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Batman\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Batman\")))\n",
    "relations": [
      "dbo:creator"
    ],
    "id": 209
  },
  "train_210": {
    "text": "Was Sigmund Freud married?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Sigmund_Freud dbo:spouse ?uri }",
    "extended_amr": "(m / marry-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Sigmund\"\n                  :op2 \"Freud\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Sigmund Freud\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sigmund_Freud\")))\n",
    "relations": [
      "dbo:spouse"
    ],
    "id": 210
  },
  "train_211": {
    "text": "Who are the developers of DBpedia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:DBpedia dbo:developer ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (d / develop-02\n            :ARG1 (p2 / product\n                  :name (n / name\n                        :op1 \"DBpedia\")))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"DBpedia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/DBpedia\")))\n",
    "relations": [
      "dbo:developer"
    ],
    "id": 211
  },
  "train_212": {
    "text": "Give me all movies directed by Francis Ford Coppola.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
    "extended_amr": "(g / give-01\n      :ARG1 (m / movie\n            :ARG1-of (d / direct-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Francis\"\n                              :op2 \"Ford\"\n                              :op3 \"Coppola\")))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Francis Ford Coppola\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Francis_Ford_Coppola\")))\n",
    "relations": [
      "dbo:director"
    ],
    "id": 212
  },
  "train_213": {
    "text": "Are tree frogs a type of amphibian?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Hylidae dbo:class res:Amphibian }",
    "extended_amr": "(a / amphibia\n      :domain (f / frog\n            :mod (t / tree))\n      :mod (t2 / type)\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"amphibia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Amphibian\")))\n",
    "relations": [
      "dbo:class"
    ],
    "id": 213
  },
  "train_214": {
    "text": "What is the location of the Houses of Parliament?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT ?uri WHERE { res:Palace_of_Westminster dbo:location ?uri }",
    "extended_amr": "(l / locate-01\n      :ARG1 (g / governemt-organization\n            :name (n / name\n                  :op1 \"Houses\"\n                  :op2 \"Of\"\n                  :op3 \"Parliament\"))\n      :location (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Houses Of Parliament\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Palace_of_Westminster\")))\n",
    "relations": [
      "dbo:location"
    ],
    "id": 214
  },
  "train_215": {
    "text": "how much is the elevation of D\u00fcsseldorf Airport ?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
    "extended_amr": "(h / have-quant-91\n      :ARG1 (e / elevate-01\n            :ARG1 (a2 / airport\n                  :name (n / name\n                        :op1 \"D\u00fcsseldorf\"\n                        :op2 \"Airport\")))\n      :ARG2 (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"d\u00fcsseldorf airport\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/D\u00fcsseldorf_Airport\")))\n\n",
    "relations": [
      "dbo:elevation"
    ],
    "id": 215
  },
  "train_216": {
    "text": "How much is the population of mexico city ?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
    "extended_amr": "(h / have-quant-91\n      :ARG1 (p / population\n            :mod (c / city\n                  :name (n / name\n                        :op1 \"Mexico\"\n                        :op2 \"City\")))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:populationTotal"
    ],
    "id": 216
  },
  "train_217": {
    "text": "when was the founding date of french fifth republic?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ff WHERE { dbr:French_Fifth_Republic dbo:foundingDate ?ff }",
    "extended_amr": "(b / be-temporally-at-91\n      :ARG1 (d / date-01\n            :ARG1 (f / found-01\n                  :ARG1 (g / government-organization\n                        :mod (c / country\n                              :name (n / name\n                                    :op1 \"France\"))\n                        :name (n2 / name\n                              :op1 \"fifth\"\n                              :op2 \"republic\"))))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:foundingDate"
    ],
    "id": 217
  },
  "train_218": {
    "text": "Who was the first King of England?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Royalty ; rdf:type yago:WikicatEnglishMonarchs ; dbo:activeYearsStartYear ?date } ORDER BY ASC(?date) OFFSET 0 LIMIT 1",
    "extended_amr": "(o / ordinal-entity\n      :quant 1\n      :rel (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"England\"))\n                  :ARG2 (k / king))\n            :domain (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"England\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/List_of_English_monarchs\")))\n",
    "relations": [
      "dbo:activeYearsStartYear"
    ],
    "id": 218
  },
  "train_219": {
    "text": "Who is the editor of Forbes?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Forbes dbo:editor ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (e / edit-01\n            :ARG1 (m / magazine\n                  :name (n / name\n                        :op1 \"Forbes\")))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Forbes\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Forbes\")))\n",
    "relations": [
      "dbo:editor"
    ],
    "id": 219
  },
  "train_220": {
    "text": "Which awards did Douglas Hofstadter win?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Douglas_Hofstadter dbo:award ?uri }",
    "extended_amr": "(w / win-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Douglas\"\n                  :op2 \"Hofstadter\"))\n      :ARG1 (a2 / award\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Douglas Hofstadter\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Douglas_Hofstadter\")))\n",
    "relations": [
      "dbo:award"
    ],
    "id": 220
  },
  "train_221": {
    "text": "Who is the youngest Darts player?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:DartsPlayer ; dbo:birthDate ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1",
    "extended_amr": "(p / person\n      :ARG0-of (p2 / play-01\n            :ARG1 (d / dart))\n      :ARG1-of (h / have-degree-91\n            :ARG2 (y / young)\n            :ARG3 (m / most))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"dart\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Andrew_Gilding\")))\n",
    "relations": [
      "dbo:birthDate"
    ],
    "id": 221
  },
  "train_222": {
    "text": "Is horse racing a sport?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { dbr:Horse_racing rdf:type dbo:Sport }",
    "extended_amr": "(s / sport\n      :domain (r / race-02\n            :ARG3 (h / horse))\n      :mode interrogative\n\t:entities ( el / entity_list))\n",
    "relations": [],
    "id": 222
  },
  "train_223": {
    "text": "Which river does the Brooklyn Bridge cross?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
    "extended_amr": "(c / cross-02\n      :ARG0 (b / bridge\n            :name (n / name\n                  :op1 \"Brooklyn\"\n                  :op2 \"Bridge\"))\n      :ARG1 (r / river\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Brooklyn Bridge\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Brooklyn_Bridge\")))\n",
    "relations": [
      "dbo:crosses"
    ],
    "id": 223
  },
  "train_224": {
    "text": "How many people live in Poland?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Poland dbo:populationTotal ?uri }",
    "extended_amr": "(l / live-01\n      :ARG0 (p / person\n            :quant (a / amr-unknown))\n      :location (c / country\n            :name (n / name\n                  :op1 \"Poland\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Poland\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Poland\")))\n",
    "relations": [
      "dbo:populationTotal"
    ],
    "id": 224
  },
  "train_225": {
    "text": "When was the last episode of the TV series Friends aired?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?date WHERE { dbr:Friends dbo:completionDate ?date }",
    "extended_amr": "(a2 / air-01\n      :ARG1 (e / episode\n            :mod (l / last)\n            :part-of (s / series\n                  :medium (t / television)\n                  :name (n / name\n                        :op1 \"Friends\")))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"last\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Tv_test_pattern\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Friends\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Thomas_&_Friends_(series_18)\")))\n",
    "relations": [
      "dbo:completionDate"
    ],
    "id": 225
  },
  "train_226": {
    "text": "Is the wife of president Obama called Michelle?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> ASK WHERE { res:Barack_Obama dbo:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, \"Michelle\") }",
    "extended_amr": "(h / have-rel-role-91\n      :ARG1 (p2 / person\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG2 (p / president))\n            :name (n / name\n                  :op1 \"Obama\"))\n      :ARG2 (w / wife)\n      :rel (c / call-01\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Michelle\"))\n            :mode interrogative)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Obama\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Barack_Obama\")))\n",
    "relations": [
      "dbo:spouse"
    ],
    "id": 226
  },
  "train_227": {
    "text": "Who is 8th president of US?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?name WHERE { dbr:8th_President_of_the_United_States dbo:wikiPageRedirects ?link . ?link dbp:name ?name }",
    "extended_amr": "(o / ordinal-entity\n      :quant 8\n      :rel (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"United\"\n                              :op2 \"States\"))\n                  :ARG2 (p2 / president))\n            :domain (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"person\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_States\")))\n",
    "relations": [
      "dbp:name",
      "dbo:wikiPageRedirects"
    ],
    "id": 227
  },
  "train_228": {
    "text": "how much is the total population of  european union?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
    "extended_amr": "(h / have-quant-91\n      :ARG1 (p / population\n            :mod (t / total)\n            :mod (w / world-region\n                  :name (n / name\n                        :op1 \"European\"\n                        :op2 \"Union\")))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:populationTotal"
    ],
    "id": 228
  },
  "train_229": {
    "text": "Give me all launch pads operated by NASA.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:LaunchPad ; dbo:operator res:NASA }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / pad\n            :ARG1-of (o / operate-01\n                  :ARG0 (r / research-institute\n                        :name (n / name\n                              :op1 \"National\"\n                              :op2 \"Aeronautics\"\n                              :op4 \"Space\")))\n            :location-of (l / launch-01)\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"name\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/NASA\")))\n",
    "relations": [
      "dbo:operator"
    ],
    "id": 229
  },
  "train_230": {
    "text": "Who developed the video game World of Warcraft?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
    "extended_amr": "(d / develop-02\n      :ARG0 (a / amr-unknown)\n      :ARG1 (g / game\n            :mod (v / video)\n            :name (n / name\n                  :op1 \"World\"\n                  :op2 \"Of\"\n                  :op3 \"Warcraft\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"World Of Warcraft\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/World_of_Warcraft\")))\n",
    "relations": [
      "dbo:developer"
    ],
    "id": 230
  },
  "train_231": {
    "text": "What is the birth name of Adele?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
    "extended_amr": "(n / name-01\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Adele\"))\n      :ARG2 (a / amr-unknown)\n      :mod (b / bear-02)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Adele\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Adele\")))\n",
    "relations": [
      "dbo:birthName"
    ],
    "id": 231
  },
  "train_232": {
    "text": "What is the population of Cairo?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
    "extended_amr": "(p / population\n      :mod (c / city\n            :name (n / name\n                  :op1 \"Cairo\"))\n      :quant (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Cairo\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cairo\")))\n",
    "relations": [
      "dbo:populationTotal"
    ],
    "id": 232
  },
  "train_233": {
    "text": "Is Frank Herbert still alive?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { OPTIONAL { res:Frank_Herbert dbo:deathDate ?date } FILTER ( ! bound(?date) ) }",
    "extended_amr": "(l / live-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Frank\"\n                  :op2 \"Herbert\"))\n      :mod (s / still)\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Frank Herbert\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Frank_Herbert\")))\n",
    "relations": [
      "dbo:deathDate"
    ],
    "id": 233
  },
  "train_234": {
    "text": "What is the last work of Dan Brown?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?book WHERE { { ?book dbo:author dbr:Dan_Brown . ?book dbp:releaseDate ?date } UNION { ?book dbo:author dbr:Dan_Brown . ?book dbo:publicationDate ?date} } ORDER BY DESC(xsd:date(?date)) LIMIT 1",
    "extended_amr": "(w / work-12\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dan\"\n                  :op2 \"Brown\"))\n      :ARG1 (a / amr-unknown\n            :mod (l / last))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Dan Brown\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Dan_Brown\")))\n",
    "relations": [
      "dbp:releaseDate",
      "dbo:author",
      "dbo:publicationDate"
    ],
    "id": 234
  },
  "train_235": {
    "text": "Where is Sungkyunkwan University?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?country WHERE { dbr:Sungkyunkwan_University dbo:city ?city ; dbo:country ?country }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (u / university\n            :name (n / name\n                  :op1 \"Sungkyunkwan\"\n                  :op2 \"University\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Sungkyunkwan University\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sungkyunkwan_University\")))\n",
    "relations": [
      "dbo:country",
      "dbo:city"
    ],
    "id": 235
  },
  "train_236": {
    "text": "Who is the author of the interpretation of dreams?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
    "extended_amr": "(p / person\n      :ARG0-of (a2 / author-01\n            :ARG1 (b / book\n                  :name (n / name\n                        :op1 \"Interpretation\"\n                        :op2 \"Of\"\n                        :op3 \"Dreams\")))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:author"
    ],
    "id": 236
  },
  "train_237": {
    "text": "When was the death  of  Shakespeare?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
    "extended_amr": "(b / be-temporally-at-91\n      :ARG1 (d / die-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"shakespeare\")))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"shakespeare\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/William_Shakespeare\")))\n",
    "relations": [
      "dbo:deathDate"
    ],
    "id": 237
  },
  "train_238": {
    "text": "Who developed Slack?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:product <http://dbpedia.org/resource/Slack_(software)> }",
    "extended_amr": "(d / develop-02\n      :ARG0 (a / amr-unknown)\n      :ARG1 (p / product\n            :name (n / name\n                  :op1 \"Slack\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Slack\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Slack\")))\n",
    "relations": [
      "dbo:product"
    ],
    "id": 238
  },
  "train_239": {
    "text": "Where is the origin of Carolina reaper?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:Carolina_Reaper dbo:origin ?uri}",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (o / originate-01\n            :ARG1 (r / reaper\n                  :mod (x0 / Carolina)))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"reaper\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Carolina_Reaper\")))\n",
    "relations": [
      "dbo:origin"
    ],
    "id": 239
  },
  "train_240": {
    "text": "In which year was Rachel Stevens born?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
    "extended_amr": "(b / bear-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Rachel\"\n                  :op2 \"Stevens\"))\n      :time (d / date-entity\n            :mod (w / which))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Rachel Stevens\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Rachel_Stevens\")))\n",
    "relations": [
      "dbo:birthYear"
    ],
    "id": 240
  },
  "train_241": {
    "text": "How often did Jane Fonda marry?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Jane_Fonda dbo:spouse ?uri }",
    "extended_amr": "(m / marry-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Jane\"\n                  :op2 \"Fonda\"))\n      :frequency (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Jane Fonda\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Jane_Fonda\")))\n",
    "relations": [
      "dbo:spouse"
    ],
    "id": 241
  },
  "train_242": {
    "text": "Was the wife of president Lincoln called Mary?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> ASK WHERE { res:Abraham_Lincoln dbo:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, \"Mary\") }",
    "extended_amr": "(h / have-rel-role-91\n      :ARG1 (p2 / person\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG2 (p / president))\n            :name (n / name\n                  :op1 \"A.Lincoln\"))\n      :ARG2 (w / wife)\n      :rel (c / call-01\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Mary\"))\n            :mode interrogative)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"A.Lincoln\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Abraham_Lincoln\")))\n",
    "relations": [
      "dbo:spouse"
    ],
    "id": 242
  },
  "train_243": {
    "text": "Which cities does the Weser flow through?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Weser dbo:city ?uri }",
    "extended_amr": "(f / flow-01\n      :ARG1 (r / river\n            :name (n / name\n                  :op1 \"Weser\"))\n      :path (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Weser\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Weser\")))\n",
    "relations": [
      "dbo:city"
    ],
    "id": 243
  },
  "train_244": {
    "text": "In which programming language is GIMP written?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:GIMP dbo:programmingLanguage ?uri }",
    "extended_amr": "(w / write-01\n      :ARG1 (p / product\n            :name (n / name\n                  :op1 \"General\"\n                  :op2 \"Image\"\n                  :op3 \"Manipulation\"\n                  :op4 \"Program\"))\n      :rel (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"General Image Manipulation Program\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/GIMP\")))\n",
    "relations": [
      "dbo:programmingLanguage"
    ],
    "id": 244
  },
  "train_245": {
    "text": "Which university did Angela Merkel attend?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
    "extended_amr": "(a2 / attend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Angela\"\n                  :op2 \"Merkel\"))\n      :ARG1 (u / university\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Angela Merkel\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Angela_Merkel\")))\n",
    "relations": [
      "dbo:almaMater"
    ],
    "id": 245
  },
  "train_246": {
    "text": "List all the musicals with music by Elton John.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
    "extended_amr": "(l / list-01\n      :ARG1 (m / musical\n            :mod (a / all)\n            :subevent (m2 / music\n                  :mod (p / prep-by\n                        :op1 (p2 / person\n                              :name (n / name\n                                    :op1 \"Elton\"\n                                    :op2 \"John\")))))\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Elton John\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Elton_John\")))\n",
    "relations": [
      "dbo:musicBy"
    ],
    "id": 246
  },
  "train_247": {
    "text": "How many Aldi stores are there?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?number WHERE { res:Aldi dbo:numberOfLocations ?number }",
    "extended_amr": "(s / store\n      :mod (c / company\n            :name (n / name\n                  :op1 \"Aldi\"))\n      :quant (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"store\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Aldi\")))\n",
    "relations": [
      "dbo:numberOfLocations"
    ],
    "id": 247
  },
  "train_248": {
    "text": "What is the longest river in the world?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:BodyOfWater ; dbo:length ?length } ORDER BY DESC(?length) LIMIT 1",
    "extended_amr": "(r / river\n      :ARG1-of (h / have-degree-91\n            :ARG2 (l / long-03))\n      :domain (a / amr-unknown)\n      :rel (w / world)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:length"
    ],
    "id": 248
  },
  "train_249": {
    "text": "When was John Adams born?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
    "extended_amr": "(b / bear-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Adams\"))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"John Adams\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_Adams\")))\n",
    "relations": [
      "dbo:birthDate"
    ],
    "id": 249
  },
  "train_250": {
    "text": "Which companies produce hovercrafts?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:product res:Hovercraft }",
    "extended_amr": "(p / produce-01\n      :ARG0 (c / company\n            :mod (a / amr-unknown))\n      :ARG1 (h / hovercraft)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"company\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Companies_listed_on_the_New_York_Stock_Exchange_(J)\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"hovercraft\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Hovercraft\")))\n",
    "relations": [
      "dbo:product"
    ],
    "id": 250
  },
  "train_251": {
    "text": "Who was the wife of U.S. president Lincoln?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:spouse ?uri }",
    "extended_amr": "(h / have-rel-role-91\n      :ARG1 (p2 / person\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"United\"\n                              :op2 \"States\"))\n                  :ARG2 (p / president))\n            :name (n2 / name\n                  :op1 \"A.Lincoln\"))\n      :ARG2 (w / wife)\n      :rel (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"A.Lincoln\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Abraham_Lincoln\")))\n",
    "relations": [
      "dbo:spouse"
    ],
    "id": 251
  },
  "train_252": {
    "text": "Which species does an elephant belong?",
    "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?species WHERE { dbr:Elephant dbp:species ?species }",
    "extended_amr": "(b / belong-01\n      :ARG0 (e / elephant)\n      :ARG1 (s / species\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"elephant\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Elephant\")))\n",
    "relations": [
      "dbp:species"
    ],
    "id": 252
  },
  "train_253": {
    "text": "How many people live in the capital of Australia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
    "extended_amr": "(l / live-01\n      :ARG0 (p / person\n            :quant (a / amr-unknown))\n      :location (c / city\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (c3 / capital)))\n      :rel (c2 / country\n            :name (n / name\n                  :op1 \"Australia\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Australia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Australia\")))\n",
    "relations": [
      "dbo:populationTotal",
      "dbo:capital"
    ],
    "id": 253
  },
  "train_254": {
    "text": "In which ancient empire could you pay with cocoa beans?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:currency res:Cocoa_bean }",
    "extended_amr": "(p / possible-01\n      :ARG1 (p2 / pay-01\n            :ARG0 (y / you)\n            :instrument (b / bean\n                  :mod (c / cocoa))\n            :location (e / empire\n                  :mod (a2 / ancient)\n                  :mod (a / amr-unknown)))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"bean\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cocoa_bean\")))\n",
    "relations": [
      "dbo:currency"
    ],
    "id": 254
  },
  "train_255": {
    "text": "How many theories did Albert Einstein come up with?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(?uri) AS ?count) WHERE { dbr:Albert_Einstein dbo:knownFor ?uri }",
    "extended_amr": "(c / come-up-11\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Albert\"\n                  :op2 \"Einstein\"))\n      :ARG1 (t / theory\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"theory\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Theories_of_cloaking\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Albert Einstein\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Albert_Einstein\")))\n",
    "relations": [
      "dbo:knownFor"
    ],
    "id": 255
  },
  "train_256": {
    "text": "Who composed the soundtrack for Cameron's Titanic?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Titanic_(1997_film)> dbo:musicComposer ?uri }",
    "extended_amr": "(c / compose-02\n      :ARG0 (a / amr-unknown)\n      :ARG1 (s / soundtrack\n            :beneficiary (w / work-of-art\n                  :name (n2 / name\n                        :op1 \"Titanic\")\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Cameron\"))))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"soundtrack\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Soundtrack_for_a_Revolution\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Cameron\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cameron\")\n\t\t:entity (all2/ linked_entity\n\t\t\t\t:surface_form \"Titanic\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Titanic_(1953_film)\")))\n",
    "relations": [
      "dbo:musicComposer"
    ],
    "id": 256
  },
  "train_257": {
    "text": "Give me the runtime of Toy Story.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
    "extended_amr": "(g / give-01\n      :ARG1 (r / runtime\n            :duration-of (w / work-of-art\n                  :name (n / name\n                        :op1 \"Toy\"\n                        :op2 \"Story\")))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Toy Story\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Toy_Story\")))\n",
    "relations": [
      "dbo:runtime"
    ],
    "id": 257
  },
  "train_258": {
    "text": "With how many countries Iran has borders?",
    "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?border WHERE { dbr:Geography_of_Iran dbp:borders ?border } LIMIT 8",
    "extended_amr": "(h / have-03\n      :ARG0 (c2 / country\n            :name (n / name\n                  :op1 \"Iran\"))\n      :ARG1 (b / border-01\n            :ARG1 c2\n            :ARG2 (c / country\n                  :quant (a / amr-unknown)))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Iran\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Low_Countries\")))\n",
    "relations": [
      "dbp:borders"
    ],
    "id": 258
  },
  "train_259": {
    "text": "Which electronics companies were founded in Beijing?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:industry res:Electronics ; dbo:foundationPlace res:Beijing }",
    "extended_amr": "(f / found-01\n      :ARG1 (c / company\n            :mod (e / electronic)\n            :mod (a / amr-unknown))\n      :location (c2 / city\n            :name (n / name\n                  :op1 \"Beijing\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"electronic\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Novak_Electronics\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Beijing\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Beijing\")))\n",
    "relations": [
      "dbo:industry",
      "dbo:foundationPlace"
    ],
    "id": 259
  },
  "train_260": {
    "text": "Who was the successor of John F. Kennedy?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:successor ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (s / succeed-02\n            :ARG1 (p2 / person\n                  :name (n / name\n                        :op1 \"John\"\n                        :op2 \"F.Kennedy\")))\n      :mod (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"John F.Kennedy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/F\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"John F.Kennedy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_F._Kennedy\")))\n",
    "relations": [
      "dbo:successor"
    ],
    "id": 260
  },
  "train_261": {
    "text": "Who is the mayor of Paris?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Paris dbo:mayor ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c / city\n                  :name (n / name\n                        :op1 \"Paris\"))\n            :ARG2 (m / mayor))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Paris\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Paris\")))\n",
    "relations": [
      "dbo:mayor"
    ],
    "id": 261
  },
  "train_262": {
    "text": "Did Arnold Schwarzenegger attend a university?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Arnold_Schwarzenegger dbo:almaMater ?x . ?x rdf:type dbo:University }",
    "extended_amr": "(a / attend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Arnold\"\n                  :op2 \"Schwarzenegger\"))\n      :ARG1 (u / university)\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Arnold Schwarzenegger\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Arnold_Schwarzenegger\")))\n",
    "relations": [
      "dbo:almaMater"
    ],
    "id": 262
  },
  "train_263": {
    "text": "Is James Bond married?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:James_Bond dbo:spouse ?uri }",
    "extended_amr": "(m / marry-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"James\"\n                  :op2 \"Bond\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"James Bond\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/James_Bond\")))\n",
    "relations": [
      "dbo:spouse"
    ],
    "id": 263
  },
  "train_264": {
    "text": "Does the Isar flow into a lake?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?x dbo:inflow res:Isar ; rdf:type dbo:Lake }",
    "extended_amr": "(f / flow-01\n      :ARG1 (r / river\n            :name (n / name\n                  :op1 \"Isar\"))\n      :destination (l / lake)\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Isar\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Isar\")))\n",
    "relations": [
      "dbo:inflow"
    ],
    "id": 264
  },
  "train_265": {
    "text": "Which Indian company has the most employees?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:location res:India ; dbo:numberOfEmployees ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
    "extended_amr": "(h / have-03\n      :ARG0 (c2 / company\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"India\"))\n            :mod (a / amr-unknown))\n      :ARG1 (p / person\n            :ARG1-of (e / employ-01))\n      :rel (m / most)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"company\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/India\")))\n",
    "relations": [
      "dbo:location",
      "dbo:numberOfEmployees"
    ],
    "id": 265
  },
  "train_266": {
    "text": "Who was John F. Kennedy's vice president?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:vicePresident ?uri }",
    "extended_amr": "(p2 / president\n      :domain (a / amr-unknown)\n      :mod (v / vice)\n      :poss (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"F.Kennedy\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"John F.Kennedy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_F._Kennedy\")))\n",
    "relations": [
      "dbo:vicePresident"
    ],
    "id": 266
  },
  "train_267": {
    "text": "Which country does the creator of Miffy come from?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Miffy dbo:creator ?x . ?x dbo:nationality ?uri }",
    "extended_amr": "(a2 / animal\n      :name (n / name\n            :op1 \"Miffy\")\n      :rel (c2 / come-01\n            :ARG1 (p / person\n                  :ARG0-of (c3 / create-01))\n            :ARG3 (c / country\n                  :mod (a / amr-unknown)))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Miffy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Miffy\")))\n",
    "relations": [
      "dbo:nationality",
      "dbo:creator"
    ],
    "id": 267
  },
  "train_268": {
    "text": "In what city is the Heineken brewery?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Heineken dbo:manufacturer ?x . ?x dbo:locationCity ?uri }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (b2 / brewery\n            :mod (c2 / company\n                  :name (n / name\n                        :op1 \"Heineken\")))\n      :ARG2 (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"brewery\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Rosmalen_Grass_Court_Championships\")))\n",
    "relations": [
      "dbo:locationCity",
      "dbo:manufacturer"
    ],
    "id": 268
  },
  "train_269": {
    "text": "Is Barack Obama a democrat?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Barack_Obama dbo:party <http://dbpedia.org/resource/Democratic_Party_(United_States)> }",
    "extended_amr": "(d / democrat\n      :domain (p / person\n            :name (n / name\n                  :op1 \"Barack\"\n                  :op2 \"Obama\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Barack Obama\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Barack_Obama\")))\n",
    "relations": [
      "dbo:party"
    ],
    "id": 269
  },
  "train_270": {
    "text": "List the children of Margaret Thatcher.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Margaret_Thatcher dbo:child ?uri }",
    "extended_amr": "(l / list-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Margaret\"\n                              :op2 \"Thatcher\"))\n                  :ARG2 (c / child)))\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Margaret Thatcher\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Margaret_Thatcher\")))\n",
    "relations": [
      "dbo:child"
    ],
    "id": 270
  },
  "train_271": {
    "text": "From which region is the Melon de Bourgogne?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Melon_de_Bourgogne dbo:wineRegion ?uri }",
    "extended_amr": "(b / be-from-91\n      :ARG1 (x0 / Melon\n            :name (n / name\n                  :op1 \"De\"\n                  :op2 \"Bourgogne\"))\n      :ARG2 (r / region\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"De Bourgogne\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Melon_de_Bourgogne\")))\n",
    "relations": [
      "dbo:wineRegion"
    ],
    "id": 271
  },
  "train_272": {
    "text": "how big is the total area of North Rhine- Westphalia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
    "extended_amr": "(a2 / area\n      :mod (t / total)\n      :poss (s / state\n            :name (n / name\n                  :op1 \"North\"\n                  :op2 \"Rhine-Westphalia\"))\n      :rel (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"North Rhine-Westphalia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/North_Rhine-Westphalia\")))\n",
    "relations": [
      "dbo:areaTotal"
    ],
    "id": 272
  },
  "train_273": {
    "text": "Which city has the most inhabitants?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY DESC(?pop) OFFSET 0 LIMIT 1",
    "extended_amr": "(h / have-03\n      :ARG0 (c / city\n            :mod (a / amr-unknown))\n      :ARG1 (p / person\n            :ARG0-of (i / inhabit-01))\n      :rel (m / most)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:populationTotal"
    ],
    "id": 273
  },
  "train_274": {
    "text": "What is Donald Trump's main business?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
    "extended_amr": "(b / business\n      :domain (a / amr-unknown)\n      :mod (m / main)\n      :poss (p / person\n            :name (n / name\n                  :op1 \"Donald\"\n                  :op2 \"Trump\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Donald Trump\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Donald_Trump\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"business\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Main_Monkey_Business\")))\n",
    "relations": [
      "dbo:owner"
    ],
    "id": 274
  },
  "train_275": {
    "text": "When will start the final match of the football world cup 2018?",
    "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?Date WHERE { dbr:2018_FIFA_World_Cup dbp:date ?Date } ORDER BY DESC(?Date) LIMIT 1",
    "extended_amr": "(s / start-01\n      :ARG1 (m / match-03\n            :mod (f / final)\n            :subevent-of (g / game\n                  :mod (f2 / football)\n                  :name (n / name\n                        :op1 \"world\"\n                        :op2 \"cup\"\n                        :op3 \"2018\")))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbp:date"
    ],
    "id": 275
  },
  "train_276": {
    "text": "Which films did Stanley Kubrick direct?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
    "extended_amr": "(d / direct-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Stanley\"\n                  :op2 \"Kubrick\"))\n      :ARG1 (f / film\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Stanley Kubrick\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Stanley_Kubrick\")))\n",
    "relations": [
      "dbo:director"
    ],
    "id": 276
  },
  "train_277": {
    "text": "how much is the population  Iraq?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
    "extended_amr": "(p / population\n      :mod (c / counrry\n            :name (n / name\n                  :op1 \"Iraq\"))\n      :quant (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"population\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Population\")))\n",
    "relations": [
      "dbo:populationTotal"
    ],
    "id": 277
  },
  "train_278": {
    "text": "How many inhabitants does the largest city in Canada have?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Canada dbo:largestCity ?city . ?city dbo:populationTotal ?num }",
    "extended_amr": "(h3 / have-03\n      :ARG0 (p2 / person\n            :ARG0-of (i / inhabit-01))\n      :ARG1 (h / have-03\n            :ARG0 (p / person\n                  :domain (c / city\n                        :ARG1-of (h2 / have-degree-91\n                              :ARG2 (l / large))\n                        :ARG1-of h3\n                        :location (c2 / country\n                              :name (n / name\n                                    :op1 \"canada\"))))\n            :ARG1 p2\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"canada\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Canada\")))\n",
    "relations": [
      "dbo:largestCity",
      "dbo:populationTotal"
    ],
    "id": 278
  },
  "train_279": {
    "text": "Who is the mayor of the capital of French Polynesia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:French_Polynesia dbo:capital ?x . ?x dbo:mayor ?uri }",
    "extended_amr": "(p / person\n      :ARG1-of (i / include-91)\n      :domain (a / amr-unknown)\n      :rel (m / mayor)\n      :rel (c / city\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c2 / country\n                        :name (n / name\n                              :op1 \"French\"\n                              :op2 \"Polynesia\"))))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"French Polynesia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/France\")))\n",
    "relations": [
      "dbo:mayor",
      "dbo:capital"
    ],
    "id": 279
  },
  "train_280": {
    "text": "Give me all actors starring in movies directed by William Shatner.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG0-of (s / star-01\n                  :ARG2 (m / movie\n                        :ARG1-of (d / direct-01\n                              :ARG0 (p2 / person\n                                    :name (n / name\n                                          :op1 \"William\"\n                                          :op2 \"Shatner\")))))\n            :ARG0-of (a2 / act-01)\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"William Shatner\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/William_Shatner\")))\n",
    "relations": [
      "dbo:starring",
      "dbo:director"
    ],
    "id": 280
  },
  "train_281": {
    "text": "How tall is Claudia Schiffer?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
    "extended_amr": "(h / have-quant-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Claudia\"\n                  :op2 \"Schiffer\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Claudia Schiffer\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Claudia_Schiffer\")))\n",
    "relations": [
      "dbo:height"
    ],
    "id": 281
  },
  "train_282": {
    "text": "how much is the population densty rank of germany?",
    "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?rank WHERE { dbr:Germany dbp:populationDensityRank ?rank }",
    "extended_amr": "(r / rank-01\n      :ARG1 (d / density\n            :mod (p / populate-01\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"Germany\"))))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Germany\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Germany\")))\n",
    "relations": [
      "dbp:populationDensityRank"
    ],
    "id": 282
  },
  "train_283": {
    "text": "What is the highest mountain in Italy?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
    "extended_amr": "(m / mountain\n      :ARG1-of (h / have-degree-91\n            :ARG2 (h2 / high-02))\n      :domain (a / amr-unknown)\n      :rel (c / country\n            :name (n / name\n                  :op1 \"Italy\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Italy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Italy\")))\n",
    "relations": [
      "dbo:elevation",
      "dbo:locatedInArea"
    ],
    "id": 283
  },
  "train_284": {
    "text": "List all games by GMT.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
    "extended_amr": "(l / list-01\n      :ARG1 (g / game\n            :mod (a / all)\n            :mod (p / prep-by\n                  :op1 (c / company\n                        :name (n / name\n                              :op1 \"Gene\"\n                              :op2 \"Mike\"\n                              :op3 \"Terry\"))))\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"game\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Generic_Mapping_Tools\")))\n",
    "relations": [
      "dbo:publisher"
    ],
    "id": 284
  },
  "train_285": {
    "text": "What is the official language of Suriname?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Suriname dbo:officialLanguage ?uri }",
    "extended_amr": "(l / language\n      :domain (a / amr-unknown)\n      :mod (o / official)\n      :mod (c / country\n            :name (n / name\n                  :op1 \"Suriname\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Suriname\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Suriname\")))\n",
    "relations": [
      "dbo:officialLanguage"
    ],
    "id": 285
  },
  "train_286": {
    "text": "In which city did Nikos Kazantzakis die?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Nikos_Kazantzakis dbo:deathPlace ?uri . ?uri rdf:type dbo:Town }",
    "extended_amr": "(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Nikos\"\n                  :op2 \"Kazantzakis\"))\n      :location (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Nikos Kazantzakis\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nikos_Kazantzakis\")))\n",
    "relations": [
      "dbo:deathPlace"
    ],
    "id": 286
  },
  "train_287": {
    "text": "What is in a chocolate chip cookie?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Chocolate_chip_cookie dbo:ingredient ?uri }",
    "extended_amr": "(c3 / cookie\n      :consist-of (a / amr-unknown)\n      :mod (c2 / chip\n            :consist-of (c / chocolate))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"cookie\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Chocolate_chip_cookie\")))\n",
    "relations": [
      "dbo:ingredient"
    ],
    "id": 287
  },
  "train_288": {
    "text": "In which country is the Limerick Lake?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (l / lake\n            :name (n / name\n                  :op1 \"Limerick\"\n                  :op2 \"Lake\"))\n      :ARG2 (c / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Limerick Lake\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Limerick_Lake\")))\n",
    "relations": [
      "dbo:country"
    ],
    "id": 288
  },
  "train_289": {
    "text": "Give me all video games published by Mean Hamster Software.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:VideoGame ; dbo:publisher res:Mean_Hamster_Software }",
    "extended_amr": "(g / give-01\n      :ARG1 (g2 / game\n            :ARG1-of (p / publish-01\n                  :ARG0 (c / company\n                        :name (n / name\n                              :op1 \"Mean\"\n                              :op2 \"Hamster\"\n                              :op3 \"Software\")))\n            :mod (v / video)\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Mean Hamster Software\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mean_Hamster_Software\")))\n",
    "relations": [
      "dbo:publisher"
    ],
    "id": 289
  },
  "train_290": {
    "text": "Give me all members of Prodigy.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Prodigy dbo:bandMember ?uri }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG1-of (i3 / include-91)\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n      :rel (m / member)\n      :rel (c / company\n            :name (n / name\n                  :op1 \"Prodigy\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Prodigy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Prodigy\")))\n",
    "relations": [
      "dbo:bandMember"
    ],
    "id": 290
  },
  "train_291": {
    "text": "In which time zone is Rome?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rome dbo:timeZone ?uri }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (c / city\n            :name (n / name\n                  :op1 \"Rome\"))\n      :ARG2 (z / zone\n            :mod (t / time)\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Rome\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Rome\")))\n",
    "relations": [
      "dbo:timeZone"
    ],
    "id": 291
  },
  "train_292": {
    "text": "How high is the lighthouse in Colombo?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Colombo_Lighthouse dbo:height ?num }",
    "extended_amr": "(h / have-quant-91\n      :ARG1 (l / lighthouse\n            :location (c / city\n                  :name (n / name\n                        :op1 \"Colombo\")))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"lighthouse\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Colombo_Lighthouse\")))\n",
    "relations": [
      "dbo:height"
    ],
    "id": 292
  },
  "train_293": {
    "text": "Who are the writers of the Wall album of Pink Floyd?",
    "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?writers WHERE { dbr:The_Wall dbp:writer ?writers }",
    "extended_amr": "(p / person\n      :ARG0-of (w / write-01\n            :ARG1 (a2 / album\n                  :name (n / name\n                        :op1 \"Wall\")\n                  :poss (t / team\n                        :name (n2 / name\n                              :op1 \"Pink\"\n                              :op2 \"Floyd\"))))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Wall\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Pink_Floyd_\u2013_The_Wall\")))\n",
    "relations": [
      "dbp:writer"
    ],
    "id": 293
  },
  "train_294": {
    "text": "Who is the mayor of Rotterdam?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rotterdam dbo:leaderName ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c / city\n                  :name (n / name\n                        :op1 \"Rotterdam\"))\n            :ARG2 (m / mayor))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Rotterdam\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Rotterdam\")))\n",
    "relations": [
      "dbo:leaderName"
    ],
    "id": 294
  },
  "train_295": {
    "text": "What is the largest city in Australia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Australia dbo:largestCity ?uri }",
    "extended_amr": "(c / city\n      :ARG1-of (h / have-degree-91\n            :ARG2 (l / large)\n            :ARG5 (c2 / city\n                  :location (c3 / country\n                        :name (n / name\n                              :op1 \"Australia\"))))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Australia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Australia\")))\n",
    "relations": [
      "dbo:largestCity"
    ],
    "id": 295
  },
  "train_296": {
    "text": "Who was married to president Chirac?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Jacques_Chirac dbo:spouse ?uri }",
    "extended_amr": "(m / marry-01\n      :ARG1 (a / amr-unknown)\n      :ARG2 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (p2 / president))\n            :name (n / name\n                  :op1 \"Chirac\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Chirac\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Jacques_Chirac\")))\n",
    "relations": [
      "dbo:spouse"
    ],
    "id": 296
  },
  "train_297": {
    "text": "What form of government is found in South Africa?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:South_Africa dbo:governmentType ?uri }",
    "extended_amr": "(f2 / find-01\n      :ARG1 (g / government-organization\n            :ARG0-of (g2 / govern-01)\n            :mod (f / form\n                  :mod (a / amr-unknown)))\n      :location (c / country\n            :name (n / name\n                  :op1 \"South\"\n                  :op2 \"Africa\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"South Africa\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/South_Africa\")))\n",
    "relations": [
      "dbo:governmentType"
    ],
    "id": 297
  },
  "train_298": {
    "text": "How high is the Yokohama Marine Tower?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
    "extended_amr": "(h / have-quant-91\n      :ARG1 (f / facility\n            :name (n / name\n                  :op1 \"Yokohama\"\n                  :op2 \"Marine\"\n                  :op3 \"Tower\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Yokohama Marine Tower\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Yokohama_Marine_Tower\")))\n",
    "relations": [
      "dbo:height"
    ],
    "id": 298
  },
  "train_299": {
    "text": "Which holidays are celebrated around the world? test2",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
    "extended_amr": "(c / celebrate-01\n      :ARG1 (h / holiday\n            :mod (a / amr-unknown))\n      :location (a2 / around\n            :op1 (w / world))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"celebrate-01\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Testa\")))\n",
    "relations": [],
    "id": 299
  },
  "train_300": {
    "text": "Who is the tallest basketball player?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:BasketballPlayer ; dbo:height ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
    "extended_amr": "(p / person\n      :ARG0-of (p2 / play-01\n            :ARG1 (b / basketball))\n      :ARG1-of (h / have-degree-91\n            :ARG2 (t / tall)\n            :ARG3 (m / most))\n      :domain (a / amr-unknown))\n\t:entities ( el / entity_list))\n\n",
    "relations": [
      "dbo:height"
    ],
    "id": 300
  },
  "train_301": {
    "text": "How many languages are spoken in Turkmenistan?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?x) AS ?c) WHERE { res:Turkmenistan dbo:language ?x }",
    "extended_amr": "(l / language\n      :ARG3-of (s / speak-01)\n      :location (c / country\n            :name (n / name\n                  :op1 \"Turkmenistan\"))\n      :quant (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Turkmenistan\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Turkmenistan\")))\n",
    "relations": [
      "dbo:language"
    ],
    "id": 301
  },
  "train_302": {
    "text": "Did Che Guevara have children?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Che_Guevara dbo:child ?uri }",
    "extended_amr": "(h / have-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Che\"\n                  :op2 \"Guevara\"))\n      :ARG1 (c / child)\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Che Guevara\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Che_Guevara\")))\n",
    "relations": [
      "dbo:child"
    ],
    "id": 302
  },
  "train_303": {
    "text": "Did Kaurism\u00e4ki ever win the Grand Prix at Cannes?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Aki_Kaurism\u00e4ki dbo:award <http://dbpedia.org/resource/Grand_Prix_(Cannes_Film_Festival)> }",
    "extended_amr": "(w / win-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kaurism\u00e4ki\"))\n      :ARG1 (a / award\n            :name (n2 / name\n                  :op1 \"Grand\"\n                  :op2 \"Prix\"))\n      :location (c / city\n            :name (n3 / name\n                  :op1 \"Cannes\"))\n      :mode interrogative\n      :time (e / ever))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"kaurism\u00e4ki\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Kaurism%C3%A4ki\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"grand prix\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/GrandPrix\")\n\t\t:entity (all2/ linked_entity\n\t\t\t\t:surface_form \"cannes\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cannes\")))\n\n",
    "relations": [
      "dbo:award"
    ],
    "id": 303
  },
  "train_304": {
    "text": "To which party does the mayor of Paris belong?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Paris dbo:mayor ?x . ?x dbo:party ?uri }",
    "extended_amr": "(b / belong-01\n      :ARG0 (p2 / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / city\n                        :name (n / name\n                              :op1 \"Paris\"))\n                  :ARG2 (m / mayor)))\n      :ARG1 (p / party\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Paris\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Paris\")))\n",
    "relations": [
      "dbo:mayor",
      "dbo:party"
    ],
    "id": 304
  },
  "train_305": {
    "text": "Who is the Formula 1 race driver with the most races?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:FormulaOneRacer ; dbo:races ?x } ORDER BY DESC(?x) OFFSET 0 LIMIT 1",
    "extended_amr": "(h / have-03\n      :ARG1 (r2 / race-02\n            :ARG0 (p / person\n                  :ARG0-of h\n                  :ARG0-of (d / drive-01)\n                  :domain (a / amr-unknown)\n                  :mod (r / race\n                        :name (n / name\n                              :op1 \"Formula\"\n                              :op2 \"1\")))\n            :ARG1-of (h2 / have-degree-91\n                  :ARG3 (m / most)))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Formula 1\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Race_Driver:_Create_&_Race\")))\n",
    "relations": [
      "dbo:races"
    ],
    "id": 305
  },
  "train_306": {
    "text": "What country is Sitecore from?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Sitecore dbo:foundationPlace ?uri }",
    "extended_amr": "(b / be-from-91\n      :ARG1 (c2 / company\n            :name (n / name\n                  :op1 \"Sitecore\"))\n      :ARG2 (c / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Sitecore\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sitecore\")))\n",
    "relations": [
      "dbo:foundationPlace"
    ],
    "id": 306
  },
  "train_307": {
    "text": "Give me the birth place of Frank Sinatra.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / place\n            :location-of (b / bear-02\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Frank\"\n                              :op2 \"Sinatra\"))))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Frank Sinatra\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Frank_Sinatra\")))\n",
    "relations": [
      "dbo:birthPlace"
    ],
    "id": 307
  },
  "train_308": {
    "text": "Is Christian Bale starring in Velvet Goldmine?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Velvet_Goldmine dbo:starring res:Christian_Bale }",
    "extended_amr": "(s / star-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Christian\"\n                  :op2 \"Bale\"))\n      :ARG2 (w / work-of-art\n            :name (n2 / name\n                  :op1 \"Velvet\"\n                  :op2 \"Goldmine\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Christian Bale\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Christian_Bale\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Velvet Goldmine\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Velvet_Goldmine\")))\n",
    "relations": [
      "dbo:starring"
    ],
    "id": 308
  },
  "train_309": {
    "text": "Who is the son of Sonny and Cher?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:parent res:Cher ; dbo:parent res:Sonny_Bono }",
    "extended_amr": "(p / person\n      :ARG0-of (h / have-rel-role-91\n            :ARG1 (a2 / and\n                  :op1 (p2 / person\n                        :name (n / name\n                              :op1 \"Sonny\"))\n                  :op2 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Cher\")))\n            :ARG2 (s / son))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Sonny\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cher\")))\n",
    "relations": [
      "dbo:parent"
    ],
    "id": 309
  },
  "train_310": {
    "text": "How many ethnic groups live in Slovenia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Slovenia dbo:ethnicGroup ?uri }",
    "extended_amr": "(l / live-01\n      :ARG0 (g / group\n            :mod (e / ethnic)\n            :quant (a / amr-unknown))\n      :location (c / country\n            :name (n / name\n                  :op1 \"Slovenia\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Slovenia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Slovenia\")))\n",
    "relations": [
      "dbo:ethnicGroup"
    ],
    "id": 310
  },
  "train_311": {
    "text": "What is the capital of Cameroon?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
    "extended_amr": "(c / city\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c2 / country\n                  :name (n / name\n                        :op1 \"Cameroon\"))\n            :ARG2 (c3 / capital))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Cameroon\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Cameroon\")))\n",
    "relations": [
      "dbo:capital"
    ],
    "id": 311
  },
  "train_312": {
    "text": "Was Natalie Portman born in the United States?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Natalie_Portman dbo:birthPlace ?city . ?city dbo:country res:United_States }",
    "extended_amr": "(b / bear-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Natalie\"\n                  :op2 \"Portman\"))\n      :location (c / country\n            :name (n2 / name\n                  :op1 \"United\"\n                  :op2 \"States\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Natalie Portman\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Natalie_Portman\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"United States\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_States\")))\n",
    "relations": [
      "dbo:birthPlace",
      "dbo:country"
    ],
    "id": 312
  },
  "train_313": {
    "text": "How many pages does War and Peace have?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:War_and_Peace dbo:numberOfPages ?n }",
    "extended_amr": "(h / have-03\n      :ARG0 (b / book\n            :name (n / name\n                  :op1 \"War\"\n                  :op2 \"And\"\n                  :op3 \"Peace\"))\n      :ARG1 (p / page\n            :quant (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"War And Peace\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/War_and_Peace\")))\n",
    "relations": [
      "dbo:numberOfPages"
    ],
    "id": 313
  },
  "train_314": {
    "text": "Who is the oldest child of Meryl Streep?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Meryl_Streep dbo:child ?uri . ?uri dbo:birthDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
    "extended_amr": "(h / have-degree-91\n      :ARG2 (o / old)\n      :ARG3 (m / most)\n      :rel (p / person\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Meryl\"\n                              :op2 \"Streep\"))\n                  :ARG2 (c / child))\n            :domain (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Meryl Streep\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Meryl_Streep\")))\n",
    "relations": [
      "dbo:child",
      "dbo:birthDate"
    ],
    "id": 314
  },
  "train_315": {
    "text": "Which television shows were created by Walt Disney?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
    "extended_amr": "(c / create-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Walt\"\n                  :op2 \"Disney\"))\n      :ARG1 (s / show\n            :medium (t / television)\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Walt Disney\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Walt_Disney\")))\n",
    "relations": [
      "dbo:creator"
    ],
    "id": 315
  },
  "train_316": {
    "text": "What does IYCM stand for?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:abbreviation \"IYCM\" }",
    "extended_amr": "(s2 / stand-08\n      :ARG0 (s / string-entity\n            :value \"IYCM\")\n      :ARG1 (a / amr-unknown)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:abbreviation"
    ],
    "id": 316
  },
  "train_317": {
    "text": "Which types of grapes grow in Oregon?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Oregon_wine dbo:growingGrape ?uri }",
    "extended_amr": "(g2 / grow-03\n      :ARG1 (g / grape\n            :mod (a / amr-uknown))\n      :location (s / state\n            :name (n / name\n                  :op1 \"Oregon\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Oregon\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Oregon\")))\n",
    "relations": [
      "dbo:growingGrape"
    ],
    "id": 317
  },
  "train_318": {
    "text": "Was U.S. president Jackson involved in a war?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Andrew_Jackson dbo:battle ?battle }",
    "extended_amr": "(i / involve-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"United\"\n                              :op2 \"States\"))\n                  :ARG2 (p2 / president))\n            :name (n2 / name\n                  :op1 \"Jackson\"))\n      :ARG2 (w / war-01)\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Jackson\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Andrew_Jackson\")))\n",
    "relations": [
      "dbo:battle"
    ],
    "id": 318
  },
  "train_319": {
    "text": "When was the Titanic completed?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:RMS_Titanic dbo:completionDate ?date }",
    "extended_amr": "(c / complete-01\n      :ARG1 (s / ship\n            :name (n / name\n                  :op1 \"Titanic\"))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Titanic\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Titanic_(1953_film)\")))\n",
    "relations": [
      "dbo:completionDate"
    ],
    "id": 319
  },
  "train_320": {
    "text": "Did Tesla win a nobel prize in physics?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Nikola_Tesla dbo:award res:Nobel_Prize_in_Physics }",
    "extended_amr": "(w / win-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tesla\"))\n      :ARG1 (a / award\n            :name (n2 / name\n                  :op1 \"Nobel\"\n                  :op2 \"Prize\")\n            :topic (p2 / physics))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Tesla\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nikola_Tesla\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Nobel Prize\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nobel_Prize_in_Physics\")))\n",
    "relations": [
      "dbo:award"
    ],
    "id": 320
  },
  "train_321": {
    "text": "How many states are in Mexico?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(?uri) AS ?count) WHERE { ?uri dbo:type dbr:States_of_Mexico }",
    "extended_amr": "(h / have-quant-91\n      :ARG1 (s / state\n            :location (c / country\n                  :name (n / name\n                        :op1 \"Mexico\")))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Mexico\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mexico\")))\n",
    "relations": [
      "dbo:type"
    ],
    "id": 321
  },
  "train_322": {
    "text": "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri dbo:knownFor res:Manhattan_Project ; rdf:type dbo:Scientist ; dbo:knownFor res:Nobel_Peace_Prize }",
    "extended_amr": "(k / know-02\n      :ARG1 (s / scientist\n            :mod (a / amr-unknown))\n      :ARG3 (a2 / and\n            :op1 (e / event\n                  :name (n / name\n                        :op1 \"Manhattan\"\n                        :op2 \"Project\"))\n            :op2 (a3 / award\n                  :name (n2 / name\n                        :op1 \"Nobel\"\n                        :op2 \"Peace\"\n                        :op3 \"Prize\")))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Manhattan Project\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Manhattan_Project\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Nobel Peace Prize\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Nobel_Peace_Prize\")))\n",
    "relations": [
      "dbo:knownFor"
    ],
    "id": 322
  },
  "train_323": {
    "text": "How much did the Lego Movie cost?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
    "extended_amr": "(c / cost-01\n      :ARG1 (w / work-of-art\n            :name (n / name\n                  :op1 \"Lego\"\n                  :op2 \"Movie\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Lego Movie\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Lego_Movie\")))\n",
    "relations": [
      "dbo:budget"
    ],
    "id": 323
  },
  "train_324": {
    "text": "Who composed the music for Harold and Maude?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Harold_and_Maude dbo:musicComposer ?uri }",
    "extended_amr": "(c / compose-02\n      :ARG0 (a / amr-unknown)\n      :ARG1 (m / music)\n      :ARG2 (w / work-of-art\n            :name (n / name\n                  :op1 \"Harold\"\n                  :op2 \"And\"\n                  :op3 \"Maude\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Harold And Maude\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Harold_and_Maude\")))\n",
    "relations": [
      "dbo:musicComposer"
    ],
    "id": 324
  },
  "train_325": {
    "text": "List all episodes of the first season of the HBO television series The Sopranos.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos ; dbo:seasonNumber 1 }",
    "extended_amr": "(l / list-01\n      :ARG1 (e / episode\n            :mod (a / all)\n            :part-of (s2 / series\n                  :mod (c / company\n                        :name (n2 / name\n                              :op1 \"HBO\"\n                              :op2 \"Television\"\n                              :op3 \"Series\"\n                              :op4 \"The\"\n                              :op5 \"Sopranos\"))\n                  :name (n / name))\n            :time (s / season\n                  :ord (o / ordinal-entity\n                        :quant 1)))\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"HBO Television Series The Sopranos\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/HBO\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"HBO Television Series The Sopranos\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Sopranos_(episode)\")))\n",
    "relations": [
      "dbo:seasonNumber",
      "dbo:series"
    ],
    "id": 325
  },
  "train_326": {
    "text": "Which city has the least inhabitants?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
    "extended_amr": "(h / have-03\n      :ARG0 (c / city\n            :mod (a / amr-unknown))\n      :ARG1 (p / person\n            :ARG0-of (i / inhabit-01))\n      :rel (l / least)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:populationTotal"
    ],
    "id": 326
  },
  "train_327": {
    "text": "Where is Syngman Rhee buried?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Syngman_Rhee dbo:restingPlace ?uri }",
    "extended_amr": "(b / bury-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Syngman\"\n                  :op2 \"Rhee\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Syngman Rhee\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Syngman_Rhee\")))\n",
    "relations": [
      "dbo:restingPlace"
    ],
    "id": 327
  },
  "train_328": {
    "text": "Does Neymar play for Real Madrid?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Neymar dbo:team <http://dbpedia.org/resource/Real_Madrid_C.F.> }",
    "extended_amr": "(p2 / play-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Neymar\"))\n      :beneficiary (t / team\n            :name (n2 / name\n                  :op1 \"Real\"\n                  :op2 \"Madrid\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Neymar\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Neymar\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Real Madrid\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Jorge_Mer\u00e9\")))\n",
    "relations": [
      "dbo:team"
    ],
    "id": 328
  },
  "train_329": {
    "text": "Who wrote the book The Pillars of the Earth?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
    "extended_amr": "(w / write-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (b / book\n            :name (n / name\n                  :op1 \"The\"\n                  :op2 \"pillars\"\n                  :op3 \"of\"\n                  :op4 \"the\"\n                  :op5 \"Earth\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"The pillars of the Earth\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Pillars_of_the_Earth\")))\n",
    "relations": [
      "dbo:author"
    ],
    "id": 329
  },
  "train_330": {
    "text": "Do Prince Harry and Prince William have the same parents?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { <http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge> dbo:parent ?x . res:Prince_Harry dbo:parent ?x }",
    "extended_amr": "(h3 / have-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :ARG0-of (h2 / have-org-role-91\n                        :ARG2 (p5 / prince))\n                  :name (n / name\n                        :op1 \"Harry\"))\n            :op2 (p2 / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG2 (p4 / prince))\n                  :name (n2 / name\n                        :op1 \"William\")))\n      :mode interrogative\n      :rel (s / same-01)\n      :rel (p3 / parent)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Harry\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Prince_Harry\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"prince\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge\")))\n",
    "relations": [
      "dbo:parent"
    ],
    "id": 330
  },
  "train_331": {
    "text": "Who was the doctoral supervisor of Albert Einstein?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (s / supervise-01\n            :ARG1 (p2 / person\n                  :name (n / name\n                        :op1 \"Albert\"\n                        :op2 \"Einstein\"))\n            :mod (d / doctor))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Albert Einstein\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Albert_Einstein\")))\n",
    "relations": [
      "dbo:doctoralAdvisor"
    ],
    "id": 331
  },
  "train_332": {
    "text": "Does Breaking Bad have more episodes than Game of Thrones?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Breaking_Bad dbo:numberOfEpisodes ?x . res:Game_of_Thrones dbo:numberOfEpisodes ?y FILTER ( ?y > ?x ) }",
    "extended_amr": "(h / have-03\n      :ARG0 (s / show\n            :name (n / name\n                  :op1 \"Breaking\"\n                  :op2 \"Bad\"))\n      :ARG1 (e / episode)\n      :mode interrogative\n      :rel (m / more)\n      :rel (s2 / show\n            :name (n2 / name\n                  :op1 \"Game\"\n                  :op2 \"Of\"\n                  :op3 \"Thrones\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Breaking Bad\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Breaking_Bad\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Game Of Thrones\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Game_of_Thrones\")))\n",
    "relations": [
      "dbo:numberOfEpisodes"
    ],
    "id": 332
  },
  "train_333": {
    "text": "Who was Vincent van Gogh inspired by?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:influenced res:Vincent_van_Gogh }",
    "extended_amr": "(i / inspire-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Vincent\"\n                  :op2 \"Van\"\n                  :op3 \"Gogh\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Vincent Van Gogh\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Vincent_van_Gogh\")))\n",
    "relations": [
      "dbo:influenced"
    ],
    "id": 333
  },
  "train_334": {
    "text": "Which building after the Burj Khalifa has the most floors?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Burj_Khalifa dbo:floorCount ?burj . ?uri rdf:type dbo:Building ; dbo:floorCount ?proj FILTER ( ?proj < ?burj ) } ORDER BY DESC(?proj) LIMIT 1",
    "extended_amr": "(b2 / building\n      :name (n / name\n            :op1 \"Burj\"\n            :op2 \"Khalifa\")\n      :rel (h / have-03\n            :ARG0 (b / building\n                  :mod (a / amr-unknown))\n            :ARG1 (f / floor))\n      :rel (m / most\n            :mod (a2 / after))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Burj Khalifa\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Burj_Khalifa\")))\n",
    "relations": [
      "dbo:floorCount"
    ],
    "id": 334
  },
  "train_335": {
    "text": "What was the final result of the War of the Roses?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?result WHERE { ?uri dbo:isPartOfMilitaryConflict dbr:Wars_of_the_Roses ; dbo:result ?result ; dbo:date ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1",
    "extended_amr": "(r / result-01\n      :ARG1 (w / war\n            :name (n / name\n                  :op1 \"War\"\n                  :op2 \"Of\"\n                  :op3 \"The\"\n                  :op4 \"Roses\"))\n      :ARG2 (a / amr-unknown)\n      :mod (f / final)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"War Of The Roses\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_War_of_the_Roses_(film)\")))\n",
    "relations": [
      "dbo:isPartOfMilitaryConflict",
      "dbo:date",
      "dbo:result"
    ],
    "id": 335
  },
  "train_336": {
    "text": "How much did Pulp Fiction cost?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
    "extended_amr": "(c / cost-01\n      :ARG1 (w / work-of-art\n            :name (n / name\n                  :op1 \"Pulp\"\n                  :op2 \"Fiction\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Pulp Fiction\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Pulp_Fiction\")))\n",
    "relations": [
      "dbo:budget"
    ],
    "id": 336
  },
  "train_337": {
    "text": "Is proinsulin a protein?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Proinsulin rdf:type dbo:Protein }",
    "extended_amr": "(p2 / protein\n      :domain (p / proinsulin)\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"proinsulin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Proinsulin\")))\n",
    "relations": [],
    "id": 337
  },
  "train_338": {
    "text": "Do Urdu and Persian have a common root?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Urdu dbo:languageFamily ?uri . dbr:Persian_language dbo:languageFamily ?uri }",
    "extended_amr": "(h / have-03\n      :ARG0 (a / and\n            :op1 (l / language\n                  :name (n / name\n                        :op1 \"Urdu\"))\n            :op2 (l2 / language\n                  :name (n2 / name\n                        :op1 \"Persian\")))\n      :ARG1 (r / root\n            :mod (c / common))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Urdu\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Urdu_Wikipedia\")))\n",
    "relations": [
      "dbo:languageFamily"
    ],
    "id": 338
  },
  "train_339": {
    "text": "Who is starring in Spanish movies produced by Benicio del Toro?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?film rdf:type dbo:Film ; dbo:country res:Spain ; dbo:producer res:Benicio_del_Toro ; dbo:starring ?uri . ?uri rdf:type dbo:Person }",
    "extended_amr": "(s / star-01\n      :ARG1 (a / amr-unknown)\n      :ARG2 (m / movie\n            :ARG1-of (p / produce-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Benicio\"\n                              :op2 \"Del\"\n                              :op3 \"Toro\")))\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Spain\")))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"movie\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Spain\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Benicio Del Toro\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Benicio_del_Toro\")))\n",
    "relations": [
      "dbo:country",
      "dbo:starring",
      "dbo:producer"
    ],
    "id": 339
  },
  "train_340": {
    "text": "Is Lake Baikal bigger than the Great Bear Lake?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Lake_Baikal dbo:areaTotal ?a1 . res:Great_Bear_Lake dbo:areaTotal ?a2 FILTER ( ?a1 > ?a2 ) }",
    "extended_amr": "(h / have-degree-91\n      :ARG1 (l / lake\n            :name (n / name\n                  :op1 \"Lake\"\n                  :op2 \"Baikal\"))\n      :ARG2 (b / big)\n      :ARG3 (m / more)\n      :ARG4 (l2 / lake\n            :name (n2 / name\n                  :op1 \"Great\"\n                  :op2 \"Bear\"\n                  :op3 \"Lake\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Lake Baikal\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Lake_Baikal\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Great Bear Lake\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Great_Bear_Lake\")))\n",
    "relations": [
      "dbo:areaTotal"
    ],
    "id": 340
  },
  "train_341": {
    "text": "Show me all books in Asimov's Foundation series.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:Foundation_series }",
    "extended_amr": "(s / show-01\n      :ARG1 (b / book\n            :mod (a / all)\n            :part-of (s2 / series\n                  :name (n / name\n                        :op1 \"Asimov's\"\n                        :op2 \"Foundation\")))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Asimov's Foundation\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Asimov_(disambiguation)\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Asimov's Foundation\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Foundation_series\")))\n",
    "relations": [
      "dbo:series"
    ],
    "id": 341
  },
  "train_342": {
    "text": "Where was Bach born?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Johann_Sebastian_Bach dbo:birthPlace ?uri }",
    "extended_amr": "(b / bear-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Bach\"))\n      :location (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Bach\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Johann_Sebastian_Bach\")))\n",
    "relations": [
      "dbo:birthPlace"
    ],
    "id": 342
  },
  "train_343": {
    "text": "Which city has the oldest running metro?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?loc WHERE { ?uri dbo:type dbr:Rapid_transit ; dbo:openingYear ?date ; dbo:location ?loc . ?loc rdf:type dbo:City } ORDER BY ASC(?date) LIMIT 1",
    "extended_amr": "(h / have-03\n      :ARG0 (c / city\n            :mod (a / amr-unknown))\n      :ARG1 (m / metro\n            :ARG1-of (r / run-01)\n            :ARG1-of (h2 / have-degree-91\n                  :ARG2 (o / old)\n                  :ARG3 (m2 / most)))\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:type",
      "dbo:openingYear",
      "dbo:location"
    ],
    "id": 343
  },
  "train_344": {
    "text": "Who designed the Brooklyn Bridge?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
    "extended_amr": "(d / design-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (b / bridge\n            :name (n / name\n                  :op1 \"Brooklyn\"\n                  :op2 \"Bridge\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Brooklyn Bridge\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Brooklyn_Bridge\")))\n",
    "relations": [
      "dbo:architect"
    ],
    "id": 344
  },
  "train_345": {
    "text": "How many people live in Eurasia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
    "extended_amr": "(l / live-01\n      :ARG0 (p / person\n            :quant (a / amr-unknown))\n      :location (c / continent\n            :name (n / name\n                  :op1 \"Eurasia\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Eurasia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Eurasia\")))\n",
    "relations": [
      "dbo:populationTotal"
    ],
    "id": 345
  },
  "train_346": {
    "text": "Who is the host of the BBC Wildlife Specials?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:BBC_Wildlife_Specials dbo:presenter ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (h / host-01\n            :ARG1 (s / show\n                  :mod (c / company\n                        :name (n / name\n                              :op1 \"British\"\n                              :op2 \"Broadcasting\"\n                              :op3 \"Corporation\"))\n                  :name (n2 / name\n                        :op1 \"Wildlife\"\n                        :op2 \"Specials\")))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Wildlife Specials\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/BBC\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Wildlife Specials\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/BBC_Wildlife_Specials\")))\n",
    "relations": [
      "dbo:presenter"
    ],
    "id": 346
  },
  "train_347": {
    "text": "What is the total population of Melbourne, Florida?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Melbourne,_Florida> dbo:populationTotal ?uri }",
    "extended_amr": "(h / have-quant-91\n      :ARG1 (p / population\n            :mod (t / total)\n            :mod (c / city\n                  :location (s / state\n                        :name (n2 / name\n                              :op1 \"Florida\"))\n                  :name (n / name\n                        :op1 \"Melbourne\")))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Melbourne\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Melbourne,_Florida\")))\n",
    "relations": [
      "dbo:populationTotal"
    ],
    "id": 347
  },
  "train_348": {
    "text": "What country is Mount Everest in?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (m / mountain\n            :name (n / name\n                  :op1 \"Mount\"\n                  :op2 \"Everest\"))\n      :ARG2 (c / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Mount Everest\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mount_Everest\")))\n",
    "relations": [
      "dbo:locatedInArea"
    ],
    "id": 348
  },
  "train_349": {
    "text": "To which artistic movement did the painter of The Three Dancers belong?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
    "extended_amr": "(p2 / picture\n      :name (n / name\n            :op1 \"The\"\n            :op2 \"Three\"\n            :op3 \"Dancers\")\n      :rel (b / belong-01\n            :ARG0 (p / person\n                  :ARG0-of (p3 / paint-02))\n            :ARG1 (m / movement-07\n                  :ARG1 (a3 / art)\n                  :mod (a2 / art)\n                  :mod (a / amr-unknown)))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"The Three Dancers\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/The_Three_Dancers\")))\n",
    "relations": [
      "dbo:author",
      "dbo:movement"
    ],
    "id": 349
  },
  "train_350": {
    "text": "When did Operation Overlord commence?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?d WHERE { res:Operation_Overlord dbo:date ?d }",
    "extended_amr": "(c / commence-01\n      :ARG1 (w / war\n            :name (n / name\n                  :op1 \"Operation\"\n                  :op2 \"Overlord\"))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Operation Overlord\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Operation_Overlord\")))\n",
    "relations": [
      "dbo:date"
    ],
    "id": 350
  },
  "train_351": {
    "text": "What is the bridge with the longest span?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Bridge ; dbo:mainspan ?s } ORDER BY DESC(?s) OFFSET 0 LIMIT 1",
    "extended_amr": "(b / bridge\n      :ARG0-of (h / have-03\n            :ARG1 (s / span-01\n                  :ARG1-of (h2 / have-degree-91\n                        :ARG2 (l / long-03))))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list))\n",
    "relations": [
      "dbo:mainspan"
    ],
    "id": 351
  },
  "train_352": {
    "text": "Is there a video game called Battle Chess?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?uri rdf:type dbo:VideoGame ; rdfs:label \"Battle Chess\"@en }",
    "extended_amr": "(c / call-01\n      :ARG1 (g / game\n            :mod (v / video)\n            :mode interrogative)\n      :ARG2 (g2 / game\n            :name (n / name\n                  :op1 \"Battle\"\n                  :op2 \"Chess\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Battle Chess\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Battle_Chess\")))\n",
    "relations": [],
    "id": 352
  },
  "train_353": {
    "text": "Who was buried in the Great Pyramid of Giza?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbo:restingPlace dbr:Great_Pyramid_of_Giza }",
    "extended_amr": "(b / bury-01\n      :ARG1 (a / amr-unknown)\n      :ARG2 (c / city\n            :name (n / name\n                  :op1 \"Great\"\n                  :op2 \"Pyramid\"\n                  :op3 \"Of\"\n                  :op4 \"Giza\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Great Pyramid Of Giza\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Great_Pyramid_of_Giza\")))\n",
    "relations": [
      "dbo:restingPlace"
    ],
    "id": 353
  },
  "train_354": {
    "text": "Does the Ford Motor Company have a manufacturing plant in Malaysia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { ?uri dbo:assembly dbr:Malaysia ; dbo:manufacturer dbr:Ford_Motor_Company }",
    "extended_amr": "(h / have-03\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Ford\"\n                  :op2 \"Motor\"))\n      :ARG1 (p / plant\n            :ARG0-of (m / manufacture-01))\n      :location (c2 / country\n            :name (n2 / name\n                  :op1 \"Malasya\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Ford Motor\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ford_Motor_Company\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Malasya\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Malaysia\")))\n",
    "relations": [
      "dbo:assembly",
      "dbo:manufacturer"
    ],
    "id": 354
  },
  "train_355": {
    "text": "Did Socrates influence Aristotle?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Aristotle dbo:influencedBy res:Socrates }",
    "extended_amr": "(i2 / influence-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Socrates\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Aristotle\"))\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Socrates\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Socrates\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Aristotle\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Aristotle\")))\n",
    "relations": [
      "dbo:influencedBy"
    ],
    "id": 355
  },
  "train_356": {
    "text": "How many children did Benjamin Franklin have?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
    "extended_amr": "(h / have-03\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Benjamin\"\n                  :op2 \"Franklin\"))\n      :ARG1 (p / person\n            :quant (a / amr-unknown)\n            :quant (m / many))\n      :rel (c / child)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Benjamin Franklin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Benjamin_Franklin\")))\n",
    "relations": [
      "dbo:child"
    ],
    "id": 356
  },
  "train_357": {
    "text": "How tall is Michael Jordan?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
    "extended_amr": "(t / tall\n      :domain (p / person\n            :name (n / name\n                  :op1 \"Michael\"\n                  :op2 \"Jordan\"))\n      :quant (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Michael Jordan\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Michael_Jordan\")))\n",
    "relations": [
      "dbo:height"
    ],
    "id": 357
  },
  "train_358": {
    "text": "In which UK city are the headquarters of the MI6?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Secret_Intelligence_Service dbo:headquarter ?uri . ?uri dbo:country res:United_Kingdom }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (h / headquarters-yy\n            :poss (g / government-organization\n                  :name (n2 / name\n                        :op1 \"MI6\")))\n      :ARG2 (c2 / city\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"United\"\n                        :op2 \"Kingdom\"))\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"headquarters-yy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/United_Kingdom\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"MI6\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Secret_Intelligence_Service\")))\n",
    "relations": [
      "dbo:country",
      "dbo:headquarter"
    ],
    "id": 358
  },
  "train_359": {
    "text": "Who created Family Guy?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
    "extended_amr": "(c / create-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (s / show\n            :name (n / name\n                  :op1 \"Family\"\n                  :op2 \"Guy\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Family Guy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Family_Guy\")))\n",
    "relations": [
      "dbo:creator"
    ],
    "id": 359
  },
  "train_360": {
    "text": "In which city does the Chile Route 68 end?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Chile_Route_68 dbo:routeEnd ?uri }",
    "extended_amr": "(e / end-01\n      :ARG1 (r / route\n            :name (n / name\n                  :op1 \"Chile\"\n                  :op2 \"Route\"\n                  :op3 \"68\"))\n      :location (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Chile Route 68\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Chile_Route_68\")))\n",
    "relations": [
      "dbo:routeEnd"
    ],
    "id": 360
  },
  "train_361": {
    "text": "Give me the grandchildren of Elvis Presley.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Elvis_Presley dbo:child ?child . ?child dbo:child ?uri }",
    "extended_amr": "(g / give-01\n      :ARG2 (i / i)\n      :mode imperative\n      :rel (h / have-rel-role-91\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Elvis\"\n                        :op2 \"Presley\"))\n            :ARG2 (g2 / grandchild))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Elvis Presley\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Elvis_Presley\")))\n",
    "relations": [
      "dbo:child"
    ],
    "id": 361
  },
  "train_362": {
    "text": "When did the Ming dynasty dissolve?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Ming_dynasty dbo:dissolutionDate ?date }",
    "extended_amr": "(d2 / dissolve-01\n      :ARG1 (d / dynasty\n            :name (n / name\n                  :op1 \"Ming\"))\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Ming\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ming_dynasty\")))\n",
    "relations": [
      "dbo:dissolutionDate"
    ],
    "id": 362
  },
  "train_363": {
    "text": "In which military conflicts did Lawrence of Arabia participate?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:T._E._Lawrence dbo:battle ?uri }",
    "extended_amr": "(p2 / participate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lawrence\"\n                  :op2 \"Of\"\n                  :op3 \"Arabia\"))\n      :ARG1 (c / conflict-01\n            :mod (m / military)\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Lawrence Of Arabia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/T._E._Lawrence\")))\n",
    "relations": [
      "dbo:battle"
    ],
    "id": 363
  },
  "train_364": {
    "text": "What is the timezone in San Pedro de Atacama?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:San_Pedro_de_Atacama dbo:timeZone ?uri }",
    "extended_amr": "(t / timezone\n      :domain (a / amr-unknown)\n      :location (c / city\n            :name (n / name\n                  :op1 \"San\"\n                  :op2 \"Pedro\"\n                  :op3 \"De\"\n                  :op4 \"Atacama\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"San Pedro De Atacama\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/San_Pedro_de_Atacama\")))\n",
    "relations": [
      "dbo:timeZone"
    ],
    "id": 364
  },
  "train_365": {
    "text": "Give me all books by William Goldman with more than 300 pages.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:author res:William_Goldman ; dbo:numberOfPages ?x FILTER ( ?x > 300 ) }",
    "extended_amr": "(g / give-01\n      :ARG1 (b / book\n            :ARG0-of (h / have-03\n                  :ARG1 (p2 / page\n                        :quant (m / more-than\n                              :op1 300)))\n            :mod (a / all)\n            :source (p / person\n                  :name (n / name\n                        :op1 \"William\"\n                        :op2 \"Goldman\")))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"William Goldman\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/William_Goldman\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"300\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/300\")))\n",
    "relations": [
      "dbo:numberOfPages",
      "dbo:author"
    ],
    "id": 365
  },
  "train_366": {
    "text": "What did Bruce Carver die from?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Carver dbo:deathCause ?uri }",
    "extended_amr": "(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Bruce\"\n                  :op2 \"Carver\"))\n      :ARG3 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Bruce Carver\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Bruce_Carver\")))\n",
    "relations": [
      "dbo:deathCause"
    ],
    "id": 366
  },
  "train_367": {
    "text": "Which subsidiary of Lufthansa serves both Dortmund and Berlin Tegel?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Lufthansa dbo:subsidiary ?uri . ?uri dbo:targetAirport res:Dortmund_Airport ; dbo:targetAirport res:Berlin_Tegel_Airport }",
    "extended_amr": "(s2 / serve-01\n      :ARG0 (s / subsidiary\n            :mod (a / amr-unknown)\n            :mod (c / company\n                  :name (n / name\n                        :op1 \"Lufthansa\")))\n      :ARG2 (a2 / and\n            :op1 (c2 / city\n                  :name (n2 / name\n                        :op1 \"Dortmund\"))\n            :op2 (c3 / city\n                  :name (n3 / name\n                        :op1 \"Berlin\"))\n            :op2 (c4 / city\n                  :name (n4 / name\n                        :op1 \"Tegel\")))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Lufthansa\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Lufthansa\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Dortmund\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Dortmund_Airport\")\n\t\t:entity (all2/ linked_entity\n\t\t\t\t:surface_form \"Berlin\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Berlin_Tegel_Airport\")))\n",
    "relations": [
      "dbo:subsidiary",
      "dbo:targetAirport"
    ],
    "id": 367
  },
  "train_368": {
    "text": "Does Abraham Lincoln's death place have a website?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Abraham_Lincoln dbo:deathPlace ?p . ?p dbo:website ?w }",
    "extended_amr": "(h / have-03\n      :ARG0 (p2 / place\n            :mod (d / die-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Abraham\"\n                              :op2 \"Lincoln\"))))\n      :ARG1 (w / website)\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Abraham Lincoln\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Abraham_Lincoln\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"place\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/This_Place_Is_Death\")\n\t\t:entity (all2/ linked_entity\n\t\t\t\t:surface_form \"website\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Website\")))\n",
    "relations": [
      "dbo:website",
      "dbo:deathPlace"
    ],
    "id": 368
  },
  "train_369": {
    "text": "Did Elvis Presley have children?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Elvis_Presley dbo:child ?uri }",
    "extended_amr": "(h / have-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Elvis\"\n                  :op2 \"Presley\"))\n      :ARG1 (c / child)\n      :mode interrogative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Elvis Presley\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Elvis_Presley\")))\n",
    "relations": [
      "dbo:child"
    ],
    "id": 369
  },
  "train_370": {
    "text": "Is Michelle Obama the wife of Barack Obama?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Barack_Obama dbo:spouse res:Michelle_Obama }",
    "extended_amr": "(p / person\n      :ARG0-of (h / have-rel-role-91\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Barack\"\n                        :op2 \"Obama\"))\n            :ARG2 (w / wife))\n      :mode interrogative\n      :name (n / name\n            :op1 \"Michelle\"\n            :op2 \"Obama\")\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Michelle Obama\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Michelle_Obama\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Barack Obama\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Barack_Obama\")))\n",
    "relations": [
      "dbo:spouse"
    ],
    "id": 370
  },
  "train_371": {
    "text": "In which city does Sylvester Stallone live?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City . res:Sylvester_Stallone dbo:residence ?uri }",
    "extended_amr": "(l / live-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sylvester\"\n                  :op2 \"Stallone\"))\n      :location (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Sylvester Stallone\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sylvester_Stallone\")))\n",
    "relations": [
      "dbo:residence"
    ],
    "id": 371
  },
  "train_372": {
    "text": "Which books by Kerouac were published by Viking Press?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:publisher res:Viking_Press ; dbo:author res:Jack_Kerouac }",
    "extended_amr": "(p2 / publish-01\n      :ARG0 (c / company\n            :name (n2 / name\n                  :op1 \"Viking\"\n                  :op2 \"Press\"))\n      :ARG1 (b / book\n            :mod (a / amr-unknown)\n            :source (p / person\n                  :name (n / name\n                        :op1 \"Kerouac\")))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Kerouac\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Jack_Kerouac\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Viking Press\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Viking_Press\")))\n",
    "relations": [
      "dbo:author",
      "dbo:publisher"
    ],
    "id": 372
  },
  "train_373": {
    "text": "Who wrote the song Hotel California?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Hotel_California dbo:writer ?uri }",
    "extended_amr": "(w / write-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (s / song\n            :name (n / name\n                  :op1 \"Hotel\"\n                  :op2 \"California\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Hotel California\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Hotel_California\")))\n",
    "relations": [
      "dbo:writer"
    ],
    "id": 373
  },
  "train_374": {
    "text": "What is the capital of Canada?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
    "extended_amr": "(c / city\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c2 / country\n                  :name (n / name\n                        :op1 \"canada\"))\n            :ARG2 (c3 / capital))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"canada\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Canada\")))\n",
    "relations": [
      "dbo:capital"
    ],
    "id": 374
  },
  "train_375": {
    "text": "Who is the mayor of Tel Aviv?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Tel_Aviv dbo:leaderName ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c / city\n                  :name (n / name\n                        :op1 \"Tel\"\n                        :op2 \"Aviv\"))\n            :ARG2 (m / mayor))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Tel Aviv\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Tel_Aviv\")))\n",
    "relations": [
      "dbo:leaderName"
    ],
    "id": 375
  },
  "train_376": {
    "text": "What form of government does Russia have?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Russia dbo:governmentType ?uri }",
    "extended_amr": "(h / have-03\n      :ARG0 (c / country\n            :name (n / name\n                  :op1 \"Russia\"))\n      :ARG1 (g / government-organization\n            :ARG0-of (g2 / govern-01)\n            :mod (f / form\n                  :mod (a / amr-unknown)))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Russia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Russia\")))\n",
    "relations": [
      "dbo:governmentType"
    ],
    "id": 376
  },
  "train_377": {
    "text": "Show me the book that Muhammad Ali wrote.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:author res:Muhammad_Ali }",
    "extended_amr": "(s / show-01\n      :ARG1 (b / book\n            :ARG1-of (w / write-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Muhammad\"\n                              :op2 \"Ali\"))))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Muhammad Ali\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Muhammad_Ali\")))\n",
    "relations": [
      "dbo:author"
    ],
    "id": 377
  },
  "train_378": {
    "text": "Who was the first to climb Mount Everest?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:firstAscentPerson ?uri }",
    "extended_amr": "(p / person\n      :domain (a / amr-unknown)\n      :ord (o / ordinal-entity\n            :ARG0-of (c / climb-01\n                  :ARG1 (m / mountain\n                        :name (n / name\n                              :op1 \"Mount\"\n                              :op2 \"Everest\"))))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Mount Everest\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mount_Everest\")))\n",
    "relations": [
      "dbo:firstAscentPerson"
    ],
    "id": 378
  },
  "train_379": {
    "text": "How many languages are spoken in Colombia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri rdf:type dbo:Language . res:Colombia dbo:language ?uri }",
    "extended_amr": "(l / language\n      :ARG3-of (s / speak-01)\n      :location (c / country\n            :name (n / name\n                  :op1 \"Colombia\"))\n      :quant (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Colombia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Colombia\")))\n",
    "relations": [
      "dbo:language"
    ],
    "id": 379
  },
  "train_380": {
    "text": "What is the currency of the Czech Republic?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
    "extended_amr": "(c / currency\n      :domain (a / amr-unknown)\n      :poss (c2 / country\n            :name (n / name\n                  :op1 \"Czech\"\n                  :op2 \"Republic\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Czech Republic\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Czech_Republic\")))\n",
    "relations": [
      "dbo:currency"
    ],
    "id": 380
  },
  "train_381": {
    "text": "Where in France is sparkling wine produced?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:wineProduced res:Sparkling_wine ; dbo:location res:France }",
    "extended_amr": "(p / produce-01\n      :ARG1 (w / wine\n            :mod (s / sparkle))\n      :location (c / country\n            :name (n / name\n                  :op1 \"France\"))\n      :location (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"wine\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sparkling_wines\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"France\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/France\")))\n",
    "relations": [
      "dbo:wineProduced",
      "dbo:location"
    ],
    "id": 381
  },
  "train_382": {
    "text": "When did Boris Becker end his active career?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?d WHERE { res:Boris_Becker dbo:activeYearsEndDate ?d }",
    "extended_amr": "(e / end-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Boris\"\n                  :op2 \"Becker\"))\n      :ARG1 (c / career\n            :ARG1-of (a2 / activity-06\n                  :ARG0 p)\n            :poss p)\n      :time (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Boris Becker\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Boris_Becker\")))\n",
    "relations": [
      "dbo:activeYearsEndDate"
    ],
    "id": 382
  },
  "train_383": {
    "text": "Which movies starring Mickey Rourke were directed by Guy Ritchie?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Mickey_Rourke ; dbo:director res:Guy_Ritchie }",
    "extended_amr": "(d / direct-01\n      :ARG0 (p2 / person\n            :name (n2 / name\n                  :op1 \"Guy\"\n                  :op2 \"Ritchie\"))\n      :ARG1 (m / movie\n            :ARG2-of (s / star-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Mickey\"\n                              :op2 \"Rourke\")))\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Mickey Rourke\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Mickey_Rourke\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Guy Ritchie\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Guy_Ritchie\")))\n",
    "relations": [
      "dbo:director",
      "dbo:starring"
    ],
    "id": 383
  },
  "train_384": {
    "text": "In which films did Julia Roberts as well as Richard Gere play?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
    "extended_amr": "(p3 / play-11\n      :ARG0 (a2 / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Julia\"\n                        :op2 \"Roberts\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Richard\"\n                        :op2 \"Gere\")))\n      :ARG2 (f / film\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Julia Roberts\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Julia_Roberts\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Richard Gere\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Richard_Gere\")))\n",
    "relations": [
      "dbo:starring"
    ],
    "id": 384
  },
  "train_385": {
    "text": "Show me Hemingway's autobiography.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:author res:Ernest_Hemingway ; dbo:literaryGenre res:Autobiography }",
    "extended_amr": "(s / show-01\n      :ARG1 (a / autobiography\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Hemingway\")))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Hemingway\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Hemingway_House\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"autobiography\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Autobiography\")))\n",
    "relations": [
      "dbo:author",
      "dbo:literaryGenre"
    ],
    "id": 385
  },
  "train_386": {
    "text": "How tall is Amazon Eve?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Amazon_Eve dbo:height ?height }",
    "extended_amr": "(h / have-quant-91\n      :ARG1 (c / company\n            :name (n / name\n                  :op1 \"Amazon\"\n                  :op2 \"Eve\"))\n      :ARG2 (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Amazon Eve\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Amazon_Eve\")))\n",
    "relations": [
      "dbo:height"
    ],
    "id": 386
  },
  "train_387": {
    "text": "What are the five boroughs of New York?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:governmentType <http://dbpedia.org/resource/Borough_(New_York_City)> }",
    "extended_amr": "(b / borough\n      :domain (a / amr-unknown)\n      :part-of (s / state\n            :name (n / name\n                  :op1 \"New\"\n                  :op2 \"York\"))\n      :quant 5\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"New York\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/New_York\")))\n",
    "relations": [
      "dbo:governmentType"
    ],
    "id": 387
  },
  "train_388": {
    "text": "Give me all Canadian Grunge record labels.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:RecordLabel ; dbo:genre res:Grunge ; dbo:country res:Canada }",
    "extended_amr": "(g / give-01\n      :ARG1 (l / label\n            :mod (r / record)\n            :mod (c2 / company\n                  :name (n2 / name\n                        :op1 \"Grunge\"))\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Canada\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"label\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Canada\")))\n",
    "relations": [
      "dbo:genre",
      "dbo:country"
    ],
    "id": 388
  },
  "train_389": {
    "text": "In which country does the Ganges start?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ganges dbo:sourceCountry ?uri }",
    "extended_amr": "(s / start-06\n      :ARG0 (r / river\n            :name (n / name\n                  :op1 \"Ganges\"))\n      :location (c / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Ganges\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Ganges\")))\n",
    "relations": [
      "dbo:sourceCountry"
    ],
    "id": 389
  },
  "train_390": {
    "text": "Who is the founder of Penguin Books?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
    "extended_amr": "(p / person\n      :ARG0-of (f / found-01\n            :ARG1 (c / company\n                  :name (n / name\n                        :op1 \"Penguin\"\n                        :op2 \"Books\")))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Penguin Books\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Penguin_Books\")))\n",
    "relations": [
      "dbo:founder"
    ],
    "id": 390
  },
  "train_391": {
    "text": "Who wrote the Game of Thrones theme?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
    "extended_amr": "(w / write-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (t / theme\n            :mod (s / show\n                  :name (n / name\n                        :op1 \"Game\"\n                        :op2 \"Of\"\n                        :op3 \"Thrones\")))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Game Of Thrones\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Game_of_Thrones\")))\n",
    "relations": [
      "dbo:composer"
    ],
    "id": 391
  },
  "train_392": {
    "text": "Who is the president of Eritrea?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Eritrea dbo:leader ?uri ; dbo:leaderTitle \"President\"@en }",
    "extended_amr": "(p / person\n      :ARG0-of (h / have-org-role-91\n            :ARG1 (c / country\n                  :name (n / name\n                        :op1 \"Eritrea\"))\n            :ARG2 (p2 / president))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Eritrea\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Eritrea\")))\n",
    "relations": [
      "dbo:leaderTitle",
      "dbo:leader"
    ],
    "id": 392
  },
  "train_393": {
    "text": "In which city did John F. Kennedy die?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:deathPlace ?uri . ?uri rdf:type dbo:City }",
    "extended_amr": "(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"F.Kennedy\"))\n      :location (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"John F.Kennedy\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/John_F._Kennedy\")))\n",
    "relations": [
      "dbo:deathPlace"
    ],
    "id": 393
  },
  "train_394": {
    "text": "What is the highest mountain in Australia?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Australia ; dbo:elevation ?elevation } ORDER BY DESC(?elevation) LIMIT 1",
    "extended_amr": "(m / mountain\n      :ARG1 (h / have-degree-91\n            :ARG2 (h2 / high-02)\n            :ARG5 (c / city\n                  :location (c2 / country\n                        :name (n / name\n                              :op1 \"Australia\"))))\n      :domain (a / amr-unknown)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Australia\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Australia\")))\n",
    "relations": [
      "dbo:elevation",
      "dbo:locatedInArea"
    ],
    "id": 394
  },
  "train_395": {
    "text": "Who writes the Farmers' Almanac?",
    "sparql": "PREFIX dbp: <http://dbpedia.org/property/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Farmers'_Almanac> dbp:editor ?uri }",
    "extended_amr": "(w / write-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (b / book\n            :name (n / name\n                  :op1 \"Farmers\"\n                  :op2 \"'\"\n                  :op3 \"Almanac\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Farmers  Almanac\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Farmers_Creek_Township,_Jackson_County,_Iowa\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Farmers  Almanac\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Project_Almanac\")))\n",
    "relations": [
      "dbp:editor"
    ],
    "id": 395
  },
  "train_396": {
    "text": "Give me the currency of China.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
    "extended_amr": "(g / give-01\n      :ARG1 (c / currency\n            :poss (c2 / country\n                  :name (n / name\n                        :op1 \"China\")))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"China\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/China\")))\n",
    "relations": [
      "dbo:currency"
    ],
    "id": 396
  },
  "train_397": {
    "text": "Give me all Swedish oceanographers.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:field res:Oceanography ; dbo:birthPlace res:Sweden }",
    "extended_amr": "(g / give-01\n      :ARG1 (o / oceanographer\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Sweden\"))\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"oceanographer\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Sweden\")))\n",
    "relations": [
      "dbo:birthPlace",
      "dbo:field"
    ],
    "id": 397
  },
  "train_398": {
    "text": "In which city are the headquarters of the United Nations?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Headquarters_of_the_United_Nations dbo:location ?uri . ?uri rdf:type dbo:City }",
    "extended_amr": "(b / be-located-at-91\n      :ARG1 (h / headquarters-yy\n            :poss (o / organization\n                  :name (n / name\n                        :op1 \"United\"\n                        :op2 \"nations\")))\n      :ARG2 (c / city\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"United nations\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Headquarters_of_the_United_Nations\")))\n",
    "relations": [
      "dbo:location"
    ],
    "id": 398
  },
  "train_399": {
    "text": "Is Rita Wilson the wife of Tom Hanks?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Tom_Hanks dbo:spouse res:Rita_Wilson }",
    "extended_amr": "(p / person\n      :ARG0-of (h / have-rel-role-91\n            :ARG1 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Tom\"\n                        :op2 \"Hanks\"))\n            :ARG2 (w / wife))\n      :mode interrogative\n      :name (n / name\n            :op1 \"Rita\"\n            :op2 \"Wilson\")\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Rita Wilson\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Rita_Wilson\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Tom Hanks\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Tom_Hanks\")))\n",
    "relations": [
      "dbo:spouse"
    ],
    "id": 399
  },
  "train_400": {
    "text": "In which countries do people speak Japanese?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:language res:Japanese_language }",
    "extended_amr": "(s / speak-01\n      :ARG0 (p / person)\n      :ARG3 (c2 / country\n            :name (n / name\n                  :op1 \"Japan\"))\n      :location (c / country\n            :mod (a / amr-unknown))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"country\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Country\")\n\t\t:entity (all1/ linked_entity\n\t\t\t\t:surface_form \"Japan\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Japan\")))\n",
    "relations": [
      "dbo:language"
    ],
    "id": 400
  },
  "train_401": {
    "text": "Which of Tim Burton's films had the highest budget?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Tim_Burton ; dbo:budget ?b } ORDER BY ?b OFFSET 0 LIMIT 1",
    "extended_amr": "(p / person\n      :name (n / name\n            :op1 \"Tim\"\n            :op2 \"Burton\")\n      :rel (h / have-03\n            :ARG0 (f / film\n                  :ARG1-of (i / include-91)\n                  :mod (a / amr-unknown))\n            :ARG1 (b / budget-01))\n      :rel (h2 / high-02)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Tim Burton\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Tim_Burton\")\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"film\"\n\t\t\t\t:uri \"http://dbpedia.org/ontology/Film\")))\n",
    "relations": [
      "dbo:director",
      "dbo:budget"
    ],
    "id": 401
  },
  "train_402": {
    "text": "Which museum in New York has the most visitors?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Museum ; dbo:location res:New_York_City ; dbo:numberOfVisitors ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
    "extended_amr": "(h / have-03\n      :ARG0 (m / museum\n            :location (s / state\n                  :name (n / name\n                        :op1 \"New\"\n                        :op2 \"York\"))\n            :mod (a / amr-unknown))\n      :ARG1 (p / person\n            :ARG0-of (v / visit-01))\n      :rel (m2 / most)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"New York\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/New_York_City\")))\n",
    "relations": [
      "dbo:numberOfVisitors",
      "dbo:location"
    ],
    "id": 402
  },
  "train_403": {
    "text": "What was the first Queen album?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
    "extended_amr": "(a / album\n      :domain (a2 / amr-unknown)\n      :mod (p / person\n            :name (n / name\n                  :op1 \"Queen\"))\n      :ord (o / ordinal-entity\n            :quant 1)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"album\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Queen_(Queen_album)\")))\n",
    "relations": [
      "dbo:releaseDate",
      "dbo:artist"
    ],
    "id": 403
  },
  "train_404": {
    "text": "What was the first name of the band Queens of the Stone Age?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?name WHERE { res:Queens_of_the_Stone_Age dbo:alias ?name }",
    "extended_amr": "(n / name-01\n      :ARG1 (s / song\n            :name (n2 / name\n                  :op1 \"Queens\"\n                  :op2 \"Of\"\n                  :op3 \"The\"\n                  :op4 \"Stone\"\n                  :op5 \"Age\"))\n      :ARG2 (a / amr-unknown)\n      :ord (o / ordinal-entity\n            :quant 1)\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Queens Of The Stone Age\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Queens_of_the_Stone_Age\")))\n",
    "relations": [
      "dbo:alias"
    ],
    "id": 404
  },
  "train_405": {
    "text": "What was the last movie with Alec Guinness?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
    "extended_amr": "(m / movie\n      :mod (a / amr-unknown\n            :mod (l / last))\n      :prep-with (p / person\n            :name (n / name\n                  :op1 \"Alec\"\n                  :op2 \"Guinness\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Alec Guinness\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Alec_Guinness\")))\n",
    "relations": [
      "dbo:releaseDate",
      "dbo:starring"
    ],
    "id": 405
  },
  "train_406": {
    "text": "Give me all actors starring in Last Action Hero.",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Last_Action_Hero dbo:starring ?uri }",
    "extended_amr": "(g / give-01\n      :ARG1 (p / person\n            :ARG0-of (s / star-01\n                  :ARG2 (w / work-of-art\n                        :name (n / name\n                              :op1 \"Last\"\n                              :op2 \"Action\"\n                              :op3 \"Hero\")))\n            :ARG0-of (a2 / act-01)\n            :mod (a / all))\n      :ARG2 (i / i)\n      :mode imperative\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Last Action Hero\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Last_Action_Hero\")))\n",
    "relations": [
      "dbo:starring"
    ],
    "id": 406
  },
  "train_407": {
    "text": "Who discovered Pluto?",
    "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:Pluto dbo:discoverer ?uri }",
    "extended_amr": "(d / discover-01\n      :ARG0 (a / amr-unknown)\n      :ARG1 (p / planet\n            :name (n / name\n                  :op1 \"Pluto\"))\n\t:entities ( el / entity_list\n\t\t:entity (all0/ linked_entity\n\t\t\t\t:surface_form \"Pluto\"\n\t\t\t\t:uri \"http://dbpedia.org/resource/Pluto\")))\n",
    "relations": [
      "dbo:discoverer"
    ],
    "id": 407
  }
}